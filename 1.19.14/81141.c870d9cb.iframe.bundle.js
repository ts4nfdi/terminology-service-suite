"use strict";(self.webpackChunk_nfdi4health_semlookp_widgets=self.webpackChunk_nfdi4health_semlookp_widgets||[]).push([[81141],{"./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{b:()=>BreadcrumbWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/badge/badge.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/tool_tip/icon_tip.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_utils_helper__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");function BreadcrumbWidget(props){const{api,ontologyId,iri,entityType,colorFirst,colorSecond,parameter}=props,fixedEntityType="class"==entityType?"term":entityType,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_3__.m(api),{data:ontologyJSON,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([api,"short_form",fixedEntityType,ontologyId,iri,parameter],(()=>(0,_utils_helper__WEBPACK_IMPORTED_MODULE_4__.S)(olsApi,fixedEntityType,ontologyId,iri,parameter)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.l7,{color:colorFirst||(props.ontologyId?"primary":"warning"),children:props.ontologyId?.toUpperCase()||(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.p,{size:"s"})})," > ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.l7,{color:colorSecond||"warning",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.p,{size:"s"})})]}),isSuccess&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span",{children:[!props.ontologyId&&!ontologyJSON.is_defining_ontology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.a,{size:"s",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("i",{children:"Defining ontology not available "}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.D,{type:"iInCircle",color:"subdued",content:`Showing occurence inside ${ontologyJSON.ontology_name} instead.`})]})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.l7,{color:colorFirst||"primary",children:ontologyJSON.ontology_name.toUpperCase()})," > ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.l7,{color:colorSecond||"success",children:ontologyJSON.short_form?ontologyJSON.short_form.toUpperCase():"No short form available"})]}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.l7,{color:colorFirst||(props.ontologyId||ontologyJSON&&ontologyJSON.ontology_name?"primary":"danger"),children:props.ontologyId?.toUpperCase()||ontologyJSON&&ontologyJSON.ontology_name?.toUpperCase()||(0,_utils_helper__WEBPACK_IMPORTED_MODULE_4__.Z)(error,"ontology")})," > ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.l7,{color:colorSecond||(ontologyJSON&&ontologyJSON.short_form?"success":"danger"),children:ontologyJSON&&ontologyJSON.short_form?ontologyJSON.short_form.toUpperCase():(0,_utils_helper__WEBPACK_IMPORTED_MODULE_4__.Z)(error,"short form")})]})]})}BreadcrumbWidget.__docgenInfo={description:"",methods:[],displayName:"BreadcrumbWidget",props:{iri:{required:!0,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},colorFirst:{required:!1,tsType:{name:"union",raw:'| "primary"\n| "accent"\n| "success"\n| "warning"\n| "danger"\n| "ghost"\n| "text"\n| "subdued"\n| string',elements:[{name:"literal",value:'"primary"'},{name:"literal",value:'"accent"'},{name:"literal",value:'"success"'},{name:"literal",value:'"warning"'},{name:"literal",value:'"danger"'},{name:"literal",value:'"ghost"'},{name:"literal",value:'"text"'},{name:"literal",value:'"subdued"'},{name:"string"}]},description:""},colorSecond:{required:!1,tsType:{name:"string"},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}}},"./src/components/widgets/MetadataWidget/BreadcrumbWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{b:()=>_BreadcrumbWidget__WEBPACK_IMPORTED_MODULE_0__.b});var _BreadcrumbWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbWidget.tsx")},"./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{d:()=>DescriptionWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/api/OlsApi.ts"),_utils_helper__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const NO_DESCRIPTION="No description available.";function DescriptionWidget(props){const{api,ontologyId,iri,descText,entityType,parameter,...rest}=props,fixedEntityType="class"==entityType?"term":entityType,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_4__.m(api),{data:response,isLoading,isError,isSuccess,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([api,"description",fixedEntityType,ontologyId,iri,parameter],(()=>async function getDescription(olsApi,entityType,ontologyId,iri,parameter){if("ontology"==entityType){if(ontologyId){const response=await olsApi.getOntology(void 0,void 0,{ontologyId},parameter);return{description:response?.config.description||NO_DESCRIPTION}}throw Error("ontology id has to be provided")}if("term"===entityType||"property"===entityType||"individual"===entityType){if(iri){const response=await(0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.S)(olsApi,entityType,ontologyId,iri,parameter);return{description:response.description||NO_DESCRIPTION,inDefiningOntology:response.is_defining_ontology,ontology:response.ontology_name}}throw Error("iri has to be provided")}throw Error("Unexpected entity type. Should be one of 'ontology', 'term', 'class', 'individual', 'property'")}(olsApi,fixedEntityType,ontologyId,iri,parameter)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.p,{size:"s"}),isSuccess&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{...rest,children:descText||response.description})}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{children:(0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Z)(error,"description")})]})}DescriptionWidget.__docgenInfo={description:"",methods:[],displayName:"DescriptionWidget",props:{iri:{required:!1,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},descText:{required:!1,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "ontology"\n| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"ontology"'},{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}},composes:["EuiTextProps"]}},"./src/components/widgets/MetadataWidget/DescriptionWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{d:()=>_DescriptionWidget__WEBPACK_IMPORTED_MODULE_0__.d});var _DescriptionWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx")},"./src/components/widgets/MetadataWidget/IriWidget/IriWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{w:()=>IriWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@elastic/eui/es/components/link/link.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function IriWidget(props){const{iri,iriText,color}=props;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_2__.J,{grow:!1,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_3__.p,{href:iri,target:"_blank",color,children:iriText||iri})})})}IriWidget.displayName="IriWidget",IriWidget.__docgenInfo={description:"",methods:[],displayName:"IriWidget",props:{iri:{required:!0,tsType:{name:"string"},description:""},iriText:{required:!1,tsType:{name:"string"},description:""},color:{required:!1,tsType:{name:"union",raw:'| "primary"\n| "accent"\n| "success"\n| "warning"\n| "danger"\n| "ghost"\n| "text"\n| "subdued"',elements:[{name:"literal",value:'"primary"'},{name:"literal",value:'"accent"'},{name:"literal",value:'"success"'},{name:"literal",value:'"warning"'},{name:"literal",value:'"danger"'},{name:"literal",value:'"ghost"'},{name:"literal",value:'"text"'},{name:"literal",value:'"subdued"'}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}}},"./src/components/widgets/MetadataWidget/IriWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{w:()=>_IriWidget__WEBPACK_IMPORTED_MODULE_0__.w});var _IriWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/IriWidget/IriWidget.tsx")},"./src/components/widgets/MetadataWidget/MetadataWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q:()=>MetadataWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_group.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_BreadcrumbWidget__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/widgets/MetadataWidget/BreadcrumbWidget/index.ts"),_IriWidget__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/widgets/MetadataWidget/IriWidget/index.ts"),_TitleWidget__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/index.ts"),_DescriptionWidget__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/index.ts"),_TabWidget__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/index.ts"),react_query__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react-query/es/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/api/OlsApi.ts"),_utils_helper__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/react/jsx-runtime.js");function MetadataWidget(props){const{iri,api,ontologyId,entityType,parameter}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_8__.m(api),{data:ontologyJSON,isLoading:isLoadingOntologyId,isSuccess:isSuccessOntologyId,isError:isErrorOntologyId,error:errorOntologyId}=(0,react_query__WEBPACK_IMPORTED_MODULE_6__.useQuery)(["ontologyId",iri,api,entityType,parameter,props.ontologyId],(async()=>(0,_utils_helper__WEBPACK_IMPORTED_MODULE_9__.S)(olsApi,entityType,ontologyId,iri,parameter)),{});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment,{children:[isLoadingOntologyId&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.p,{size:"s"}),(props.ontologyId||isSuccessOntologyId)&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.Gv,{direction:"column",style:{maxWidth:600},children:[!props.ontologyId&&!ontologyJSON.is_defining_ontology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_13__.a,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)("i",{children:["Defining ontology not available. Showing occurrence inside ",ontologyJSON.ontology_name," instead."]})})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{grow:!1,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)("span",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_BreadcrumbWidget__WEBPACK_IMPORTED_MODULE_1__.b,{api,iri,entityType,ontologyId:props.ontologyId?props.ontologyId:ontologyJSON.ontology_name,parameter})})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.Gv,{direction:"column",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.Gv,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{grow:!1,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_IriWidget__WEBPACK_IMPORTED_MODULE_2__.w,{iri,parameter})})})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{grow:!1,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_TitleWidget__WEBPACK_IMPORTED_MODULE_3__.R,{iri,api,ontologyId:props.ontologyId?props.ontologyId:ontologyJSON.ontology_name,entityType,parameter})})]})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_DescriptionWidget__WEBPACK_IMPORTED_MODULE_4__.d,{iri,api,ontologyId:props.ontologyId?props.ontologyId:ontologyJSON.ontology_name,entityType,parameter})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_TabWidget__WEBPACK_IMPORTED_MODULE_5__.q0,{iri,ontologyId:props.ontologyId?props.ontologyId:ontologyJSON.ontology_name,api,parameter,entityType})})]})]})}MetadataWidget.__docgenInfo={description:"",methods:[],displayName:"MetadataWidget",props:{iri:{required:!0,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}}},"./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>AlternativeNameTabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/panel/panel.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_group.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_utils_helper__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");function AlternativeNameTabWidget(props){const{iri,api,parameter,entityType,ontologyId}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_3__.m(api),{data:ontologyJSON,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([api,iri,ontologyId,entityType,parameter,"entityInfo"],(()=>(0,_utils_helper__WEBPACK_IMPORTED_MODULE_4__.S)(olsApi,entityType,ontologyId,iri,parameter)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.xe,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.Gv,{style:{padding:10},direction:"column",children:[isSuccess&&function renderAltLabel(){return ontologyJSON.synonyms&&ontologyJSON.synonyms.length>0?ontologyJSON.synonyms.map(((value,index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.J,{children:value},value+index))):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{children:"No alternative names exist."})}(),isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.p,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{children:(0,_utils_helper__WEBPACK_IMPORTED_MODULE_4__.Z)(error,"alternative names")})]})})}AlternativeNameTabWidget.displayName="AlternativeNameTabWidget",AlternativeNameTabWidget.__docgenInfo={description:"",methods:[],displayName:"AlternativeNameTabWidget",props:{iri:{required:!0,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "ontology"\n| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"ontology"'},{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}}},"./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>_AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_0__.a});var _AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx")},"./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>_CrossRefTabWidget__WEBPACK_IMPORTED_MODULE_0__.I});var _CrossRefTabWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabWidget.tsx")},"./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>_HierarchyWidget__WEBPACK_IMPORTED_MODULE_0__.N});var _HierarchyWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/HierarchyWidget.tsx")},"./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q:()=>TabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/tabs/tabbed_content/tabbed_content.js"),_AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/index.ts"),_CrossRefWidget__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/index.ts"),_HierarchyWidget__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts"),react_query__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react-query/es/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/api/OlsApi.ts"),_utils_helper__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");function TabWidget(props){const{iri,api,ontologyId,entityType,parameter,...rest}=props,fixedEntityType="class"==entityType?"term":entityType,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_6__.m(api),{data:ontologyJSON,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)([api,"tab-widget",fixedEntityType,ontologyId,iri,parameter],(()=>(0,_utils_helper__WEBPACK_IMPORTED_MODULE_7__.S)(olsApi,fixedEntityType,ontologyId,iri,parameter)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[isSuccess&&!props.ontologyId&&ontologyJSON&&!ontologyJSON.is_defining_ontology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.a,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("i",{children:["Defining ontology not available. Showing occurrence inside ",ontologyJSON.ontology_name," instead."]})})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("div",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.y,{size:"s",tabs:[{content:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_1__.a,{api,iri,ontologyId:props.ontologyId||(ontologyJSON&&ontologyJSON.ontology_name?ontologyJSON.ontology_name:""),entityType}),id:"tab1",name:"Alternative Names"},{content:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_HierarchyWidget__WEBPACK_IMPORTED_MODULE_3__.N,{api,iri,ontologyId:props.ontologyId||(ontologyJSON&&ontologyJSON.ontology_name?ontologyJSON.ontology_name:"")}),id:"tab2",name:"Hierarchy"},{content:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_CrossRefWidget__WEBPACK_IMPORTED_MODULE_2__.I,{api,iri,ontologyId:props.ontologyId||(ontologyJSON&&ontologyJSON.ontology_name?ontologyJSON.ontology_name:""),entityType}),id:"tab3",name:"Cross references"}]})})})]})}TabWidget.__docgenInfo={description:"",methods:[],displayName:"TabWidget",props:{iri:{required:!0,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "ontology"\n| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"ontology"'},{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}}},"./src/components/widgets/MetadataWidget/TabWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q0:()=>_TabWidget__WEBPACK_IMPORTED_MODULE_3__.q});__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/index.ts"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/index.ts"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts");var _TabWidget__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx")},"./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>TitleWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/api/OlsApi.ts"),_utils_helper__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const NO_TITLE="No title available.";function TitleWidget(props){const{iri,ontologyId,api,titleText,entityType,parameter,default_value}=props,fixedEntityType="class"==entityType?"term":entityType,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_4__.m(api),{data:response,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([api,"getTitle",fixedEntityType,ontologyId,iri,parameter],(()=>async function getTitle(olsApi,entityType,ontologyId,iri,parameter,default_value){if("ontology"===entityType){if(ontologyId){const response=await olsApi.getOntology(void 0,void 0,{ontologyId},parameter);return{title:response?.config.title||default_value||NO_TITLE}}throw Error("ontology id has to be provided")}if("term"===entityType||"property"===entityType||"individual"===entityType){if(iri){const response=await(0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.S)(olsApi,entityType,ontologyId,iri,parameter);return{title:response.label||default_value||NO_TITLE,inDefiningOntology:response.is_defining_ontology,ontology:response.ontology_name}}throw Error("iri has to be provided")}throw Error("Unexpected entity type. Should be one of 'ontology', 'term', 'class', 'individual', 'property'")}(olsApi,fixedEntityType,ontologyId,iri,parameter,default_value)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.p,{size:"s"}),isSuccess&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{children:titleText||response.title})}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{children:(0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Z)(error,"title")})]})}TitleWidget.__docgenInfo={description:"",methods:[],displayName:"TitleWidget",props:{iri:{required:!1,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},titleText:{required:!1,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "ontology"\n| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"ontology"'},{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},default_value:{required:!1,tsType:{name:"string"},description:""}}}},"./src/components/widgets/MetadataWidget/TitleWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>_TitleWidget__WEBPACK_IMPORTED_MODULE_0__.R});var _TitleWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx")}}]);