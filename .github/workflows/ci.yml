name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20.x ]
    outputs:
      srversion: ${{ steps.setoutput.outputs.srversion }}
      srrelease: ${{ steps.setoutput.outputs.srrelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false # Make sure semantic-release uses its own credentials

      - name: Set up Node.js (GitHub registry) # for install and build
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@ts4nfdi'

      - name: Install root dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.KM }} # KM PAT for gh-pages-multi

      - name: Install and build React package
        working-directory: packages/react
        run: |
          npm ci
          npm run build

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org/'
          scope: '@ts4nfdi'

      - name: Run semantic release for React package and capture output
        if: github.ref == 'refs/heads/main'
        id: semantic_release
        continue-on-error: true
        run: |
          output=$(npx semantic-release)
          sanitized_output=$(echo "$output" | tr '\n' ' ')
          echo "release_output=$sanitized_output" >> $GITHUB_OUTPUT
          echo "$output"
        env:
          GITHUB_TOKEN: ${{ secrets.KM }} # for access to the repo
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTO }} # for access to NPM
        working-directory: packages/react

      - name: Parse semantic-release output
        if: github.ref == 'refs/heads/main'
        run: |
          printf "%s\n" "${{ steps.semantic_release.outputs.release_output }}" > release.log
          grep -oP 'Published release \K\d+\.\d+\.\d+' release.log > version.txt
          read SRVERSION < version.txt
          echo "SRVERSION=$SRVERSION" >> $GITHUB_ENV
          if echo "${{ steps.semantic_release.outputs.release_output }}" | grep -q 'Published release'; then
            echo "SRRELEASE=release" >> $GITHUB_ENV
          fi

      - name: Save outputs
        if: github.ref == 'refs/heads/main'
        id: setoutput
        run: |
          echo "srversion=$SRVERSION" >> "$GITHUB_OUTPUT"
          echo "srrelease=$SRRELEASE" >> "$GITHUB_OUTPUT"

      - name: Print version info
        if: github.ref == 'refs/heads/main'
        run: |
          echo "SRVERSION is $SRVERSION"
          echo "SRRELEASE is $SRRELEASE"

      - name: Print conditions
        if: github.ref == 'refs/heads/main'
        run: |
          echo "github.ref = ${{ github.ref }}"
          echo "env.SRRELEASE = ${{ env.SRRELEASE }}"

      - name: Install and build JS package
        if: github.ref == 'refs/heads/main' && env.SRRELEASE == 'release'
        working-directory: packages/js
        run: |
          npm ci
          npm run build
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Change version
        if: github.ref == 'refs/heads/main' && env.SRRELEASE == 'release'
        uses: reedyuk/npm-version@1.1.1
        with:
          version: "$SRVERSION"
          package: packages/js

      - name: Publish JS package
        if: github.ref == 'refs/heads/main' && env.SRRELEASE == 'release'
        run: |
          npm publish
        working-directory: packages/js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTO }}

      - name: Update package.json with new version
        if: github.ref == 'refs/heads/main' && env.SRRELEASE == 'release'
        working-directory: packages/js
        run: |
          echo "$SRVERSION"
          jq --arg version "$SRVERSION" '.version = $version' package.json > tmp.json && mv tmp.json package.json

      - name: Commit and push updated package.json
        if: github.ref == 'refs/heads/main' && env.SRRELEASE == 'release'
        working-directory: packages/js
        env:
          GITHUB_TOKEN: ${{ secrets.KM }}
        run: |
          git config user.name ${{ github.actor }}
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.KM }}@github.com/${{ github.repository }}.git
          git add package.json
          git commit -m 'chore(release): update js package version [skip ci]'
          git push

  documentation-latest:
    if: github.ref == 'refs/heads/main' && needs.build.outputs.srrelease == 'release'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js (GitHub registry)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@ts4nfdi'

      - name: Install root dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.KM }} # KM PAT for esbuild-dynamic-import and gh-pages-multi

      - name: Install and Build React Storybook
        working-directory: packages/react
        run: |
          npm install
          npm run build:storybook -- -o ../../storybook-static/react
        env:
          NODE_AUTH_TOKEN: ${{ secrets.KM }}

      - name: Install and Build JS Storybook
        working-directory: packages/js
        run: |
          npm install
          npm run build:storybook -- -o ../../storybook-static/js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.KM }}

      - name: Install and Build Composed Storybook
        run: |
          npm install
          npm run build:storybook -- -o storybook-static/public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.KM }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-artifacts
          path: |
            storybook-static/react
            storybook-static/js
            storybook-static/public

      - name: Set Git Author Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Configure Git to Use PAT for Authentication
        run: |
          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n '${{ secrets.GH_PAT }}' | base64)"

      - name: Use SRVERSION
        env:
          SRVERSION: ${{ needs.build.outputs.srversion }}
        run: echo "SRVERSION is $SRVERSION"

      - name: Deploy as Latest to GitHub Pages
        if: env.SRVERSION != ''
        env:
          SRVERSION: ${{ needs.build.outputs.srversion }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx gh-pages-multi deploy -s storybook-static/react --no-history -t react/latest
          npx gh-pages-multi deploy -s storybook-static/js --no-history -t html/latest
          npx gh-pages-multi deploy -s storybook-static/public --no-history -t comp/latest

  documentation-versioned:
    if: github.ref == 'refs/heads/main' && needs.build.outputs.srrelease == 'release'
    needs: [ build, documentation-latest ]
    runs-on: ubuntu-latest
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js (GitHub registry)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@ts4nfdi'

      - name: Install root dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.KM }} # KM PAT for esbuild-dynamic-import and gh-pages-multi

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-artifacts
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Set Git Author Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Configure Git to Use PAT for Authentication
        run: |
          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n '${{ secrets.GH_PAT }}' | base64)"

      - name: Use SRVERSION
        env:
          SRVERSION: ${{ needs.build.outputs.srversion }}
        run: echo "SRVERSION is $SRVERSION"

      - name: Deploy Version to GitHub Pages
        if: needs.build.outputs.srversion != ''
        env:
          SRVERSION: ${{ needs.build.outputs.srversion }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx gh-pages-multi deploy -s artifacts/react --no-history -t react/"$SRVERSION"
          npx gh-pages-multi deploy -s artifacts/js --no-history -t html/"$SRVERSION"
          npx gh-pages-multi deploy -s artifacts/public --no-history -t comp/"$SRVERSION"