"use strict";(self.webpackChunk_nfdi4health_semlookp_widgets=self.webpackChunk_nfdi4health_semlookp_widgets||[]).push([[93155],{"./src/components/widgets/EntityRelationsWidget/EntityRelationsWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllValuesFrom:()=>AllValuesFrom,Axioms:()=>Axioms,DifferentFrom:()=>DifferentFrom,EquivalentTo:()=>EquivalentTo,Instances:()=>Instances,InverseOf:()=>InverseOf,PropertyChain:()=>PropertyChain,QualifiedCardinality:()=>QualifiedCardinality,SingleValue:()=>SingleValue,SubEntityOf:()=>SubEntityOf,__namedExportsOrder:()=>__namedExportsOrder,default:()=>EntityRelationsWidget_stories});__webpack_require__("./node_modules/react/index.js");var OlsApi=__webpack_require__("./src/api/OlsApi.ts"),es=__webpack_require__("./node_modules/react-query/es/index.js"),flex_item=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),card=__webpack_require__("./node_modules/@elastic/eui/es/components/card/card.js"),loading_spinner=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),text_text=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),StructureRendering=__webpack_require__("./src/model/StructureRendering.tsx"),ModelTypeCheck=__webpack_require__("./src/model/ModelTypeCheck.ts"),ModelObjectCreator=__webpack_require__("./src/model/ModelObjectCreator.ts"),util=__webpack_require__("./src/app/util.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const DEFAULT_HAS_TITLE=!0;function getIndividualTypesSectionJSX(individual,props){const types=individual.getRdfTypes().filter((elem=>"http://www.w3.org/2002/07/owl#NamedIndividual"!==elem&&!elem.startsWith("http://www.w3.org/2000/01/rdf-schema#")));return individual.getRdfTypes().length>0?(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Type"}),(0,StructureRendering.JV)(individual,individual.getLinkedEntities(),types,props.api,props.showBadges)]}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})}function getIndividualSameAsSectionJSX(individual,props){const sameAs=individual.getSameAs();return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:sameAs.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Same As"}),(0,StructureRendering.JV)(individual,individual.getLinkedEntities(),sameAs,props.api,props.showBadges)]})})}function getIndividualDifferentFromSectionJSX(individual,props){const differentFrom=individual.getDifferentFrom();return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:differentFrom.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Different from"}),(0,StructureRendering.JV)(individual,individual.getLinkedEntities(),differentFrom,props.api,props.showBadges)]})})}function getDisjointWithSectionJSX(entity,props){const disjointWith=entity.getDisjointWith();return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:disjointWith.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Disjoint with"}),(0,StructureRendering.JV)(entity,entity.getLinkedEntities(),disjointWith,props.api,props.showBadges)]})})}function getPropertyInverseOfSectionJSX(property,props){const inverseOfs=property.getInverseOf();return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:inverseOfs.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Inverse of"}),(0,StructureRendering.JV)(property,property.getLinkedEntities(),inverseOfs,props.api,props.showBadges)]})})}function getPropertyChainJSX(propertyChain,property,props){return(0,util._j)(propertyChain).slice().reverse().map(((propertyExpr,i)=>(0,jsx_runtime.jsxs)("span",{children:[(0,StructureRendering._u)(property,property.getLinkedEntities(),propertyExpr,props.api,props.showBadges),(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:i<(0,util._j)(propertyChain).length-1&&(0,jsx_runtime.jsx)("span",{style:{fontSize:"medium",color:"gray"},children:" ◂ "})})]},propertyExpr)))}function getPropertyChainSectionJSX(property,props){const propertyChains=property.getPropertyChains().map((reified=>reified.value)),hasMultipleChains=propertyChains.filter((elem=>Array.isArray(elem))).length>0;return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:propertyChains.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:hasMultipleChains?"Property chains":"Property chain"}),hasMultipleChains?(0,jsx_runtime.jsx)("ul",{children:propertyChains.map((item=>(0,jsx_runtime.jsx)("li",{children:getPropertyChainJSX(item,property,props)},(0,util.DU)())))}):(0,jsx_runtime.jsx)("p",{children:getPropertyChainJSX(propertyChains,property,props)})]})})}function getEntityEquivalentToSectionJSX(entity,props){const equivalents=entity.getEquivalents();return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:equivalents.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Equivalent to"}),1===equivalents.length?(0,jsx_runtime.jsx)("p",{children:(0,StructureRendering.ij)(entity,equivalents[0],props.api,props.showBadges)}):(0,jsx_runtime.jsx)("ul",{children:equivalents.map((item=>(0,jsx_runtime.jsx)("li",{children:(0,StructureRendering.ij)(entity,item,props.api,props.showBadges)},(0,util.DU)())))})]})})}function getSubEntityOfSectionJSX(entity,props){const superEntities=entity.getSuperEntities();return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:superEntities.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsxs)("b",{children:["Sub",entity.getType()," of"]}),1===superEntities.length?(0,jsx_runtime.jsx)("p",{children:(0,StructureRendering.ij)(entity,superEntities[0],props.api,props.showBadges)}):(0,jsx_runtime.jsx)("ul",{children:superEntities.map((item=>(0,jsx_runtime.jsx)("li",{children:(0,StructureRendering.ij)(entity,item,props.api,props.showBadges)},(0,util.DU)())))})]})})}function getEntityRelatedFromSectionJSX(entity,props){const relatedFroms=entity.getRelatedFrom(),predicates=Array.from(new Set(relatedFroms.map((elem=>elem.value.property))));return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:relatedFroms.length>0&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Related from"}),predicates.map((p=>{const label=entity.getLinkedEntities().getLabelForIri(p);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)("a",{style:{color:"black"},href:p,children:(0,jsx_runtime.jsx)("i",{children:label||p})})}),(0,jsx_runtime.jsx)("ul",{style:{marginBottom:0},children:relatedFroms.filter((elem=>elem.value.property===p)).map((elem=>(0,jsx_runtime.jsx)("li",{children:(0,StructureRendering._u)(entity,entity.getLinkedEntities(),elem.value.value,props.api,props.showBadges)},(0,util.DU)())))}),(0,jsx_runtime.jsx)("p",{})," "]},p.toString()+(0,util.DU)())}))]})})}function getClassInstancesSectionJSX(term,instances,props){return instances.length>0?(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Instances"}),(0,jsx_runtime.jsx)("ul",{children:instances.map((instance=>(0,jsx_runtime.jsx)("li",{children:(0,StructureRendering.FK)(term,term.getLinkedEntities(),instance.getIri(),props.api,props.showBadges)},(0,util.DU)())))})]}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})}function EntityRelationsWidget(props){const{api,iri,ontologyId,hasTitle=DEFAULT_HAS_TITLE,showBadges,entityType,parameter,...rest}=props,olsApi=new OlsApi.l(api),{data:entity,isLoading:isLoadingEntityRelation,isSuccess:isSuccessEntityRelation,isError:isErrorEntityRelation}=(0,es.useQuery)(["entityJson",api,iri,ontologyId,entityType,parameter,showBadges],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,!1))),{data:instancesJson,isLoading:isLoadingInstances,isSuccess:isSuccessInstances}=(0,es.useQuery)({queryKey:["instancesJson",entity],queryFn:async()=>entity&&(0,ModelTypeCheck.D4)(entity)&&entity.hasDirectChildren()?async function fetchInstances(term,api,props){const doubleEncodedTermIri=encodeURIComponent(encodeURIComponent(term.getIri())),response=await api.getClassInstances(void 0,void 0,{ontologyId:props.ontologyId||term.getOntologyId(),termIri:doubleEncodedTermIri},props.parameter).catch((error=>console.log(error)));if(void 0!==response.elements)return(0,util._j)(response.elements).map((instance=>(0,ModelObjectCreator.t)({elements:[instance]})));throw Error("Error fetching instances of '"+props.iri+"'")}(entity,olsApi,props):[],enabled:!!entity});return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsxs)(card.Gm,{title:hasTitle?(entityType?(0,util.ZH)((0,util.ng)(entityType)):isSuccessEntityRelation&&entity?(0,util.ZH)(entity.getType()):"")+" Relations":"",layout:"horizontal",children:[(isLoadingEntityRelation||isLoadingInstances)&&(0,jsx_runtime.jsx)(loading_spinner.V,{size:"s"}),isErrorEntityRelation&&(0,jsx_runtime.jsx)(text_text.b,{children:"Requested resource not available"}),isSuccessEntityRelation&&isSuccessInstances&&void 0!==entity&&void 0!==instancesJson&&(0,jsx_runtime.jsxs)(text_text.b,{...rest,children:[(0,ModelTypeCheck.iV)(entity)&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[getIndividualTypesSectionJSX(entity,props),getIndividualSameAsSectionJSX(entity,props),getIndividualDifferentFromSectionJSX(entity,props)]}),((0,ModelTypeCheck.uM)(entity)||(0,ModelTypeCheck.D4)(entity))&&(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:getDisjointWithSectionJSX(entity,props)}),(0,ModelTypeCheck.uM)(entity)&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[getPropertyInverseOfSectionJSX(entity,props),getPropertyChainSectionJSX(entity,props)]}),((0,ModelTypeCheck.uM)(entity)||(0,ModelTypeCheck.D4)(entity))&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[getEntityEquivalentToSectionJSX(entity,props),getSubEntityOfSectionJSX(entity,props),getEntityRelatedFromSectionJSX(entity,props)]}),(0,ModelTypeCheck.D4)(entity)&&(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:getClassInstancesSectionJSX(entity,instancesJson,props)})]})]})})}EntityRelationsWidget.__docgenInfo={description:"",methods:[],displayName:"EntityRelationsWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},hasTitle:{required:!1,tsType:{name:"boolean"},description:"Show title, default is true"},showBadges:{required:!1,tsType:{name:"boolean"},description:"If true (default), entity badges linking to their defining ontologies are shown."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}};const EntityRelationsWidget_stories={title:"EntityRelationsWidget",component:EntityRelationsWidget,parameters:{layout:"centered"},argTypes:{api:{control:{type:"radio"},options:["https://www.ebi.ac.uk/ols4/api/","https://semanticlookup.zbmed.de/ols/api/","https://semanticlookup.zbmed.de/api/","https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/"]},hasTitle:{type:{required:!1}},entityType:{table:{type:{summary:`${ModelTypeCheck.Op.join(" | ")}`}},control:{type:"radio"},options:["ontology","term","class","property","individual",void 0,"INVALID STRING"]},iri:{},parameter:{type:{required:!1}},ontologyId:{type:{required:!1}},showBadges:{}},args:{hasTitle:!0,showBadges:!0}},Template=args=>(0,jsx_runtime.jsx)(EntityRelationsWidget,{...args});Template.displayName="Template";const SubEntityOf=Template.bind({});SubEntityOf.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"term",ontologyId:"agro",iri:"http://purl.obolibrary.org/obo/AGRO_00000002"};const AllValuesFrom=Template.bind({});AllValuesFrom.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"term",ontologyId:"go",iri:"http://purl.obolibrary.org/obo/BFO_0000004"};const DifferentFrom=Template.bind({});DifferentFrom.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"individual",ontologyId:"bco",iri:"http://purl.obolibrary.org/obo/IAO_0000120"};const EquivalentTo=Template.bind({});EquivalentTo.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"term",ontologyId:"go",iri:"http://purl.obolibrary.org/obo/GO_0048021"};const SingleValue=Template.bind({});SingleValue.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"term",ontologyId:"bfo",iri:"http://purl.obolibrary.org/obo/BFO_0000001"};const InverseOf=Template.bind({});InverseOf.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"property",ontologyId:"ro",iri:"http://purl.obolibrary.org/obo/RO_0000057"};const PropertyChain=Template.bind({});PropertyChain.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"property",ontologyId:"ro",iri:"http://purl.obolibrary.org/obo/RO_0002170"};const Instances=Template.bind({});Instances.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"term",ontologyId:"iao",iri:"http://purl.obolibrary.org/obo/IAO_0000078"};const Axioms=Template.bind({});Axioms.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"term",ontologyId:"aism",iri:"http://purl.obolibrary.org/obo/UBERON_0000006"};const QualifiedCardinality=Template.bind({});QualifiedCardinality.args={api:"https://www.ebi.ac.uk/ols4/api/",entityType:"term",ontologyId:"foodon",iri:"http://purl.obolibrary.org/obo/FOODON_00003382"},SubEntityOf.parameters={...SubEntityOf.parameters,docs:{...SubEntityOf.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...SubEntityOf.parameters?.docs?.source}}},AllValuesFrom.parameters={...AllValuesFrom.parameters,docs:{...AllValuesFrom.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...AllValuesFrom.parameters?.docs?.source}}},DifferentFrom.parameters={...DifferentFrom.parameters,docs:{...DifferentFrom.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...DifferentFrom.parameters?.docs?.source}}},EquivalentTo.parameters={...EquivalentTo.parameters,docs:{...EquivalentTo.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...EquivalentTo.parameters?.docs?.source}}},SingleValue.parameters={...SingleValue.parameters,docs:{...SingleValue.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...SingleValue.parameters?.docs?.source}}},InverseOf.parameters={...InverseOf.parameters,docs:{...InverseOf.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...InverseOf.parameters?.docs?.source}}},PropertyChain.parameters={...PropertyChain.parameters,docs:{...PropertyChain.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...PropertyChain.parameters?.docs?.source}}},Instances.parameters={...Instances.parameters,docs:{...Instances.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...Instances.parameters?.docs?.source}}},Axioms.parameters={...Axioms.parameters,docs:{...Axioms.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...Axioms.parameters?.docs?.source}}},QualifiedCardinality.parameters={...QualifiedCardinality.parameters,docs:{...QualifiedCardinality.parameters?.docs,source:{originalSource:"(args: EntityRelationsWidgetProps) => <EntityRelationsWidget {...args} />",...QualifiedCardinality.parameters?.docs?.source}}};const __namedExportsOrder=["SubEntityOf","AllValuesFrom","DifferentFrom","EquivalentTo","SingleValue","InverseOf","PropertyChain","Instances","Axioms","QualifiedCardinality"]}}]);