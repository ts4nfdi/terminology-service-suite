"use strict";(self.webpackChunk_nfdi4health_semlookp_widgets=self.webpackChunk_nfdi4health_semlookp_widgets||[]).push([[80105],{"./src/components/widgets/MetadataWidget/TabWidget/TabWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefiningOntologyUnavailable:()=>DefiningOntologyUnavailable,SelectingDefiningOntology:()=>SelectingDefiningOntology,TabWidget1:()=>TabWidget1,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _TabWidget__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"TabWidget",component:_TabWidget__WEBPACK_IMPORTED_MODULE_1__.q,parameters:{layout:"centered"},argTypes:{api:{description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)",control:{type:"radio"},options:["https://www.ebi.ac.uk/ols4/api/","https://semanticlookup.zbmed.de/ols/api/","https://semanticlookup.zbmed.de/api/"]},ontologyId:{description:"Ontology ID from where the term information should be taken."},iri:{description:"Iri of the term you want to fetch the tab information for."},parameter:{type:{required:!1}},entityType:{description:"Sets the type of the entity whose information you want to fetch. Accepts 'term', 'class', 'property', or 'individual'.",control:{type:"radio"},options:["term","class","property","individual","INVALID STRING"]}},args:{parameter:"collection=nfdi4health"}},Template=args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_TabWidget__WEBPACK_IMPORTED_MODULE_1__.q,{...args});Template.displayName="Template";const TabWidget1=Template.bind({});TabWidget1.args={api:"https://semanticlookup.zbmed.de/api/",ontologyId:"ncit",iri:"http://purl.obolibrary.org/obo/NCIT_C2985",entityType:"term"};const SelectingDefiningOntology=Template.bind({});SelectingDefiningOntology.args={api:"https://www.ebi.ac.uk/ols/api/",iri:"http://purl.obolibrary.org/obo/IAO_0000631",entityType:"term",parameter:""};const DefiningOntologyUnavailable=Template.bind({});DefiningOntologyUnavailable.args={api:"https://www.ebi.ac.uk/ols/api/",iri:"http://identifiers.org/uniprot/Q9VAM9",entityType:"term",parameter:""},TabWidget1.parameters={...TabWidget1.parameters,docs:{...TabWidget1.parameters?.docs,source:{originalSource:"(args: TabWidgetProps) => <TabWidget {...args} />",...TabWidget1.parameters?.docs?.source}}},SelectingDefiningOntology.parameters={...SelectingDefiningOntology.parameters,docs:{...SelectingDefiningOntology.parameters?.docs,source:{originalSource:"(args: TabWidgetProps) => <TabWidget {...args} />",...SelectingDefiningOntology.parameters?.docs?.source}}},DefiningOntologyUnavailable.parameters={...DefiningOntologyUnavailable.parameters,docs:{...DefiningOntologyUnavailable.parameters?.docs,source:{originalSource:"(args: TabWidgetProps) => <TabWidget {...args} />",...DefiningOntologyUnavailable.parameters?.docs?.source}}};const __namedExportsOrder=["TabWidget1","SelectingDefiningOntology","DefiningOntologyUnavailable"]},"./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>AlternativeNameTabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/panel/panel.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_group.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_utils_helper__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");function AlternativeNameTabWidget(props){const{iri,api,parameter,entityType,ontologyId}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_3__.m(api),{data:ontologyJSON,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)([api,iri,ontologyId,entityType,parameter,"entityInfo"],(()=>(0,_utils_helper__WEBPACK_IMPORTED_MODULE_4__.S)(olsApi,entityType,ontologyId,iri,parameter)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.xe,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.Gv,{style:{padding:10},direction:"column",children:[isSuccess&&function renderAltLabel(){return ontologyJSON.synonyms&&ontologyJSON.synonyms.length>0?ontologyJSON.synonyms.map(((value,index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.J,{children:value},value+index))):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{children:"No alternative names exist."})}(),isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.p,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.a,{children:(0,_utils_helper__WEBPACK_IMPORTED_MODULE_4__.Z)(error,"alternative names")})]})})}AlternativeNameTabWidget.displayName="AlternativeNameTabWidget",AlternativeNameTabWidget.__docgenInfo={description:"",methods:[],displayName:"AlternativeNameTabWidget",props:{iri:{required:!0,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "ontology"\n| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"ontology"'},{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}}},"./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>_AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_0__.a});var _AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx")},"./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>_CrossRefTabWidget__WEBPACK_IMPORTED_MODULE_0__.I});var _CrossRefTabWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabWidget.tsx")},"./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>_HierarchyWidget__WEBPACK_IMPORTED_MODULE_0__.N});var _HierarchyWidget__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/HierarchyWidget.tsx")},"./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q:()=>TabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/tabs/tabbed_content/tabbed_content.js"),_AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/index.ts"),_CrossRefWidget__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/index.ts"),_HierarchyWidget__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts"),react_query__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react-query/es/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/api/OlsApi.ts"),_utils_helper__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/utils/helper.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");function TabWidget(props){const{iri,api,ontologyId,entityType,parameter,...rest}=props,fixedEntityType="class"==entityType?"term":entityType,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_6__.m(api),{data:ontologyJSON,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)([api,"tab-widget",fixedEntityType,ontologyId,iri,parameter],(()=>(0,_utils_helper__WEBPACK_IMPORTED_MODULE_7__.S)(olsApi,fixedEntityType,ontologyId,iri,parameter)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[isSuccess&&!props.ontologyId&&ontologyJSON&&!ontologyJSON.is_defining_ontology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.a,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("i",{children:["Defining ontology not available. Showing occurrence inside ",ontologyJSON.ontology_name," instead."]})})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("div",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.J,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.y,{size:"s",tabs:[{content:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_AlternativeNameTabWidget__WEBPACK_IMPORTED_MODULE_1__.a,{api,iri,ontologyId:props.ontologyId||(ontologyJSON&&ontologyJSON.ontology_name?ontologyJSON.ontology_name:""),entityType}),id:"tab1",name:"Alternative Names"},{content:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_HierarchyWidget__WEBPACK_IMPORTED_MODULE_3__.N,{api,iri,ontologyId:props.ontologyId||(ontologyJSON&&ontologyJSON.ontology_name?ontologyJSON.ontology_name:"")}),id:"tab2",name:"Hierarchy"},{content:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_CrossRefWidget__WEBPACK_IMPORTED_MODULE_2__.I,{api,iri,ontologyId:props.ontologyId||(ontologyJSON&&ontologyJSON.ontology_name?ontologyJSON.ontology_name:""),entityType}),id:"tab3",name:"Cross references"}]})})})]})}TabWidget.__docgenInfo={description:"",methods:[],displayName:"TabWidget",props:{iri:{required:!0,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},entityType:{required:!0,tsType:{name:"union",raw:'| "ontology"\n| "term" | "class" //equivalent: API uses \'class\', rest uses \'term\' -> both allowed here\n| "individual"\n| "property"\n| string',elements:[{name:"literal",value:'"ontology"'},{name:"literal",value:'"term"'},{name:"literal",value:'"class"'},{name:"literal",value:'"individual"'},{name:"literal",value:'"property"'},{name:"string"}]},description:""},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"}}}}}]);