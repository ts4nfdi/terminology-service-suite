import{r as y,b as t}from"./iframe-C4bF4efa.js";import{r as i}from"./widgetDescriptions-DRTzUJd7.js";import{E as c}from"./text-DxkUwwjJ.js";const a=5;function m(e){const[s,r]=y.useState(!1),l=e.className||"ts4nfdi-entity-defined-by-style";function o(n){return t.jsx("button",{onClick:()=>{typeof e.onNavigateToOntology=="function"&&e.onNavigateToOntology(n,e.entityType||"",{iri:e.iri,label:e.label})},children:t.jsx("span",{className:"ontology-badge",children:n.toUpperCase()})},i())}function d(){return e.ontolist.length>a&&!s?t.jsxs(t.Fragment,{children:[e.ontolist.slice(0,a).map(n=>t.jsxs("span",{children:[o(n)," "]},i())),t.jsxs("button",{className:"expand-onto-list",onClick:()=>r(!0),children:["+ ",e.ontolist.length-a]})]}):e.ontolist.map(n=>t.jsxs("span",{children:[o(n)," "]},i()))}return t.jsx("div",{className:l,children:e.ontolist&&e.ontolist.length>0&&t.jsxs(c,{style:{fontWeight:"normal"},children:["Defined by ",d()]})})}m.__docgenInfo={description:"",methods:[],displayName:"EntityDefinedByPresentation",props:{entityType:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof entityTypeNames)[number]"},description:"Sets the type of the entity whose information you want to fetch."},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},onNavigateToOntology:{required:!1,tsType:{name:"union",raw:`| ((ontologyId: string, entityType?: string, entity?: EntityData) => void)
| string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time an entity link is clicked
@param ontologyId obtains the ontologyId of the clicked badge
@param entityType obtains the entityType of the clicked badge
@param entity.iri obtains the iri of the clicked badge (can be empty)
@param entity.label obtains the label of the clicked badge
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"},ontolist:{required:!0,tsType:{name:"Array",elements:[{name:"any"}],raw:"any[]"},description:""},label:{required:!0,tsType:{name:"string"},description:""}}};export{m as E};
