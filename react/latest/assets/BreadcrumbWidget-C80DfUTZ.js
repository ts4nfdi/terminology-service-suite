import{b as t}from"./iframe-C4bF4efa.js";import{O as w,aT as S}from"./widgetDescriptions-DRTzUJd7.js";import{u as x}from"./useQuery-CQObhazd.js";import{B as p}from"./BreadcrumbPresentation-CZa2DKCA.js";import{E as h}from"./badge-BHRqYw91.js";import{E as b}from"./loading_spinner-DhxwhVR-.js";import{E}from"./icon-sERmvwjW.js";function O(n){var m;const{api:a,ontologyId:o,iri:s,entityType:c,colorFirst:i,colorSecond:r,parameter:d,useLegacy:l,onNavigateToOntology:y,className:g}=n,f=new w(a),{data:e,isLoading:T,isSuccess:I,isError:k,error:L}=x(["breadcrumb",a,d,c,s,o,l],async()=>await f.getEntityObject(s,c,o,d,l));return t.jsxs("div",{"data-testid":"breadcrumb",children:[T&&t.jsxs("span",{children:[t.jsx("span",{onClick:()=>{typeof n.onNavigateToOntology=="function"&&n.onNavigateToOntology(n.ontologyId||"",void 0,void 0)},role:"button",tabIndex:0,onKeyDown:u=>{u.key==="Enter"&&u.currentTarget.click()},children:t.jsx(h,{className:n.ontologyId?"breadcrumb clickable-breadcrumb":"breadcrumb",color:i||(n.ontologyId?"primary":"warning"),children:((m=n.ontologyId)==null?void 0:m.toUpperCase())||t.jsx(b,{size:"s"})})})," ",t.jsx(E,{type:"arrowRight"})," ",t.jsx(h,{className:"breadcrumb",color:r||"warning",children:t.jsx(b,{size:"s"})})]}),I&&e&&S(e)&&t.jsx(p,{shortForm:e.getShortForm(),ontologyId:o||e.getOntologyId(),colorFirst:i,colorSecond:r,onNavigateToOntology:y,className:g}),k&&t.jsx(p,{shortForm:e&&e.getShortForm()?e.getShortForm().toUpperCase():"",ontologyId:o||(e?e.getOntologyId():""),colorFirst:i||(n.ontologyId||e&&e.getOntologyId()?"primary":"danger"),colorSecond:r||(e&&e.getShortForm()?"success":"danger"),onNavigateToOntology:y,className:g})]})}O.__docgenInfo={description:"",methods:[],displayName:"BreadcrumbWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call."},entityType:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof entityTypeNames)[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:""},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},colorFirst:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the first badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"},colorSecond:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the second badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"},onNavigateToOntology:{required:!1,tsType:{name:"union",raw:`| ((ontologyId: string, entityType?: string, entity?: EntityData) => void)
| string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time an entity link is clicked
@param ontologyId obtains the ontologyId of the clicked badge
@param entityType obtains the entityType of the clicked badge
@param entity.iri obtains the iri of the clicked badge (can be empty)
@param entity.label obtains the label of the clicked badge
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"}}};export{O as B};
