"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[19983],{"./node_modules/@elastic/eui/es/components/spacer/spacer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>EuiSpacer});__webpack_require__("./node_modules/react/index.js");var prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),hooks=__webpack_require__("./node_modules/@elastic/eui/es/services/theme/hooks.js"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),logicals=__webpack_require__("./node_modules/@elastic/eui/es/global_styling/functions/logicals.js");var _ref={name:"191xi1n-euiSpacer",styles:"flex-shrink:0;label:euiSpacer;"},euiSpacerStyles=function euiSpacerStyles(_ref2){var euiTheme=_ref2.euiTheme;return{euiSpacer:_ref,xs:(0,emotion_react_browser_esm.AH)(logicals.BE.height,":",euiTheme.size.xs,";;label:xs;"),s:(0,emotion_react_browser_esm.AH)(logicals.BE.height,":",euiTheme.size.s,";;label:s;"),m:(0,emotion_react_browser_esm.AH)(logicals.BE.height,":",euiTheme.size.base,";;label:m;"),l:(0,emotion_react_browser_esm.AH)(logicals.BE.height,":",euiTheme.size.l,";;label:l;"),xl:(0,emotion_react_browser_esm.AH)(logicals.BE.height,":",euiTheme.size.xl,";;label:xl;"),xxl:(0,emotion_react_browser_esm.AH)(logicals.BE.height,":",euiTheme.size.xxl,";;label:xxl;")}},_excluded=["className","size"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var EuiSpacer=function EuiSpacer(_ref){var className=_ref.className,_ref$size=_ref.size,size=void 0===_ref$size?"l":_ref$size,rest=_objectWithoutProperties(_ref,_excluded),euiTheme=(0,hooks.g)(),styles=euiSpacerStyles(euiTheme),classes=classnames_default()("euiSpacer",function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}({},"euiSpacer--".concat(size),size),className),cssStyles=[styles.euiSpacer,styles[size]];return(0,emotion_react_browser_esm.Y)("div",_extends({className:classes,css:cssStyles},rest))};EuiSpacer.propTypes={className:prop_types_default().string,"aria-label":prop_types_default().string,"data-test-subj":prop_types_default().string,size:prop_types_default().any}},"./src/components/widgets/OntologyInfoWidget/OntologyInfoWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{OntologyInfoWidget1:()=>OntologyInfoWidget1,OntologyInfoWidget2:()=>OntologyInfoWidget2,OntologyInfoWidgetOLS4API:()=>OntologyInfoWidgetOLS4API,__namedExportsOrder:()=>__namedExportsOrder,default:()=>OntologyInfoWidget_stories});__webpack_require__("./node_modules/react/index.js");var flex_item=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),card=(__webpack_require__("./node_modules/@elastic/eui/es/components/spacer/spacer.js"),__webpack_require__("./node_modules/@elastic/eui/es/components/card/card.js")),loading_spinner=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),text_text=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),provider=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),es=__webpack_require__("./node_modules/react-query/es/index.js"),OlsApi=__webpack_require__("./src/api/OlsApi.ts"),util=__webpack_require__("./src/app/util.ts"),StructureRendering=__webpack_require__("./src/model/StructureRendering.tsx"),jsx_runtime=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const DEFAULT_HAS_TITLE=!0;function OntologyInfoWidget(props){const{ontologyId,api,parameter,hasTitle=DEFAULT_HAS_TITLE,useLegacy,showBadges,...rest}=props,olsApi=new OlsApi.l(api),{data:ontology,isLoading:isLoadingOntology,isSuccess:isSuccessOntology,isError:isErrorOntology,error:errorOntology}=(0,es.useQuery)(["ontologyInfo",props],(()=>olsApi.getOntologyObject(ontologyId,parameter,useLegacy)));return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsxs)(card.Gm,{title:hasTitle?"Ontology Information":"",layout:"horizontal",children:[isLoadingOntology&&(0,jsx_runtime.jsx)(loading_spinner.V,{size:"s"}),isSuccessOntology&&void 0!==ontology&&(0,jsx_runtime.jsxs)(text_text.b,{...rest,children:[function getOntologyIriSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(ontology.getIri()||ontology.getOntologyPurl())&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Ontology IRI:"}),(0,jsx_runtime.jsx)("p",{children:(0,jsx_runtime.jsx)("a",{id:"ontologyIri",href:ontology.getIri()||ontology.getOntologyPurl(),children:ontology.getIri()||ontology.getOntologyPurl()})})]})})}(ontology),function getVersionIriSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getVersionIri()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Version IRI:"}),(0,jsx_runtime.jsx)("p",{children:(0,jsx_runtime.jsx)("a",{id:"versionIri",href:ontology.getVersionIri(),children:ontology.getVersionIri()})})]})})}(ontology),function getLastLoadSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getSourceFileTimestamp()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Last loaded:"}),(0,jsx_runtime.jsx)("p",{children:new Date(ontology.getSourceFileTimestamp()).toString()})]})})}(ontology),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[function getOntologyIdSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getOntologyId()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Ontology ID:"}),(0,jsx_runtime.jsx)("p",{children:ontology.getOntologyId()})]})})}(ontology),function getVersionSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getVersion()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Version:"}),(0,jsx_runtime.jsx)("p",{children:ontology.getVersion()})]})})}(ontology),function getNumClassesSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getNumClasses()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Number of classes:"}),(0,jsx_runtime.jsx)("p",{children:ontology.getNumClasses().toLocaleString()})]})})}(ontology)]}),function getAnnotationSection(thing){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:thing.getAnnotationPredicates().map((annoKey=>{const annos=thing.getAnnotationById(annoKey);return 0==annos.length?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{}):(0,jsx_runtime.jsxs)(flex_item.a,{grow:!1,children:[(0,jsx_runtime.jsxs)("b",{children:[(0,util.ZH)((0,util.s0)((0,util.Mv)(thing.getAnnotationTitleById(annoKey)))),":"]}),annos.length>1?(0,jsx_runtime.jsx)("ul",{children:annos.map((annotation=>(0,jsx_runtime.jsx)("li",{id:annotation.value,children:(0,StructureRendering.ij)(thing,annotation,api,showBadges)},(0,util.DU)())))}):(0,jsx_runtime.jsx)("p",{children:(0,StructureRendering.ij)(thing,annos[0],api,showBadges)},(0,util.DU)())]},annoKey)}))})}(ontology)]}),isErrorOntology&&(0,jsx_runtime.jsx)(text_text.b,{children:(0,util.lr)(errorOntology,"information")})]})})}function WrappedOntologyInfoWidget(props){const queryClient=new es.QueryClient;return(0,jsx_runtime.jsx)(provider.l,{colorMode:"light",children:(0,jsx_runtime.jsx)(es.QueryClientProvider,{client:queryClient,children:(0,jsx_runtime.jsx)(OntologyInfoWidget,{ontologyId:props.ontologyId,api:props.api,parameter:props.parameter,useLegacy:props.useLegacy,showBadges:props.showBadges,hasTitle:props.hasTitle})})})}WrappedOntologyInfoWidget.displayName="WrappedOntologyInfoWidget",OntologyInfoWidget.__docgenInfo={description:"",methods:[],displayName:"OntologyInfoWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)\n- **TS4NFDI Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)"},ontologyId:{required:!0,tsType:{name:"string"},description:"Select a specific ontology by id"},hasTitle:{required:!1,tsType:{name:"boolean"},description:"Show title, default is true"},showBadges:{required:!1,tsType:{name:"boolean"},description:"If true (default), entity badges linking to their defining ontologies are shown."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are <b>{iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</b></td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>lang</td><td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b>.</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td></tr>\n <tr><td>database</td><td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."}}};var globals=__webpack_require__("./src/app/globals.ts"),storyArgs=__webpack_require__("./src/stories/storyArgs.ts");const OntologyInfoWidgetStoryArgTypes={...storyArgs.dg,...storyArgs.Xh,...storyArgs.bH,...storyArgs.ch,...storyArgs.Om,...storyArgs.lK},OntologyInfoWidget1={args:{api:globals.gA,ontologyId:"atc"}},OntologyInfoWidget2={args:{api:globals.gA,ontologyId:"ncit"}},OntologyInfoWidgetOLS4API={args:{api:globals.wS,useLegacy:!1,ontologyId:"mp"}},OntologyInfoWidget_stories={title:"OntologyInfoWidget",component:OntologyInfoWidget,parameters:{layout:"centered"},argTypes:OntologyInfoWidgetStoryArgTypes,args:{api:"",useLegacy:!0,ontologyId:"",hasTitle:!0,showBadges:!0,parameter:""}},__namedExportsOrder=["OntologyInfoWidget1","OntologyInfoWidget2","OntologyInfoWidgetOLS4API"]}}]);