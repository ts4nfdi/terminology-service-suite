"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[19319],{"./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabPresentation.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>AlternativeNameTabPresentation});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@elastic/eui/es/components/panel/panel.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_group.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function AlternativeNameTabPresentation(props){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_4__.K6,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.cZ,{style:{padding:10},direction:"column",children:function renderAltLabel(){return props.synonyms&&props.synonyms.length>0?props.synonyms.map(((value,index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_2__.a,{children:value},value+index))):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_3__.b,{children:"No alternative names exist."})}()})})}AlternativeNameTabPresentation.displayName="AlternativeNameTabPresentation",AlternativeNameTabPresentation.__docgenInfo={description:"",methods:[],displayName:"AlternativeNameTabPresentation",props:{synonyms:{required:!0,tsType:{name:"Array",elements:[{name:"any"}],raw:"any[]"},description:""}}}},"./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabPresentation.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>CrossRefTabPresentation});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@elastic/eui/es/components/panel/panel.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_group.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function CrossRefTabPresentation(props){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_4__.K6,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.cZ,{style:{padding:7},direction:"column",children:function renderCrossRefs(crossrefs){return crossrefs&&crossrefs.length>0?crossrefs?.map(((item,index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_2__.a,{children:item},index))):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_3__.b,{children:"No cross references exist."})}(props.crossrefs)})})})}CrossRefTabPresentation.displayName="CrossRefTabPresentation",CrossRefTabPresentation.__docgenInfo={description:"",methods:[],displayName:"CrossRefTabPresentation",props:{crossrefs:{required:!0,tsType:{name:"Array",elements:[{name:"any"}],raw:"any[]"},description:""}}}},"./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>_HierarchyWidgetOLS__WEBPACK_IMPORTED_MODULE_0__.c});var _HierarchyWidgetOLS__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/HierarchyWidgetOLS.tsx")},"./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidgetDeprecated/HierarchyWidgetDeprecated.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n:()=>HierarchyWidgetDeprecated});var panel=__webpack_require__("./node_modules/@elastic/eui/es/components/panel/panel.js"),tree_view=__webpack_require__("./node_modules/@elastic/eui/es/components/tree_view/tree_view.js"),provider=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react=__webpack_require__("./node_modules/react/index.js"),es=__webpack_require__("./node_modules/react-query/es/index.js");const get_url_prefix=url=>void 0===url?"":(url=>"http:"===url.substr(0,5)?url.replace("http","https"):url)(url.substring(0,url.search("/terms")+7));var OlsApi=__webpack_require__("./src/api/OlsApi.ts"),jsx_runtime=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));class HierarchyTree{isExpanded=!0;children=[];icon=(()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:"+"}))();iconWhenExpanded=(()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:"-"}))();constructor(label,id,url,iri){this.label=label,this.id=id,this.iri=iri,this.url=url}setchild(child){this.children.push(child),this.children.length>0&&(this.icon=(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:"+"}))}is_root(){return"#"===this.id}to_string(){return this.label+"[ "+this.children.map((value=>value.to_string()))+" ]"}callback(){if(this.isExpanded)return"";const api_data_onclick=this.url+encodeURIComponent(encodeURIComponent(this.iri))+"/jstree/children/"+this.id;var url;return(url=api_data_onclick,fetch(url,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}).then((res=>res.json())).catch((err=>[]))).then((res=>{this.children=[],create_tree(this,res,this.url)})),""}}const create_tree=(tree,arr,url)=>{arr.filter((value=>value.parent===tree.id)).forEach((value=>{tree.setchild(new HierarchyTree(value.text,value.id,url,value.iri))})),tree.children.map((value=>create_tree(value,arr,url)))};const HierarchyWidgetDeprecated=props=>{const{iri,ontologyId,api}=props,[treeItems,setTreeItems]=(0,react.useState)(),olsApi=new OlsApi.l(api),linkToSelf=api+"ontologies/"+ontologyId+"/terms/";return(0,es.useQuery)([api,"getTermTree",ontologyId,iri],(()=>async function getTree(olsApi,ontologyID,iri){const response=await olsApi.getTermTree({ontologyId:ontologyID,termIri:iri},{viewMode:"All",siblings:!1},void 0,void 0).catch((error=>console.log(error)));return iri?response:response._embedded.terms.map(((x,i)=>({id:(++i).toString(),parent:"#",iri:x.iri,text:x.label,children:x.has_children})))}(olsApi,ontologyId,iri).then((res=>{const root=new HierarchyTree("#","#","","");return res&&create_tree(root,res,get_url_prefix(linkToSelf)),setTreeItems(root.children),res})))),(0,jsx_runtime.jsx)(panel.K6,{children:treeItems&&(0,jsx_runtime.jsx)(tree_view.x,{expandByDefault:!0,"aria-label":"HierarchyTab",items:treeItems})})};function WrappedHierarchyWidgetDeprecated(props){const queryClient=new es.QueryClient;return(0,jsx_runtime.jsx)(provider.l,{colorMode:"light",children:(0,jsx_runtime.jsx)(es.QueryClientProvider,{client:queryClient,children:(0,jsx_runtime.jsx)(HierarchyWidgetDeprecated,{ontologyId:props.ontologyId,api:props.api,iri:props.iri})})})}HierarchyWidgetDeprecated.displayName="HierarchyWidgetDeprecated",WrappedHierarchyWidgetDeprecated.displayName="WrappedHierarchyWidgetDeprecated",HierarchyWidgetDeprecated.__docgenInfo={description:"",methods:[],displayName:"HierarchyWidgetDeprecated",props:{iri:{required:!1,tsType:{name:"string"},description:""},ontologyId:{required:!0,tsType:{name:"string"},description:""},api:{required:!0,tsType:{name:"string"},description:""}}}},"./src/components/widgets/MetadataWidget/TabWidget/TabPresentation.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>TabPresentation});__webpack_require__("./node_modules/react/index.js");var tabbed_content=__webpack_require__("./node_modules/@elastic/eui/es/components/tabs/tabbed_content/tabbed_content.js"),HierarchyWidget=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts"),ModelTypeCheck=__webpack_require__("./src/model/ModelTypeCheck.ts"),AlternativeNameTabPresentation=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabPresentation.tsx"),CrossRefTabPresentation=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabPresentation.tsx"),HierarchyWidgetDeprecated=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidgetDeprecated/HierarchyWidgetDeprecated.tsx"),Reified=__webpack_require__("./src/model/Reified.ts"),OntologyInfoWidget=__webpack_require__("./src/components/widgets/OntologyInfoWidget/OntologyInfoWidget.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function TabPresentation(props){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,ModelTypeCheck.Qg)(props.data)||(0,ModelTypeCheck.uM)(props.data)||(0,ModelTypeCheck.iV)(props.data)?function render(data){const tabs=[];return(void 0===props.altNamesTab||props.altNamesTab)&&tabs.push({content:(0,jsx_runtime.jsx)(AlternativeNameTabPresentation.O,{synonyms:data.getSynonyms().map((synonym=>synonym.value))}),id:"tab1",name:"Alternative Names"}),(void 0===props.hierarchyTab||props.hierarchyTab)&&tabs.push({content:(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)("div",{style:{overflow:"auto"},children:null==props.useLegacy||props.useLegacy?(0,jsx_runtime.jsx)(HierarchyWidgetDeprecated.n,{ontologyId:props.ontologyId||(data&&void 0!==data.getOntologyId()?data.getOntologyId():""),api:props.api,iri:props.iri}):(0,jsx_runtime.jsx)(HierarchyWidget.c,{api:props.api,iri:props.iri,ontologyId:props.ontologyId||(data&&void 0!==data.getOntologyId()?data.getOntologyId():""),entityType:props.entityType})})}),id:"tab2",name:"Hierarchy"}),(void 0===props.crossRefTab||props.crossRefTab)&&tabs.push({content:(0,jsx_runtime.jsx)(CrossRefTabPresentation.t,{crossrefs:Reified.A.fromJson(data.getCrossReferences()).map((value=>value.value))}),id:"tab3",name:"Cross references"}),(void 0===props.terminologyInfoTab||props.terminologyInfoTab)&&tabs.push({content:(0,jsx_runtime.jsx)(OntologyInfoWidget.Q,{ontologyId:props.ontologyId,api:props.api,parameter:"",useLegacy:props.useLegacy,showBadges:!1,hasTitle:!1,width:600}),id:"tab4",name:`About ${props.ontologyId?.toUpperCase()}`}),0===tabs.length?"":(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(tabbed_content.D,{size:"s",tabs})})}(props.data):null})}TabPresentation.__docgenInfo={description:"",methods:[],displayName:"TabPresentation",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)\n- **TS4NFDI Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)"},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},altNamesTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the Alternative Names tab. **True** shows the tab. **False** hides the tab."},hierarchyTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the Hierarchy tab. **True** shows the tab. **False** hides the tab."},crossRefTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the Cross-references tab. **True** shows the tab. **False** hides the tab."},terminologyInfoTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the About Terminology Info tab. **True** shows the tab. **False** hides the tab."},data:{required:!0,tsType:{name:"Thing"},description:""}}}},"./src/components/widgets/OntologyInfoWidget/OntologyInfoWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>OntologyInfoWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=(__webpack_require__("./node_modules/@elastic/eui/es/components/spacer/spacer.js"),__webpack_require__("./node_modules/@elastic/eui/es/components/card/card.js")),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/util.ts"),_model_StructureRendering__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/model/StructureRendering.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const DEFAULT_HAS_TITLE=!0;function OntologyInfoWidget(props){const{ontologyId,api,parameter,hasTitle=DEFAULT_HAS_TITLE,useLegacy,showBadges,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data:ontology,isLoading:isLoadingOntology,isSuccess:isSuccessOntology,isError:isErrorOntology,error:errorOntology}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["ontologyInfo",props],(()=>olsApi.getOntologyObject(ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.Gm,{title:hasTitle?"Ontology Information":"",layout:"horizontal",style:props.width&&{width:props.width},children:[isLoadingOntology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.V,{size:"s"}),isSuccessOntology&&void 0!==ontology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.b,{...rest,children:[function getOntologyIriSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:(ontology.getIri()||ontology.getOntologyPurl())&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Ontology IRI:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("a",{id:"ontologyIri",href:ontology.getIri()||ontology.getOntologyPurl(),children:ontology.getIri()||ontology.getOntologyPurl()})})]})})}(ontology),function getVersionIriSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getVersionIri()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Version IRI:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("a",{id:"versionIri",href:ontology.getVersionIri(),children:ontology.getVersionIri()})})]})})}(ontology),function getLastLoadSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getSourceFileTimestamp()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Last loaded:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:new Date(ontology.getSourceFileTimestamp()).toString()})]})})}(ontology),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[function getOntologyIdSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getOntologyId()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Ontology ID:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:ontology.getOntologyId()})]})})}(ontology),function getVersionSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getVersion()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Version:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:ontology.getVersion()})]})})}(ontology),function getNumClassesSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getNumClasses()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Number of classes:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:ontology.getNumClasses().toLocaleString()})]})})}(ontology)]}),function getAnnotationSection(thing){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:thing.getAnnotationPredicates().map((annoKey=>{const annos=thing.getAnnotationById(annoKey);return 0==annos.length?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{grow:!1,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("b",{children:[(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.ZH)((0,_app_util__WEBPACK_IMPORTED_MODULE_3__.s0)((0,_app_util__WEBPACK_IMPORTED_MODULE_3__.Mv)(thing.getAnnotationTitleById(annoKey)))),":"]}),annos.length>1?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("ul",{children:annos.map((annotation=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("li",{id:annotation.value,children:(0,_model_StructureRendering__WEBPACK_IMPORTED_MODULE_4__.ij)(thing,annotation,api,showBadges)},(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.DU)())))}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:(0,_model_StructureRendering__WEBPACK_IMPORTED_MODULE_4__.ij)(thing,annos[0],api,showBadges)},(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.DU)())]},annoKey)}))})}(ontology)]}),isErrorOntology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.lr)(errorOntology,"information")})]})})}function WrappedOntologyInfoWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(OntologyInfoWidget,{ontologyId:props.ontologyId,api:props.api,parameter:props.parameter,useLegacy:props.useLegacy,showBadges:props.showBadges,hasTitle:props.hasTitle})})})}WrappedOntologyInfoWidget.displayName="WrappedOntologyInfoWidget",OntologyInfoWidget.__docgenInfo={description:"",methods:[],displayName:"OntologyInfoWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)\n- **TS4NFDI Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)"},ontologyId:{required:!0,tsType:{name:"string"},description:"Select a specific ontology by id"},hasTitle:{required:!1,tsType:{name:"boolean"},description:"Show title, default is true"},showBadges:{required:!1,tsType:{name:"boolean"},description:"If true (default), entity badges linking to their defining ontologies are shown."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are <b>{iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</b></td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>lang</td><td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b>.</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td></tr>\n <tr><td>database</td><td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},width:{required:!1,tsType:{name:"number"},description:"The container width for a target widget render function. Example: EuiCard for OntologyInfoWidget"}}}}}]);