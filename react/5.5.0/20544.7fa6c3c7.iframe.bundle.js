"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[20544],{"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./src/style/ts4nfdiStyles/ts4nfdiOntologyInfoStyle.css":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.ts4nfdi-ontologyy-info-style .euiText p {\n  margin: 0;\n  margin-bottom: 10px;\n}\n\n.ts4nfdi-ontologyy-info-style .euiCard {\n  font-family: "Inter", BlinkMacSystemFont, Helvetica, Arial, sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/style/ts4nfdiStyles/ts4nfdiOntologyInfoStyle.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,sEAAsE;AACxE",sourcesContent:['.ts4nfdi-ontologyy-info-style .euiText p {\n  margin: 0;\n  margin-bottom: 10px;\n}\n\n.ts4nfdi-ontologyy-info-style .euiCard {\n  font-family: "Inter", BlinkMacSystemFont, Helvetica, Arial, sans-serif;\n}\n'],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./src/components/widgets/OntologyInfoWidget/OntologyInfoWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>OntologyInfoWidget});__webpack_require__("./node_modules/react/index.js");var flex_item=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),card=(__webpack_require__("./node_modules/@elastic/eui/es/components/spacer/spacer.js"),__webpack_require__("./node_modules/@elastic/eui/es/components/card/card.js")),loading_spinner=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),text_text=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),provider=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),es=__webpack_require__("./node_modules/react-query/es/index.js"),util=__webpack_require__("./src/app/util.ts"),StructureRendering=__webpack_require__("./src/model/StructureRendering.tsx"),injectStylesIntoStyleTag=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),ts4nfdiOntologyInfoStyle=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./src/style/ts4nfdiStyles/ts4nfdiOntologyInfoStyle.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(ts4nfdiOntologyInfoStyle.A,options);ts4nfdiOntologyInfoStyle.A&&ts4nfdiOntologyInfoStyle.A.locals&&ts4nfdiOntologyInfoStyle.A.locals;var OlsOntologyApi=__webpack_require__("./src/api/ols/OlsOntologyApi.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const DEFAULT_HAS_TITLE=!0;function OntologyInfoWidget(props){const{ontologyId,api,parameter,hasTitle=DEFAULT_HAS_TITLE,useLegacy,showBadges,className,...rest}=props,olsApi=new OlsOntologyApi.e(api),onNavigates={onNavigateToEntity:props.onNavigateToEntity,onNavigateToOntology:props.onNavigateToOntology,onNavigateToDisambiguate:props.onNavigateToDisambiguate},finalClassName=className||"ts4nfdi-ontologyy-info-style",{data:ontology,isLoading:isLoadingOntology,isSuccess:isSuccessOntology,isError:isErrorOntology,error:errorOntology}=(0,es.useQuery)(["ontologyInfo",props],()=>olsApi.getOntologyObject(ontologyId,parameter,useLegacy));return(0,jsx_runtime.jsx)("div",{className:finalClassName,children:(0,jsx_runtime.jsxs)(card.G,{title:hasTitle?"Ontology Information":"",layout:"horizontal",style:props.width?{width:props.width}:{},children:[isLoadingOntology&&(0,jsx_runtime.jsx)(loading_spinner.V,{size:"s"}),isSuccessOntology&&void 0!==ontology&&(0,jsx_runtime.jsxs)(text_text.b,{...rest,children:[function getOntologyIriSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(ontology.getIri()||ontology.getOntologyPurl())&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Ontology IRI:"}),(0,jsx_runtime.jsx)("p",{children:(0,jsx_runtime.jsx)("a",{id:"ontologyIri",href:ontology.getIri()||ontology.getOntologyPurl(),children:ontology.getIri()||ontology.getOntologyPurl()})})]})})}(ontology),function getVersionIriSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getVersionIri()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Version IRI:"}),(0,jsx_runtime.jsx)("p",{children:(0,jsx_runtime.jsx)("a",{id:"versionIri",href:ontology.getVersionIri(),children:ontology.getVersionIri()})})]})})}(ontology),function getLastLoadSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getSourceFileTimestamp()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Last loaded:"}),(0,jsx_runtime.jsx)("p",{children:new Date(ontology.getSourceFileTimestamp()).toString()})]})})}(ontology),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[function getOntologyIdSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getOntologyId()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Ontology ID:"}),(0,jsx_runtime.jsx)("p",{children:ontology.getOntologyId()})]})})}(ontology),function getVersionSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getVersion()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Version:"}),(0,jsx_runtime.jsx)("p",{children:ontology.getVersion()})]})})}(ontology),function getNumClassesSection(ontology){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:ontology.getNumClasses()&&(0,jsx_runtime.jsxs)(flex_item.a,{children:[(0,jsx_runtime.jsx)("b",{children:"Number of classes:"}),(0,jsx_runtime.jsx)("p",{children:ontology.getNumClasses().toLocaleString()})]})})}(ontology)]}),function getAnnotationSection(thing){return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:thing.getAnnotationPredicates().map(annoKey=>{const annos=thing.getAnnotationById(annoKey);return 0==annos.length?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{}):(0,jsx_runtime.jsxs)(flex_item.a,{grow:!1,children:[(0,jsx_runtime.jsxs)("b",{children:[(0,util.ZH)((0,util.s0)((0,util.Mv)(thing.getAnnotationTitleById(annoKey)))),":"]}),annos.length>1?(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("ul",{children:annos.map(annotation=>(0,jsx_runtime.jsx)("li",{id:annotation.value,children:(0,StructureRendering.ij)(thing,annotation,showBadges,onNavigates)},(0,util.DU)()))}),(0,jsx_runtime.jsx)("p",{})]}):(0,jsx_runtime.jsx)("p",{children:(0,StructureRendering.ij)(thing,annos[0],showBadges,onNavigates)},(0,util.DU)())]},annoKey)})})}(ontology)]}),isErrorOntology&&(0,jsx_runtime.jsx)(text_text.b,{children:(0,util.lr)(errorOntology,"information")})]})})}function WrappedOntologyInfoWidget(props){const queryClient=new es.QueryClient;return(0,jsx_runtime.jsx)(provider.l,{colorMode:"light",children:(0,jsx_runtime.jsx)(es.QueryClientProvider,{client:queryClient,children:(0,jsx_runtime.jsx)(OntologyInfoWidget,{ontologyId:props.ontologyId,api:props.api,parameter:props.parameter,useLegacy:props.useLegacy,showBadges:props.showBadges,hasTitle:props.hasTitle,onNavigateToEntity:props.onNavigateToEntity,onNavigateToOntology:props.onNavigateToOntology,onNavigateToDisambiguate:props.onNavigateToDisambiguate})})})}OntologyInfoWidget.displayName="OntologyInfoWidget",WrappedOntologyInfoWidget.displayName="WrappedOntologyInfoWidget",OntologyInfoWidget.__docgenInfo={description:"",methods:[],displayName:"OntologyInfoWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call."},ontologyId:{required:!0,tsType:{name:"string"},description:"Select a specific ontology by id"},hasTitle:{required:!1,tsType:{name:"boolean"},description:"Show title, default is true"},showBadges:{required:!1,tsType:{name:"boolean"},description:"If true (default), entity badges linking to their defining ontologies are shown."},parameter:{required:!1,tsType:{name:"string"},description:""},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},width:{required:!1,tsType:{name:"number"},description:"The container width for a target widget render function. Example: EuiCard for OntologyInfoWidget"},onNavigateToEntity:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n  ontologyId: string,\n  entityType?: string,\n  entity?: EntityData,\n) => void",signature:{arguments:[{type:{name:"string"},name:"ontologyId"},{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time an entity link is clicked\n@param ontologyId obtains the ontologyId of the current ontology\n@param entityType obtains the entityType of the clicked entity\n@param entity.iri obtains the iri of the clicked entity\n@param entity.label obtains the label of the clicked entity\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"},onNavigateToOntology:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n  ontologyId: string,\n  entityType?: string,\n  entity?: EntityData,\n) => void",signature:{arguments:[{type:{name:"string"},name:"ontologyId"},{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time an entity link is clicked\n@param ontologyId obtains the ontologyId of the clicked badge\n@param entityType obtains the entityType of the clicked badge\n@param entity.iri obtains the iri of the clicked badge (can be empty)\n@param entity.label obtains the label of the clicked badge\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"},onNavigateToDisambiguate:{required:!1,tsType:{name:"signature",type:"function",raw:"(entityType: string, entity?: EntityData) => void",signature:{arguments:[{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time a disambiguation badge is clicked\n@param entityType obtains the entityType of the clicked badge\n@param entity.iri obtains the iri of the clicked badge (can be empty)\n@param entity.label obtains the label of the clicked badge\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"}}}}}]);