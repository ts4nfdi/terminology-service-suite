"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[96250],{"./src/api/ols/OlsBaseApi.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{s:()=>OlsBaseApi});var axios__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/axios/lib/axios.js"),_app_util__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/util.ts"),_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/utils/olsApiUtils.ts");class OlsBaseApi{constructor(api){this.axiosInstance="string"==typeof api?axios__WEBPACK_IMPORTED_MODULE_1__.A.create({baseURL:api,headers:{Accept:"application/json"}}):api}async makeCall(url,config,useLegacy){const apiVersionPrefix=(0,_app_util__WEBPACK_IMPORTED_MODULE_0__.LB)(useLegacy)?"":"v2/",response=(await this.axiosInstance.get(apiVersionPrefix+url,config)).data;return(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_2__.pX)(response)}}},"./src/api/ols/OlsEntityApi.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{U:()=>OlsEntityApi});var _OlsBaseApi__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/api/ols/OlsBaseApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/util.ts"),_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/utils/olsApiUtils.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ModelObjectCreator.ts");class OlsEntityApi extends _OlsBaseApi__WEBPACK_IMPORTED_MODULE_0__.s{getTerms=async(paginationParams,sortingParams,contentParams,parameter,useLegacy)=>{const typePrefix=(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy)?"terms":"classes";return this.makeCall(typePrefix,{params:(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__.cH)(paginationParams,sortingParams,contentParams)},(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy))};getProperties=async(paginationParams,sortingParams,contentParams,parameter,useLegacy)=>this.makeCall("properties",{params:(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__.cH)(paginationParams,sortingParams,contentParams)},(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy));getIndividuals=async(paginationParams,sortingParams,contentParams,parameter,useLegacy)=>this.makeCall("individuals",{params:(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__.cH)(paginationParams,sortingParams,contentParams)},(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy));getTerm=async(paginationParams,sortingParams,contentParams,parameter,useLegacy,abortSignal)=>{const ontologyPrefix=contentParams?.ontologyId?"ontologies/"+contentParams?.ontologyId+"/":"",typePrefix=(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy)?"terms":"classes",params={iri:contentParams?.termIri,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__.DF)(parameter)};return this.makeCall(ontologyPrefix+typePrefix,{params,signal:abortSignal},(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy))};getProperty=async(paginationParams,sortingParams,contentParams,parameter,useLegacy,abortSignal)=>{const queryPrefix=contentParams?.ontologyId?"ontologies/"+contentParams?.ontologyId+"/":"",params={iri:contentParams?.propertyIri,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__.DF)(parameter)};return this.makeCall(queryPrefix+"properties",{params,signal:abortSignal},(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy))};getIndividual=async(paginationParams,sortingParams,contentParams,parameter,useLegacy,abortSignal)=>{const queryPrefix=contentParams?.ontologyId?"ontologies/"+contentParams?.ontologyId+"/":"",params={iri:contentParams?.individualIri,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__.DF)(parameter)};return this.makeCall(queryPrefix+"individuals",{params,signal:abortSignal},(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy))};getEntity=async(paginationParams,sortingParams,contentParams,parameter,useLegacy)=>{const queryPrefix=contentParams?.ontologyId?"ontologies/"+contentParams?.ontologyId+"/":"",params={iri:contentParams?.termIri,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_4__.fS)(parameter)};return this.makeCall(queryPrefix+"entities",{params},(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy))};async getEntityResponse(iri,entityType,ontologyId,parameter,useLegacy){let response;if(!iri)throw Error("No IRI provided");return response=entityType?await this.getEntityWithEntityTypeProvided(iri,entityType,ontologyId,parameter,useLegacy):(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy)?await this.getEntityWithInferredEntityType(iri,ontologyId,parameter):await this.getEntity(void 0,void 0,{ontologyId,termIri:iri},parameter,useLegacy),response}async getEntityWithEntityTypeProvided(iri,entityType,ontologyId,parameter,useLegacy){switch(entityType){case"term":case"class":return await this.getTerm(void 0,void 0,{ontologyId,termIri:iri},parameter,useLegacy);case"property":case"annotationProperty":case"dataProperty":case"objectProperty":return await this.getProperty(void 0,void 0,{ontologyId,propertyIri:iri},parameter,useLegacy);case"individual":return await this.getIndividual(void 0,void 0,{ontologyId,individualIri:iri},parameter,useLegacy);default:throw Error('Invalid entity type "'+entityType+`". Must be one of {${_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_2__.Op.map(elem=>`"${elem}"`).join(", ")}}.`)}}async getEntityWithInferredEntityType(iri,ontologyId,parameter){const controller=new AbortController,signal=controller.signal;let response;function setAndStop(res){void 0!==res._embedded&&(response=res,controller.abort())}if(await Promise.allSettled([this.getTerm(void 0,void 0,{ontologyId,termIri:iri},parameter,!0,signal).then(res=>{setAndStop(res)}),this.getProperty(void 0,void 0,{ontologyId,propertyIri:iri},parameter,!0,signal).then(res=>{setAndStop(res)}),this.getIndividual(void 0,void 0,{ontologyId,individualIri:iri},parameter,!0,signal).then(res=>{setAndStop(res)})]),void 0!==response)return response;throw Error("Iri "+iri+" could not be resolved.")}async getEntityObject(iri,entityType,ontologyId,parameter,useLegacy){return(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_3__.t)(await this.getEntityResponse(iri,entityType,ontologyId,parameter,useLegacy))}async getClassInstances(iri,ontologyId){return(await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_2__.h0[0],iri,!1)}/individuals`,{params:{size:"1000"}},!1)).elements.map(obj=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_3__.t)({elements:[obj]}))}getTermRelations=async contentParams=>{let baseRequest="ontologies/"+contentParams?.ontologyId+"/terms";return contentParams.termIri?(baseRequest=baseRequest+"/"+encodeURIComponent(encodeURIComponent(contentParams?.termIri))+"/graph",(await this.axiosInstance.get(baseRequest)).data):(await this.axiosInstance.get(baseRequest+"/roots")).data};getTermTree=async(contentParams,treeParams)=>{let baseRequest="ontologies/"+contentParams?.ontologyId+"/terms";return contentParams.termIri?(baseRequest=baseRequest+"/"+encodeURIComponent(encodeURIComponent(contentParams?.termIri))+"/jstree",treeParams.child?(await this.axiosInstance.get(baseRequest+"/children/"+treeParams.child)).data:(await this.axiosInstance.get(baseRequest,{params:treeParams})).data):(await this.axiosInstance.get(baseRequest+"/roots")).data}}},"./src/api/ols/OlsHierarchyApi.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>HIERARCHY_WIDGET_DEFAULT_VALUES,i:()=>OlsHierarchyApi});var _model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_app_util__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/util.ts"),_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/utils/olsApiUtils.ts"),_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/model/ModelObjectCreator.ts"),_model_interfaces_Hierarchy__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/model/interfaces/Hierarchy.ts"),_model_Reified__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/model/Reified.ts"),axios__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/axios/lib/axios.js"),_OlsEntityApi__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/api/ols/OlsEntityApi.ts"),_OlsOntologyApi__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/api/ols/OlsOntologyApi.ts");const HIERARCHY_WIDGET_DEFAULT_VALUES={INCLUDE_OBSOLETE_ENTITIES:!1,PREFERRED_ROOTS:!1,KEEP_EXPANSION_STATES:!1,SHOW_SIBLINGS_ON_INIT:!1,USE_LEGACY:!1};class OlsHierarchyApi{constructor(api){this.axiosInstance="string"==typeof api?axios__WEBPACK_IMPORTED_MODULE_5__.A.create({baseURL:api,headers:{Accept:"application/json"}}):api,this.entityService=new _OlsEntityApi__WEBPACK_IMPORTED_MODULE_3__.U(this.axiosInstance),this.ontologyService=new _OlsOntologyApi__WEBPACK_IMPORTED_MODULE_4__.e(this.axiosInstance)}async makeCall(url,config,useLegacy){const apiVersionPrefix=(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.LB)(useLegacy)?"":"v2/",response=(await this.axiosInstance.get(apiVersionPrefix+url,config)).data;return(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.pX)(response)}async getAncestors(iri,entityType,ontologyId){let ancestors,useLegacy=arguments.length>3&&void 0!==arguments[3]&&arguments[3],includeObsoleteEntities=arguments.length>4&&void 0!==arguments[4]&&arguments[4],parameter=arguments.length>5?arguments[5]:void 0;if(ancestors=(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.yU)(entityType)?await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,entityType,iri,useLegacy)}/hierarchicalAncestors`,{params:{size:"1000",includeObsoleteEntities,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy):await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,entityType,iri,useLegacy)}/ancestors`,{params:{size:"1000",includeObsoleteEntities,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy),useLegacy){const listOfAncestorObj=[];let extractKey="";switch(entityType){case"class":case"term":extractKey="terms";break;case"property":extractKey="properties";break;case"individual":extractKey="individuals";break;default:throw Error("Entity type could not be correctly inferred.")}return ancestors._embedded[extractKey].map(obj=>{listOfAncestorObj.push((0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_2__.t)({_embedded:{[extractKey]:[obj]}}))}),listOfAncestorObj}return ancestors.elements.map(obj=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_2__.t)({elements:[obj]}))}async getJSTree(iri,entityType,ontologyId,parameter){return await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,entityType,iri,!0)}/jstree`,{params:{size:"1000",viewMode:"All",...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},!0)}async getChildren(iri,entityType,ontologyId){let children,includeObsoleteEntities=arguments.length>3&&void 0!==arguments[3]&&arguments[3],useLegacy=arguments.length>4&&void 0!==arguments[4]&&arguments[4],parameter=arguments.length>5?arguments[5]:void 0;return children=(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.yU)(entityType)?await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.h0[0],iri,useLegacy)}/hierarchicalChildren`,{params:{size:"1000",includeObsoleteEntities,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy):(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(entityType)?useLegacy?await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.h0[0],iri,useLegacy)}/descendants`,{params:{size:"1000",...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy):await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.h0[0],iri,useLegacy)}/instances`,{params:{size:"1000",includeObsoleteEntities,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy):await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,entityType,iri,useLegacy)}/children`,{params:{size:"1000",includeObsoleteEntities,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy),useLegacy?children._embedded[(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(entityType)?(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.DW)(_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.h0[0],useLegacy):(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.DW)(entityType,useLegacy)].map(obj=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_2__.t)({_embedded:{[(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(entityType)?(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.DW)(_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.h0[0],useLegacy):(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.DW)(entityType)]:[obj]}})):children.elements.map(obj=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_2__.t)({elements:[obj]}))}async getRootEntities(entityType,ontologyId){let preferredRoots=arguments.length>2&&void 0!==arguments[2]&&arguments[2],includeObsoleteEntities=arguments.length>3&&void 0!==arguments[3]&&arguments[3],useLegacy=arguments.length>4&&void 0!==arguments[4]&&arguments[4],parameter=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"";if(useLegacy){if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(entityType))return[];return(await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,entityType,void 0,useLegacy)}/roots`,{params:{size:"1000",includeObsoleteEntities,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy))._embedded[(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.DW)(entityType,useLegacy)].map(obj=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_2__.t)({_embedded:{[(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.DW)(entityType,useLegacy)]:[obj]}}))}if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(entityType))return[];return(await this.makeCall(`${(0,_app_util__WEBPACK_IMPORTED_MODULE_1__.vq)(ontologyId,entityType,void 0,useLegacy)}`,{params:{size:"1000",includeObsoleteEntities,hasDirectParents:preferredRoots?void 0:"false",isPreferredRoot:preferredRoots?"true":void 0,...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.DF)(parameter)}},useLegacy)).elements.map(obj=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_2__.t)({elements:[obj]}))}async buildHierarchyWithIri(props){const{iri,ontologyId,entityType,preferredRoots=!1,includeObsoleteEntities=!1,keepExpansionStates=!0,showSiblingsOnInit=!1,useLegacy=!1,parameter}=props;if(iri)return await this.entityService.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy).then(entity=>this.buildHierarchyWithEntity({entityType:entityType||entity.getType(),ontologyId:ontologyId||entity.getOntologyId(),includeObsoleteEntities,preferredRoots,mainEntity:entity,keepExpansionStates,showSiblingsOnInit,useLegacy,parameter}));if(null==entityType||null==ontologyId)throw Error("Either iri or ontologyId and entityType have to be provided.");return await this.buildRootHierarchy({entityType,ontologyId,includeObsoleteEntities,preferredRoots,keepExpansionStates,showSiblingsOnInit,useLegacy,parameter})}jsTreeNodeToEntityData(jsTreeNode){return{iri:jsTreeNode.iri,label:jsTreeNode.text,hasChildren:jsTreeNode.children||jsTreeNode.state.opened,parents:[]}}entityToEntityData(entity){return{iri:entity.getIri(),label:(0,_app_util__WEBPACK_IMPORTED_MODULE_1__._j)(entity.getLabel())[0],definedBy:entity.getDefinedBy(),hasChildren:entity.hasChildren(),numDescendants:entity.getNumHierarchicalDescendants()||entity.getNumDescendants(),parents:entity.getParents()}}async buildRootHierarchy(props){const{ontologyId,entityType,preferredRoots,includeObsoleteEntities,useLegacy=HIERARCHY_WIDGET_DEFAULT_VALUES.USE_LEGACY,parameter}=props,rootEntitiesData=(await this.getRootEntities(entityType,ontologyId,preferredRoots,includeObsoleteEntities,useLegacy,parameter)).map(entity=>this.entityToEntityData(entity)).filter(root=>!(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.Yt)(root.iri)),parentChildRelations=new Map,entitiesData=new Map;for(const entityData of rootEntitiesData)parentChildRelations.set(entityData.iri,[]),entitiesData.set(entityData.iri,entityData);return new _model_interfaces_Hierarchy__WEBPACK_IMPORTED_MODULE_7__.O({parentChildRelations,entitiesData,allChildrenPresent:new Set,roots:rootEntitiesData.map(root=>new _model_interfaces_Hierarchy__WEBPACK_IMPORTED_MODULE_7__.n(root)).sort((a,b)=>(a.entityData.label||a.entityData.iri).localeCompare(b.entityData.label||b.entityData.iri)),api:new OlsHierarchyApi(this.axiosInstance.getUri()),ontologyId,includeObsoleteEntities,entityType,keepExpansionStates:props.keepExpansionStates,useLegacy,parameter})}async buildHierarchyWithEntity(props){const{mainEntity,ontologyId,entityType,preferredRoots,includeObsoleteEntities=HIERARCHY_WIDGET_DEFAULT_VALUES.INCLUDE_OBSOLETE_ENTITIES,showSiblingsOnInit,useLegacy=HIERARCHY_WIDGET_DEFAULT_VALUES.USE_LEGACY,parameter}=props;let entities=[];if(useLegacy){const jsTree=await this.getJSTree(mainEntity.getIri(),entityType,ontologyId,parameter),idToIri=new Map,parents=new Map;for(const jsTreeNode of jsTree)idToIri.set(jsTreeNode.id,jsTreeNode.iri),parents.set(jsTreeNode.iri,new Set);for(const jsTreeNode of jsTree){const parArr=parents.get(jsTreeNode.iri),parIri=idToIri.get(jsTreeNode.parent);null!=parArr&&null!=parIri&&parArr.add(parIri)}entities=[];const inArr=new Set;for(const jsTreeNode of jsTree)if(!inArr.has(jsTreeNode.iri)){inArr.add(jsTreeNode.iri),entities.push(this.jsTreeNodeToEntityData(jsTreeNode));const par=parents.get(jsTreeNode.iri);null!=par&&(entities[entities.length-1].parents=_model_Reified__WEBPACK_IMPORTED_MODULE_8__.A.fromJson(Array.from(par.values()))||[])}}else{const ancestors=await this.getAncestors(mainEntity.getIri(),entityType,ontologyId||mainEntity.getOntologyId(),useLegacy,includeObsoleteEntities,parameter);entities=[this.entityToEntityData(mainEntity),...ancestors.map(entity=>this.entityToEntityData(entity))]}entities=entities.filter(e=>!(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.Yt)(e.iri));const parentChildRelations=new Map,allChildrenPresent=new Set,entitiesData=new Map;for(const entityData of entities)parentChildRelations.set(entityData.iri,[]),entitiesData.set(entityData.iri,entityData);if(showSiblingsOnInit){const realEntityType=entityType||mainEntity.getType(),entityTypeForQuery="individual"==realEntityType?"class":realEntityType,promises=[];for(const entityData of entities)entityData.iri!=mainEntity.getIri()&&promises.push(new Promise(resolve=>this.getChildren(entityData.iri,entityTypeForQuery,ontologyId,includeObsoleteEntities,useLegacy,parameter||"").then(children=>children.map(child=>this.entityToEntityData(child))).then(children=>{const parChildRel=[];for(const child of children)if(entitiesData.set(child.iri,child),child.parents){const parRelation=child.parents.filter(par=>par.value==entityData.iri);parChildRel.push({childIri:child.iri,childRelationToParent:parRelation.length>0&&parRelation[0].getMetadata()?parRelation[0].getMetadata().childRelationToParent:void 0})}parentChildRelations.set(entityData.iri,parChildRel),allChildrenPresent.add(entityData.iri)}).then(resolve)));if(await Promise.allSettled(promises),"individual"==realEntityType)for(const parentReified of mainEntity.getParents()){const children=(await this.getChildren(parentReified.value,realEntityType,ontologyId,includeObsoleteEntities,useLegacy,parameter||"")).map(child=>this.entityToEntityData(child)),parChildRel=[];for(const child of children)parChildRel.push({childIri:child.iri,childRelationToParent:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"});parentChildRelations.set(parentReified.value,parChildRel)}}else for(const entityData of entities)if(entityData.parents){const parents=entityData.parents.filter(parentReified=>!(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.Yt)(parentReified.value));if(entityData.iri==mainEntity?.getIri()&&(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(entityType||mainEntity.getType()))for(const parentReified of parents)parentChildRelations.has(parentReified.value)&&parentChildRelations.get(parentReified.value)?.push({childIri:entityData.iri,childRelationToParent:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"});else for(const parentReified of parents)parentChildRelations.has(parentReified.value)&&parentChildRelations.get(parentReified.value)?.push({childIri:entityData.iri,childRelationToParent:parentReified.getMetadata()?parentReified.getMetadata().childRelationToParent:void 0})}for(const rel of parentChildRelations.values())rel.sort((a,b)=>(entitiesData.get(a.childIri)?.label||a.childIri).localeCompare(entitiesData.get(b.childIri)?.label||b.childIri));const rootEntities=[];if(preferredRoots){const preferredRootEntities=(await this.ontologyService.getOntologyObject(ontologyId,void 0,useLegacy)).getPreferredRoots();for(const e of preferredRootEntities)entitiesData.has(e)&&rootEntities.push(e)}else for(const entityData of entities)if(entityData.parents){0==entityData.parents.filter(parentReified=>!(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_6__.Yt)(parentReified.value)).length&&rootEntities.push(entityData.iri)}function createTreeNode(entityData,cycleCheck,childRelationToParent){cycleCheck.add(entityData.iri);const node=new _model_interfaces_Hierarchy__WEBPACK_IMPORTED_MODULE_7__.n(entityData);node.childRelationToParent=childRelationToParent;const children=parentChildRelations.get(entityData.iri)||[];for(const child of children){if(cycleCheck.has(child.childIri)){console.error(`Cyclic tree at entity "${child.childIri}".`);continue}const childData=entitiesData.get(child.childIri);null!=childData&&node.addChild(createTreeNode(childData,cycleCheck,child.childRelationToParent))}return node.loadedChildren.length>0&&(node.expanded=!0),cycleCheck.delete(entityData.iri),node}const cycleCheck=new Set;return new _model_interfaces_Hierarchy__WEBPACK_IMPORTED_MODULE_7__.O({parentChildRelations,entitiesData,allChildrenPresent,roots:rootEntities.map(rootEntity=>createTreeNode(entitiesData.get(rootEntity),cycleCheck)).sort((a,b)=>(a.entityData.label||a.entityData.iri).localeCompare(b.entityData.label||b.entityData.iri)),api:new OlsHierarchyApi(this.axiosInstance.getUri()),ontologyId,includeObsoleteEntities,entityType,mainEntityIri:mainEntity?.getIri(),keepExpansionStates:props.keepExpansionStates,useLegacy,parameter})}async loadHierarchyChildren(props){if(null==props.entityType)throw Error("EntityType has to be provided to load children in OLS.");return(await this.getChildren(props.nodeToExpand.entityData.iri,props.entityType,props.ontologyId,props.includeObsoleteEntities,props.useLegacy,props.parameter||"")).map(entity=>this.entityToEntityData(entity))}}},"./src/api/ols/OlsOntologyApi.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e:()=>OlsOntologyApi});var _OlsBaseApi__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/api/ols/OlsBaseApi.ts"),_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/utils/olsApiUtils.ts"),_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/model/ModelObjectCreator.ts"),_model_ols3_model__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/model/ols3-model/index.ts"),_model_ols4_model__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ols4-model/index.ts"),_app_util__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/app/util.ts");class OlsOntologyApi extends _OlsBaseApi__WEBPACK_IMPORTED_MODULE_0__.s{getOntologies=(()=>{var _this=this;return async function(paginationParams,sortingParams,contentParams,parameter){let useLegacy=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];return _this.makeCall("ontologies",{params:(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_5__.cH)(paginationParams,sortingParams,contentParams,parameter)},useLegacy)}})();async getOntologiesData(parameter){let response,useLegacy=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],ontologiesData=[],pageNum=0;if(useLegacy){do{if(response=await this.getOntologies({size:500..toString(),page:pageNum.toString()},void 0,void 0,parameter,useLegacy),!(response&&response._embedded&&response._embedded.ontologies))throw new Error("Ontologies data not found");ontologiesData=ontologiesData.concat(response._embedded.ontologies.map(ontologyData=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_1__.t)(ontologyData))),pageNum+=1}while(pageNum<response.page.totalPages);return new _model_ols3_model__WEBPACK_IMPORTED_MODULE_2__.z7(ontologiesData)}do{if(response=await this.getOntologies({size:500..toString(),page:pageNum.toString()},void 0,void 0,parameter,useLegacy),!response||!response.elements)throw new Error("Ontologies data not found");ontologiesData=ontologiesData.concat(response.elements.map(ontologyData=>(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_1__.t)(ontologyData))),pageNum+=1}while(pageNum<response.totalPages);return new _model_ols4_model__WEBPACK_IMPORTED_MODULE_3__.Y7(ontologiesData)}getOntology=async(paginationParams,sortingParams,contentParams,parameter,useLegacy)=>{const params={...(0,_utils_olsApiUtils__WEBPACK_IMPORTED_MODULE_5__.DF)(parameter)};return this.makeCall("ontologies/"+contentParams?.ontologyId,params,(0,_app_util__WEBPACK_IMPORTED_MODULE_4__.LB)(useLegacy))};async getOntologyObject(ontologyId,parameter,useLegacy){const response=await this.getOntology(void 0,void 0,{ontologyId},parameter,useLegacy);return(0,_model_ModelObjectCreator__WEBPACK_IMPORTED_MODULE_1__.t)(response)}}},"./src/app/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{DU:()=>randomString,DW:()=>pluralizeType,LB:()=>getUseLegacy,Mv:()=>deCamelCase,Pg:()=>OBO_FOUNDRY_REPO_URL_RAW,Yz:()=>inferTypeFromTypeArray,ZH:()=>capitalize,_j:()=>asArray,fd:()=>isHexColor,lr:()=>getErrorMessageToDisplay,nY:()=>isRgbColor,ng:()=>getEntityTypeName,ny:()=>dictFromParamString,o8:()=>singularizeType,s0:()=>deUnderscore,vG:()=>manuallyEmbedOnNavigate,vq:()=>getEntityInOntologySuffix});var _model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/ModelTypeCheck.ts");const OBO_FOUNDRY_REPO_URL_RAW="https://raw.githubusercontent.com/OBOFoundry/OBOFoundry.github.io/master";function asArray(obj){return Array.isArray(obj)?obj:obj?[obj]:[]}const DEFAULT_USE_LEGACY=!0;function getUseLegacy(useLegacy){return void 0!==useLegacy?useLegacy:DEFAULT_USE_LEGACY}function getEntityTypeName(type){return"term"===type?"class":type}function capitalize(str){return str.charAt(0).toUpperCase()+str.slice(1)}function deCamelCase(str){return capitalize(str).split(/(?=[A-Z][a-z])/).join(" ")}function deUnderscore(str){return capitalize(str).replace("_"," ")}function getEntityInOntologySuffix(ontologyId,entityTypeArray,iri,useLegacy){return`ontologies/${ontologyId}/${pluralizeType(asArray(entityTypeArray),useLegacy)}`+(null!=iri?`/${encodeURIComponent(encodeURIComponent(iri))}`:"")}function pluralizeType(typeArray,useLegacy){for(const type of asArray(typeArray))if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.sF)(type)){if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.yU)(type))return getUseLegacy(useLegacy)?"terms":"classes";if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.V$)(type))return"properties";if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(type))return"individuals";if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Ps)(type))return"ontologies"}throw new Error("No thingType found to pluralize in provided typeArray.")}function singularizeType(typeArray,useLegacy){for(const type of asArray(typeArray))switch(type){case"terms":case"classes":return getUseLegacy(useLegacy)?"term":"class";case"properties":case"dataProperties":case"objectProperties":case"annotationProperties":return"property";case"individuals":return"individual";case"ontologies":return"ontology"}throw new Error("No thingType found to singularize in provided typeArray.")}function randomString(){return(Math.random()*Math.pow(2,54)).toString(36)}function isHexColor(str){return/^#[0-9A-F]{6}$/i.test(str)}function isRgbColor(str){return/^(rgb|hsl)(a?)[(]\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*(?:,\s*([\d.]+)\s*)?[)]$/i.test(str)}function getErrorMessageToDisplay(error){let messagePlaceholder=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"information";return"Response contains 0 elements"===error.message?"No elements found":`No ${messagePlaceholder} available`}function inferTypeFromTypeArray(types){let res=types.filter(elem=>(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.sF)(elem));if(res=res.map(item=>"annotationProperty"===item||"objectProperty"===item||"dataProperty"===item?"property":item),res=[...new Set(res)],1===res.length)return res[0];throw 0===res.length?Error("Entity type could not be correctly inferred: No suitable type found in array."):Error(`Entity type could not be correctly inferred: Multiple types found in array, no definite choice possible - ${JSON.stringify(res)}`)}function manuallyEmbedOnNavigate(code,storyContext){switch(storyContext.args.onNavigateToEntity){case"Console message":code=code.replace(/onNavigateToEntity=\{(\(\) => \{}|function noRefCheck\(\)\{})}/,"onNavigateToEntity={\n    (ontologyId: string, entityType?: string, entity?: { iri: string, label?: string }) => {\n      console.log('Triggered onNavigateToEntity()' + (entityType ? ` for ${entityType || \"entity\"}` : '') + ((entity && entity.label) ? ` \"${entity.label}\"` : '') + ((entity && entity.iri) ? ` (iri=\"${entity.iri}\")` : '') + '.');\n    }\n  }");break;case"Navigate to EBI page":code=code.replace(/onNavigateToEntity=\{(\(\) => \{}|function noRefCheck\(\)\{})}/,'onNavigateToEntity={\n    (ontologyId: string, entityType?: string, entity?: { iri: string, label?: string }) => {\n      if(entity && entity.iri && entityType) {\n        window.open(\'https://www.ebi.ac.uk/ols4/ontologies/\' + ontologyId + \'/\' + new Map([["term","classes"],["class","classes"],["individual","individuals"],["property","properties"],["dataProperty","properties"],["objectProperty","properties"],["annotationProperty","properties"]]).get(entityType) + \'/\' + encodeURIComponent(encodeURIComponent(entity.iri)), "_top");\n      }\n      else {\n        window.open(\'https://www.ebi.ac.uk/ols4/ontologies/\' + ontologyId, "_top");\n      }\n    }\n  }')}switch(storyContext.args.onNavigateToOntology){case"Console message":code=code.replace(/onNavigateToOntology=\{(\(\) => \{}|function noRefCheck\(\)\{})}/,"onNavigateToOntology={\n    (ontologyId: string, entityType?: string, entity?: { iri: string, label?: string }) => {\n      console.log('Triggered onNavigateToOntology()' + (entityType ? ` for ${entityType || \"entity\"}` : '') + ((entity && entity.label) ? ` \"${entity.label}\"` : '') + ((entity && entity.iri) ? ` (iri=\"${entity.iri}\")` : '') + ` for ontologyId \"${ontologyId}\".`);\n    }\n  }");break;case"Navigate to EBI page":code=code.replace(/onNavigateToOntology=\{(\(\) => \{}|function noRefCheck\(\)\{})}/,'onNavigateToOntology={\n    (ontologyId: string, entityType?: string, entity?: { iri: string, label?: string }) => {\n      if(entity && entity.iri && entityType) {\n        window.open(\'https://www.ebi.ac.uk/ols4/ontologies/\' + ontologyId + \'/\' + new Map([["term","classes"],["class","classes"],["individual","individuals"],["property","properties"],["dataProperty","properties"],["objectProperty","properties"],["annotationProperty","properties"]]).get(entityType) + \'/\' + encodeURIComponent(encodeURIComponent(entity.iri)), "_top");\n      }\n      else {\n        window.open(\'https://www.ebi.ac.uk/ols4/ontologies/\' + ontologyId, "_top");\n      }\n    }\n  }')}switch(storyContext.args.onNavigateToDisambiguate){case"Console message":code=code.replace(/onNavigateToDisambiguate=\{(\(\) => \{}|function noRefCheck\(\)\{})}/,"onNavigateToDisambiguate={\n    (entityType?: string, entity?: { iri: string, label?: string }) => {\n       console.log('Triggered onNavigateToDisambiguate()' + (entityType ? ` for ${entityType || \"entity\"}` : '') + ((entity && entity.label) ? ` \"${entity.label}\"` : '') + ((entity && entity.iri) ? ` (iri=\"${entity.iri}\")` : '') + '.');\n    }\n  }");break;case"Navigate to EBI page":code=code.replace(/onNavigateToDisambiguate=\{(\(\) => \{}|function noRefCheck\(\)\{})}/,"onNavigateToDisambiguate={\n    (entityType?: string, entity?: { iri: string, label?: string }) => {\n       window.open('https://www.ebi.ac.uk/ols4/search?q=' + ((entity && entity.label) ? entity.label : \"\") + '&exactMatch=true&lang=en', \"_top\");\n    }\n  }")}return code}function dictFromParamString(parameter){const result={};if(parameter){parameter.split("&").forEach(param=>{const key=param.split("=")[0],value=param.split("=")[1];result[key]=value})}return result}},"./src/app/widgetDescriptions.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{An:()=>SearchBarDescription,CK:()=>EntityOntoListDescription,Cl:()=>MetadataDescription,ED:()=>ResourcesDescription,Fe:()=>DescriptionDescription,Kc:()=>EntityDefinedByDescription,Ne:()=>JsonApiDescription,OE:()=>AlternativeNameTabDescription,Qu:()=>TabDescription,UT:()=>DataContentDescription,WA:()=>EntityInfoDescription,aC:()=>TermDepictionDescription,gM:()=>BreadcrumbPresentationDescription,hP:()=>EntityRelationsDescription,lu:()=>SearchResultsListDescription,mG:()=>GraphViewDescription,mV:()=>HierarchyDescription,nm:()=>CrossRefTabDescription,o8:()=>OntologyInfoDescription,oE:()=>BreadcrumbDescription,tg:()=>TitleDescription,v1:()=>AutocompleteDescription,vF:()=>IriDescription});const AutocompleteDescription="\nThe AutocompleteWidget is a component designed to provide autosuggestions for semantic concepts. \nIt allows users to search for and select ontology-based terms with enhanced context, metadata, and visual cues. \nIt offers seamless interaction with any OLS-based ([Ontology Lookup Service](https://github.com/EBISPOT/OLS)) API.\nThis widget is a powerful addition to any application requiring ontology search and selection of structured terms, making ontology-based data more accessible and usable for end-users.\n\n#### Key Features:\n\n- **Intuitive search interface with dynamic, responsive search experience**:\nProvides real-time autosuggestions as users type and highlights matching portions of suggestions for better usability.  \n\n- **Seamless ontology integration**:\nFetches data directly from OLS-based APIs and displays rich ontology-specific metadata, such as label, term type, description and short form.\nThe default search is across all text fields in the terminologies, but results are ranked (regardless of their terminology) \nby hits in labels, then synonyms, then definitions, then annotations. \nThe OLS system does not provide a feature to change search rankings. \nSee the underlying [Lucene Scoring algorithm documentation](https://www.lucenetutorial.com/advanced-topics/scoring.html) for more information.\n\n- **Customizability through a flexible design to adapt to various use cases**:\nSupports custom term sets and preselected concepts and is configurable for single or multiple selections depending on user needs.  \n\n- **Rich visualization, clear and meaningful representations of ontology data**:\nDisplays ontology badges and colored markers to differentiate term types and includes tooltips for detailed term information, enhancing user understanding.  \n".trim(),DataContentDescription="\nThe DataContentWidget is a dynamic display component designed to provide up-to-date information about the dataset being used in an application. It highlights key statistics and metrics, ensuring users can easily understand the scope and structure of the data at a glance.\nThis widget is an essential tool for providing users with a snapshot of their dataset, enabling quick assessments and enhancing transparency about the data's content and structure.\n\n#### Key Features:\n\n- **Real-time updates**: \nDisplays the last update timestamp to inform users about the freshness of the data and automatically updates as data changes.\n\n- **Comprehensive metrics, summarizes essential dataset statistics**: \nOntologies and terminologies (the total number of included ontologies or terminologies or vocabularies), \nterms (the count of individual terms or concepts available for use),\nproperties (number of metadata fields or attributes defined within the dataset) \nand individuals (the total count of specific entities or instances included).  \n\n- **User-friendly presentation**: \nDisplays information in a concise, well-organized format with bullet points for easy readability and is designed to complement a dashboard or data overview section.\n".trim(),EntityInfoDescription="\nThe EntityInfoWidget is a versatile component designed to display detailed information about a specific entity within an ontology or dataset. It provides structured, context-rich insights, enabling users to explore the characteristics, metadata, and relationships of the entity at a glance. \nThe widget operates on API responses in the OLS API format (OLS3 or OLS4), and the OLS4 version provides more information, better structure and more possibilities for navigation.\n\n#### Key Features:\n\n- **Rich entity details/metadata**: Including \nlabels (the primary name of the entity), synonyms (alternative names or terms associated with the entity),\nsubsets (groups or categories the entity belongs to),\nalternate definitions (additional descriptions or interpretations of the entity's meaning or usage) and\nmappings (relationships or equivalencies with other entities or terms).\n\n- **Contributing aource attribution**: Highlights the sources that provide or maintain the entity information, ensuring transparency.\n\n- **Visualization of Relationships**: Displays hierarchical relationships, such as parent-child mappings, and connections within the ontology.\n\n- **Semantic Annotations**: Includes key metadata such as display dame (how the entity is labeled in the UI), \nlegacy concept names (previous or deprecated identifiers), \nand hierarchy terms (placement of the entity within the ontology's structure).\n".trim(),EntityRelationsDescription='\nThe EntityRelationsWidget is a dynamic React component designed to display and explore relationships between ontology entities. It dynamically fetches and presents connections such as types, equivalencies, hierarchies, and other ontology-driven links, offering users an intuitive way to navigate the relationships between entities.\nThis widget is an essential tool for visualizing ontology structures and understanding the interconnected nature of entities within the dataset.\nThe widget operates on API responses in the OLS API format (OLS3 or OLS4), and the OLS4 version provides more information, better structure and more possibilities for navigation.\n\n#### Key Features:\n\n- **Entity-specific relation sections**: Automatically organizes entity relations into sections for types like individuals, classes, and properties, including "Type," "Same As," "Disjoint With," "Equivalent To," and "Subentity Of."\n\n- **Dynamic data fetching**: Retrieves and displays entity relation data in real-time, ensuring users always have the latest information.\n\n- **Interactive linked data**: Supports clickable links to navigate related entities, ontologies, or datasets for seamless exploration.\n'.trim(),GraphViewDescription='\nThe GraphViewWidget is an interactive visualization component designed to explore ontology relationships through a graph-based interface. This widget provides users with an intuitive way to examine entities, connections, and hierarchical structures dynamically.\nThis widget is an essential tool for ontology exploration, enabling users to visually navigate and understand complex relationships between terms and concepts.\n\n#### Key Features:\n\n- **Interactive graph visualization**: \nDisplays ontology entities as nodes and their relationships as edges, enabling users to interact by zooming, panning, and dragging elements.\n\n- **Dynamic data updates**: \nFetches and renders relationship data dynamically to ensure the graph reflects the latest ontology structure.\n\n- **Double-click navigation**: \nAllows users to expand nodes to reveal deeper levels of connections, providing a seamless exploration experience.\n\n- **Root walk mode**: \nOffers an optional "root walk" view, where users can trace paths from root nodes to a selected entity, enhancing contextual understanding.\n\n- **Guided usage and reset functionality**: \nIncludes a help popover with usage tips and a reset button to restore the graph to its initial state for ease of navigation.\n'.trim(),JsonApiDescription="\nThe JsonApiWidget is a lightweight and efficient component designed to provide users with direct access to API endpoints through a customizable button interface. \nIt simplifies the process of retrieving raw JSON data from an API, making it easy to integrate into dashboards and data exploration tools.\n\n#### Key Features:\n\n- **Direct API access**: \nAllows users to open API endpoints directly in a new browser tab, providing immediate access to raw JSON data for further inspection or use.\n\n- **Customizable button interface**: \nSupports user-defined button text and adjustable button sizes (`small`, `medium`, or `large`), ensuring it can blend seamlessly into various user interfaces.\n".trim(),BreadcrumbDescription="\nThe BreadcrumbWidget to display the ontology and CURIE (compact URI) of an entity as badges to indicate the location of an entity within a terminology service. \n\n#### Key Features:\n\n- **Interactive breadcrumbs**:  \nDisplays a clickable badge that allows users to navigate back to the parent ontology easily.\n\n- **Customizable color scheme**:  \nSupports flexible customization of breadcrumb badge colors (`colorFirst` and `colorSecond`) to align with application themes.\n".trim(),BreadcrumbPresentationDescription="\nThe BreadcrumbPresentation is a presentational component for rendering the breadcrumb view.\nIt is designed to handle display concerns only and does not include any logic for data fetching.\nUse this component when you need to separate concerns between presentation and data handling - for example, when fetching the data asynchronously. \nTo retrieve the required data, you can use the provided utility function getBreadcrumbData().\nThis function can be called in your logic or container component, and the resulting data can be passed to BreadcrumbPresentation as props.\n".trim(),DescriptionDescription='\nThe DescriptionWidget displays the description of an entity retrieved from a terminology service.\n\n#### Key Features:\n\n- **Entity Description Display**: \nRetrieves and displays the description of a specified entity using data from an API response in the OLS API format. \nIf no description is available, a default message ("No description available") is shown.\n\n- **Loading and Error Handling**:  \n  The widget supports loading states with a spinner and displays appropriate error messages if the description retrieval fails.\n\n- **Customizable Text**: \nThe widget allows customization of the displayed description text via the `descText` parameter, enabling flexible integration into various contexts.\n'.trim(),EntityDefinedByDescription="\nThe EntityDefinedByWidget displays a list of badges containing the ontologies in which a given entity is defined, \nexcluding the ontology currently being viewed.\n\n#### Key Features:\n\n- **Ontology Badges Display**: \nShows badges for the ontologies in which the entity is defined, excluding the current ontology. \nIf more than 5 badges are available, they are collapsed with an option to expand them.\n\n- **Empty State Handling**: \nThe widget is empty if no ontology badges are available, ensuring a clean display when the entity is not defined by any ontology.\n".trim(),EntityOntoListDescription="\nThe EntityOntoListWidget displays a list of badges containing the ontologies that a given entity appears in but is not defined in, excluding the ontology currently being viewed.\n\n#### Key Features:\n\n- **Ontology Badges Display**: \nShows badges for the ontologies where the entity appears, excluding the current ontology. \nIf there are more than 5 badges, they are collapsed, with an option to expand them.\n\n- **Empty State Handling**: \nThe widget remains empty if no ontology badges are available, ensuring a clean display when the entity is not associated with any additional ontologies.\n".trim(),IriDescription="\nThe IriWidget displays a provided IRI as a clickable link, with customizable features such as text color, \na custom display text, an external icon, and an optional copy-to-clipboard button.\n\n#### Key Features:\n\n- **Clickable IRI Link**: \nDisplays the IRI as a link, with an optional custom text to display (`iriText`) and the ability to apply a custom color to the text.\n\n- **External Link Icon**: \nOptionally includes an icon to indicate that the link leads to an external resource (`externalIcon`).\n\n- **Copy to Clipboard Button**: \nIncludes a button to copy the IRI link to the clipboard, with visual feedback indicating the success of the operation. This feature can be toggled on or off via the `copyButton` parameter.\n\n- **URL Prefix**: \nAllows for a custom URL prefix (`urlPrefix`) to be applied to the IRI before displaying it as a link.\n\n- **Color Customization**: \nSupports flexible color customization for the IRI link text, using either hex, RGB, or predefined color options.\n".trim(),MetadataDescription="\nThe MetadataWidget provides detailed metadata for a given entity (such as a class, property, or individual) within an ontology. \nThe widget displays the entity's title, breadcrumb, IRI, description, and lists of ontologies where the entity appears \nor is defined. It also includes optional tabs for additional information, such as alternative names, hierarchy, \ncross-references, and terminology details. The widget supports both OLS3 and OLS4 API formats, \nwith the OLS4 version offering more comprehensive and structured data, as well as enhanced navigation options.\n\n#### Key Features:\n\n- **Entity Title**: \n Displays the entity's title as a clickable link, which can optionally navigate to an external term link.\n\n- **Breadcrumb Navigation**: \nProvides a breadcrumb trail that allows users to easily navigate back to the parent ontology.\n\n- **IRI Display**: \nShows the IRI of the entity as a clickable link, allowing for easy access to the resource.\n\n- **Entity Description**: \nDisplays the description of the entity to provide additional context about its meaning and usage.\n\n- **Ontology Lists**: \nShows lists of ontologies where the entity appears and where it is defined, enabling users to explore its context within multiple ontologies.\n\n- **Customizable Tabs**: \nSupports customizable tabs to display additional information, such as alternative names, entity hierarchy, cross-references, and terminology information.\n".trim(),AlternativeNameTabDescription="\nThe AlternativeNameTabWidget is designed to display a list of alternative names (synonyms) for a given entity, \nsuch as a class, property, or individual, within an ontology. This widget fetches and displays synonyms from the provided \nentity's metadata, supporting both OLS3 and OLS4 API formats from the OLS API. \nThe widget allows users to view various alternative names associated with the entity, enhancing the searchability and \ndiscoverability of the entity under different terms.\n\n#### Key Features:\n\n- **Synonym Display**: \nLists all available alternative names (synonyms) for the specified entity, offering users various ways to identify or \nrefer to the entity.\n\n".trim(),CrossRefTabDescription="\nThe CrossRefTabWidget is a component designed to list cross-references for a given entity, such as a class, property, \nor individual, within an ontology. The widget fetches and displays cross-references associated with the entity, \nleveraging data from both OLS3 and OLS4 API formats. It helps users explore entities that are related or referenced \nacross different ontologies, enhancing the entity's context and connection to other terms or concepts.\n\n#### Key Features:\n\n- **Cross-Reference Listing**: \nDisplays a list of cross-references for the given entity, showing entities from other ontologies or different contexts that are related to the specified entity.\n\n".trim(),HierarchyDescription="\nThe HierarchyWidget is a component designed to display the hierarchical structure of a given entity, especially for classes, \nwithin an ontology. The widget visualizes the entity's position within the hierarchy, starting from the terminology roots \nand expanding down to the specified entity. Users can interact with the hierarchy, expanding or collapsing nodes to navigate \nthrough related classes or entities.\n\nThis widget is particularly useful for exploring entity hierarchies and understanding the classification of concepts, \noffering a flexible and customizable way to visualize ontology structures.\n\n#### Key Features:\n\n- **Dynamic Hierarchy Display**: \nDisplays the hierarchical structure of an entity, showing its position within the overall classification from the terminology roots down to the entity.\n\n- **Expandable Nodes**: \nUsers can expand and collapse hierarchy nodes by clicking on the arrow next to each label, making it easy to navigate through different levels of the hierarchy.\n\n- **User-Friendly Interface**: \nThe widget is interactive, offering a clear and intuitive way to explore the hierarchical structure of entities. \nIt enables users to efficiently navigate and understand relationships between entities.\n".trim(),TabDescription="\nThe TabWidget is a component to gather AlternativeNames, CrossRefs, Hierarchy and Ontology details. \n".trim(),TitleDescription="\nThe TitleDescriptionWidget is a component designed to display the title of an entity, which can represent an ontology, \nclass, property, or individual. This widget allows customization in how the title is displayed, offering flexibility \nfor different use cases.\n\n#### Key Features:\n\n- **Manual Title Specification**: \nThe title text can be manually provided through the `titleText` parameter, enabling precise control over the content \ndisplayed.\n\n- **Dynamic Title Retrieval**: \nIf no `titleText` is provided, the widget will retrieve and display the title of the entity from the OLS API. \n\n- **Default Title and Styles**: \nA default title value can be set via the `defaultValue` parameter, which will be displayed when the title data is\n unavailable. The widget also supports custom CSS styles, allowing you to define a `className` for further styling.\n".trim(),OntologyInfoDescription="\nThe OntologyInfoWidget is a component designed to display detailed information about an ontology. \nThe widget retrieves and presents key metadata related to an ontology, such as its IRI, version IRI, ontology ID, \nversion, and number of classes. It also includes additional annotations and creators, offering a comprehensive view \nof the ontology's structure and metadata.\n\n#### Key Features:\n\n- **Ontology Metadata**: \n Displays critical information such as the ontology's IRI, version IRI, the date it was last loaded, ontology ID, \n version, and number of classes.\n\n- **Dynamic Data Retrieval**: \nThe widget fetches the ontology data via API responses from the OLS API. \nThe OLS4 API version provides enhanced data structure, more information, and greater navigation capabilities.\n\n- **Annotations and Creators**: \nIncludes a list of annotations and creators related to the ontology, allowing users to view and interact with additional \ndetails about the ontology.\n\n- **Interactive Links**: \nThe widget provides clickable links for the ontology's IRI, version IRI, and creators, allowing users to easily navigate \nto related entities or resources.\n".trim(),ResourcesDescription='\nThe ResourcesWidget is a versatile component designed to display and manage a list of resources, such as ontologies, \nfrom a specified terminology or collection. The widget supports paging, sorting, and dynamic actions for each resource, \nmaking it highly customizable for various use cases. \n\n#### Key Features:\n\n- **Resource Listing**: \nDisplays a list of resources, such as ontologies, in a structured table format, with configurable columns such as \n"Resource Name", "Short Name", "Description", "Version", "Loaded On", and more.\n\n- **Paging and Sorting**: \nThe widget allows for pagination and sorting of the displayed resources. \nThe number of items per page, page size options, and the default sorting field and direction can be configured through \nwidget parameters.\n\n- **Customizable Actions**: \nThe last column of the table is dedicated to actions that can be defined for each resource. \nCustom actions, such as download buttons or hyperlinks, can be provided to fit specific use case requirements.\n\n- **Hyperlink Support**: \nEach resource\'s "Short Name" can be linked to a target URL, allowing users to easily navigate to related pages, \nsuch as ontology details, with configurable links.\n'.trim(),SearchBarDescription="\nThe SearchBarWidget is a powerful and flexible component that enables users to search for terms within a specific \nterminology or collection. It provides dynamic suggestions based on a query string, enhancing the search experience and \nimproving data discoverability.\n\n#### Key Features:\n\n- **Dynamic Search Suggestions**: \nAs the user types in the search bar, the widget fetches and displays relevant suggestions from the backend, \nproviding real-time feedback based on the entered query string. The suggestions can be customized and fetched from a \nspecified terminology or collection.\n\n- **Selection Change Event**: \nThe widget allows users to select a term from the provided suggestions. When the selection changes, the widget triggers \na custom event handler, which can be used to define actions or respond to the selected terms.\n\n- **Search Term Creation**: \nThe widget supports the ability to create new search terms on the fly. If the user enters a search term that isn't already \nin the suggestion list, it will be added as a new option, enabling flexibility for diverse search needs.\n\n- **Customizable Placeholder and Query**: \nThe widget accepts a `query` parameter to initialize the search input and provides an optional `placeholder` for \nguidance on what the user should search for, making it adaptable to various use cases.\n\n- **Clearable Search**: \nThe widget supports clearing the search input, allowing users to easily reset the search and start a new query.\n".trim(),SearchResultsListDescription='\nThe SearchResultsListWidget is a versatile and powerful component that displays search results based on the user\'s query \nand available filters. It integrates with the OLS API to fetch results from the "suggest" endpoint, with enhanced \nfunctionality when using the OLS4 version of the API. This widget is ideal for displaying large sets of results with \nsupport for paging, filtering, and navigation.\n\n#### Key Features:\n\n- **Search Results Display**: \nThe widget dynamically fetches and displays search results from the OLS API based on the query entered by the user. \nIt supports both OLS3 and OLS4 API versions, with the non-legacy version offering more detailed results.\n\n- **Paging & Pagination**: \nResults are displayed with pagination controls, allowing users to navigate through large sets of data easily. \nThe number of items per page is configurable, and users can switch between different page sizes \n(10, 25, 50, 100 results per page).\n\n- **Filtering Options**: \nUsers can filter search results based on multiple criteria, including type and ontology. \nFilters are updated dynamically based on available facets from the API response. \nThe widget supports clearing individual filters or all filters at once.\n\n- **Exact Match & Obsolete Terms**: \nThe widget allows toggling options to refine the search, including "exact match" (to match only exact terms) and \n"show only obsolete terms" for filtering deprecated or outdated results.\n\n- **Customizable Hyperlinks**: \nEach result can be linked to a specific URL, allowing users to access detailed information associated with each search result. \nThis is configurable through the `targetLink` property.\n\n- **Search Bar Integration**: \nThe widget integrates with the SearchBarWidget, allowing users to adjust the search term dynamically. \nThe selected term from the search bar automatically triggers a new search, and the results are updated accordingly.\n'.trim(),TermDepictionDescription="\nThe TermDepictionWidget is a component designed to display the visual representation (depiction) of a class term referenced \nby its depiction URL. The widget is intended to work with API responses in the OLS (Ontology Lookup Service) API format, \nsupporting both OLS3 and OLS4 versions of the API. It is ideal for applications that need to visually represent concepts \nor terms from an ontology.\n\n#### Key Features:\n\n- **Depiction Display**: \nThe widget fetches and displays the depiction (image) associated with a specific term, provided via a URL from the OLS API. \n\n- **Interactive Image Display**: \nOnce the image is successfully fetched, it is displayed with a medium size and shadow for enhanced aesthetics. \nThe image is clickable, allowing users to expand it and view it in full-screen mode for better clarity.\n".trim()},"./src/model/LinkedEntities.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>LinkedEntities});var _Reified__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/Reified.ts");class LinkedEntities{constructor(linkedEntities){this.linkedEntities=linkedEntities?{...linkedEntities}:{}}mergeWith(linkedEntities){return new LinkedEntities(linkedEntities?{...this.linkedEntities,linkedEntities}:{...this.linkedEntities})}getLabelForIri(iri){const linkedEntity=this.linkedEntities[iri];if(linkedEntity){const label=_Reified__WEBPACK_IMPORTED_MODULE_0__.A.fromJson(linkedEntity.label);if(label&&label.length>0)return label[0].value}}get(iri){return this.linkedEntities[iri]}}},"./src/model/ModelObjectCreator.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>getPreferredOntologyJSON,t:()=>createModelObject});var _ols3_model__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/ols3-model/index.ts"),_ols4_model__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/model/ols4-model/index.ts"),_app_util__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/app/util.ts");function createModelObject(response){let useLegacy,entityType;if(void 0!==response._embedded||void 0!==response.numberOfTerms)useLegacy=!0;else{if(void 0===response.elements&&void 0===response.numberOfClasses)throw Error(`Response structure does not correlate to any of the featured response structures: \n ${JSON.stringify(response)}`);useLegacy=!1}if(useLegacy)void 0===response._embedded?entityType="ontology":void 0!==response._embedded.terms?entityType="term":void 0!==response._embedded.properties?entityType="property":void 0!==response._embedded.individuals&&(entityType="individual");else if(void 0===response.elements)entityType="ontology";else{if(void 0===response.elements[0])throw Error("Empty response.");entityType=(0,_app_util__WEBPACK_IMPORTED_MODULE_2__.Yz)(response.elements[0].type)}if(void 0===entityType)throw Error("Entity type could not be correctly inferred.");return function createModelObjectWithEntityTypeWithUseLegacy(response,entityType,useLegacy){switch(entityType){case"ontology":return useLegacy?new _ols3_model__WEBPACK_IMPORTED_MODULE_0__.t6(response):new _ols4_model__WEBPACK_IMPORTED_MODULE_1__.am(response);case"term":case"class":return useLegacy?new _ols3_model__WEBPACK_IMPORTED_MODULE_0__.oP(getPreferredOntologyJSON((0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(response._embedded.terms),useLegacy)):new _ols4_model__WEBPACK_IMPORTED_MODULE_1__.VJ(getPreferredOntologyJSON((0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(response.elements),useLegacy));case"property":return useLegacy?new _ols3_model__WEBPACK_IMPORTED_MODULE_0__.hu(getPreferredOntologyJSON((0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(response._embedded.properties),useLegacy)):new _ols4_model__WEBPACK_IMPORTED_MODULE_1__.g1(getPreferredOntologyJSON((0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(response.elements),useLegacy));case"individual":return useLegacy?new _ols3_model__WEBPACK_IMPORTED_MODULE_0__.T4(getPreferredOntologyJSON((0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(response._embedded.individuals),useLegacy)):new _ols4_model__WEBPACK_IMPORTED_MODULE_1__.ES(getPreferredOntologyJSON((0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(response.elements),useLegacy));default:throw Error('Invalid entity type "'+entityType+'". Must be one of {"term", "class", "ontology", "property", "individual"}')}}(response,entityType,useLegacy)}function getPreferredOntologyJSON(entityArrayResponse,useLegacy,ontologyId){if(ontologyId){const entityInOntology=(0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(entityArrayResponse).filter(entity=>(useLegacy?entity.ontology_name:entity.ontologyId)==ontologyId);if(entityInOntology.length>0)return entityInOntology[0];console.error(`Invalid ontologyId ${ontologyId} for given entityArrayResponse.`)}const definingOntologyArr=(0,_app_util__WEBPACK_IMPORTED_MODULE_2__._j)(entityArrayResponse).filter(entity=>useLegacy?entity.is_defining_ontology:entity.isDefiningOntology);if(definingOntologyArr.length>0)return definingOntologyArr[0];if(entityArrayResponse.length>0)return entityArrayResponse[0];throw Error("Empty response.")}},"./src/model/ModelTypeCheck.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D4:()=>isClass,Op:()=>entityTypeNames,Ps:()=>isOntologyTypeName,Qg:()=>isEntity,Td:()=>isIndividualTypeName,UP:()=>ontologyTypeNames,V$:()=>isPropertyTypeName,Z6:()=>thingTypeNames,h0:()=>classTypeNames,iV:()=>isIndividual,io:()=>isOntology,p2:()=>isEntityTypeName,sF:()=>isThingTypeName,uM:()=>isProperty,yU:()=>isClassTypeName});const classTypeNames=["class","term"],propertyTypeNames=["property","annotationProperty","dataProperty","objectProperty"],individualTypeNames=["individual"],ontologyTypeNames=["ontology"],entityTypeNames=[...classTypeNames,...individualTypeNames,...propertyTypeNames],thingTypeNames=[...entityTypeNames,...ontologyTypeNames];function isClassTypeName(type){return classTypeNames.includes(type)}function isPropertyTypeName(type){return propertyTypeNames.includes(type)}function isIndividualTypeName(type){return individualTypeNames.includes(type)}function isOntologyTypeName(type){return ontologyTypeNames.includes(type)}function isEntityTypeName(type){return entityTypeNames.includes(type)}function isThingTypeName(type){return thingTypeNames.includes(type)}function isClass(thing){return isClassTypeName(thing.getType())}function isProperty(thing){return isPropertyTypeName(thing.getType())}function isIndividual(thing){return isIndividualTypeName(thing.getType())}function isEntity(thing){return isEntityTypeName(thing.getType())}function isOntology(thing){return isOntologyTypeName(thing.getType())}},"./src/model/Reified.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>Reified});class Reified{constructor(value,axioms){this.value=value,this.axioms=axioms}static fromJson(jsonNode){return jsonNode?(Array.isArray(jsonNode)||(jsonNode=[jsonNode]),jsonNode.map(value=>"object"==typeof value&&Array.isArray(value.type)&&-1!==value.type.indexOf("reification")?new Reified(value.value,value.axioms):new Reified(value,null))):[]}hasMetadata(){return null!=this.axioms}getMetadata(){if(!this.axioms)return null;const properties={};for(const axiom of this.axioms)for(const k of Object.keys(axiom)){const v=axiom[k],existing=properties[k];void 0!==existing?existing.push(v):properties[k]=[v]}return properties}}},"./src/model/interfaces/Hierarchy.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>Hierarchy,n:()=>TreeNode});class TreeNode{constructor(entityData,childRelationToParent){this.entityData=entityData,this.loadedChildren=[],this.expanded=!1,this.loading=!1,this.childRelationToParent=childRelationToParent}addChild(child){this.loadedChildren.push(child)}}class Hierarchy{includeObsoleteEntities=!1;keepExpansionStates=!0;constructor(props){const{parentChildRelations,entitiesData,allChildrenPresent,roots,includeObsoleteEntities,keepExpansionStates,api,mainEntityIri,entityType,ontologyId,useLegacy,parameter}=props;this.parentChildRelations=parentChildRelations,this.entitiesData=entitiesData,this.allChildrenPresent=allChildrenPresent,this.roots=roots,null!=includeObsoleteEntities&&(this.includeObsoleteEntities=includeObsoleteEntities),null!=keepExpansionStates&&(this.keepExpansionStates=keepExpansionStates),this.api=api,this.mainEntityIri=mainEntityIri,this.entityType=entityType,this.ontologyId=ontologyId,null!=useLegacy&&(this.useLegacy=useLegacy),this.parameter=parameter}mergeChildrenIntoLoadedChildren(nodeToExpand){const children=this.parentChildRelations.get(nodeToExpand.entityData.iri);if(null==children)throw Error(`parentChildRelations has no entry for key "${nodeToExpand.entityData.iri}" although this should never happen.`);let iLoadedChildren=0;const numLoadedChildren=nodeToExpand.loadedChildren.length;let iChildren=0;for(;iChildren<children.length&&iLoadedChildren<numLoadedChildren;)nodeToExpand.loadedChildren[iLoadedChildren].entityData.iri==children[iChildren].childIri?iLoadedChildren++:nodeToExpand.addChild(new TreeNode(this.entitiesData.get(children[iChildren].childIri),children[iChildren].childRelationToParent)),iChildren++;for(;iChildren<children.length;)nodeToExpand.addChild(new TreeNode(this.entitiesData.get(children[iChildren].childIri),children[iChildren].childRelationToParent)),iChildren++;for(let iLoadedChildren=numLoadedChildren-1;iLoadedChildren>=0;iLoadedChildren--)for(let currIdx=iLoadedChildren+1;currIdx<nodeToExpand.loadedChildren.length;currIdx++){const currNode=nodeToExpand.loadedChildren[currIdx],prevNode=nodeToExpand.loadedChildren[currIdx-1];if(!((currNode.entityData.label||currNode.entityData.iri).localeCompare(prevNode.entityData.label||prevNode.entityData.iri)<0))break;nodeToExpand.loadedChildren[currIdx]=prevNode,nodeToExpand.loadedChildren[currIdx-1]=currNode}}closeNode(nodeToClose){this.keepExpansionStates||(nodeToClose.loadedChildren=[])}async fetchInformationForExpansion(nodeToExpand){if(!nodeToExpand.entityData.hasChildren)throw Error(`Node containing iri="${nodeToExpand.entityData.iri}" could not be expanded: Entity is not expandable.`);const allChildrenPresent=this.allChildrenPresent.has(nodeToExpand.entityData.iri),nodeParentChildRelations=this.parentChildRelations.get(nodeToExpand.entityData.iri)||[];if(!allChildrenPresent||nodeToExpand.loadedChildren.length<=nodeParentChildRelations.length){if(!allChildrenPresent){const children=(await this.api.loadHierarchyChildren({nodeToExpand,entityType:this.entityType,ontologyId:this.ontologyId,includeObsoleteEntities:this.includeObsoleteEntities,useLegacy:this.useLegacy,parameter:this.parameter})).sort((a,b)=>(a.label||a.iri).localeCompare(b.label||b.iri)),parChildRel=[];for(const child of children)if(this.entitiesData.set(child.iri,child),child.parents){const parRelation=child.parents.filter(par=>par.value==nodeToExpand.entityData.iri);parChildRel.push({childIri:child.iri,childRelationToParent:parRelation.length>0&&parRelation[0].getMetadata()?parRelation[0].getMetadata().childRelationToParent:void 0})}this.parentChildRelations.set(nodeToExpand.entityData.iri,parChildRel)}return this.mergeChildrenIntoLoadedChildren(nodeToExpand),this.allChildrenPresent.add(nodeToExpand.entityData.iri),!0}return!1}}},"./src/model/ols3-model/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{oP:()=>OLS3Class,T4:()=>OLS3Individual,z7:()=>OLS3Ontologies,t6:()=>OLS3Ontology,hu:()=>OLS3Property});var LinkedEntities=__webpack_require__("./src/model/LinkedEntities.ts"),Reified=__webpack_require__("./src/model/Reified.ts"),util=__webpack_require__("./src/app/util.ts");class OLS3Thing{constructor(properties){this.properties=properties}getLabel(){return this.properties.label}getId(){return this.properties.id}getIri(){return this.properties.iri}getTypePlural(){return(0,util.DW)(this.getType())}getRdfTypes(){return[]}getName(){return this.getNames()[0]}getNames(){const labels=Reified.A.fromJson(this.properties.label);return labels&&labels.length>0?labels.map(label=>label.value):[this.getIri()]}getDescription(){const definition=Reified.A.fromJson(this.properties.description);return definition&&definition.length>0?definition.map(def=>def.value||"").join(" "):""}getOntologyId(){return this.properties.ontology_name}getLabelForIri(id){const linkedEntities=this.properties.linkedEntities;if(linkedEntities){const label=Reified.A.fromJson(linkedEntities[id]?.label);return label[0]?.value||id}return id}getLinkedEntities(){return new LinkedEntities.A(this.properties.linkedEntities||{})}getDepictionUrl(){return this.properties.annotation&&this.properties.annotation.depiction?this.properties.annotation.depiction:[]}}class OLS3Entity extends OLS3Thing{isCanonical(){return!0===this.properties.is_defining_ontology}isDeprecated(){return"true"===this.properties["http://www.w3.org/2002/07/owl#deprecated"]}getDeprecationVersion(){return this.properties["http://www.ebi.ac.uk/efo/obsoleted_in_version"]}getDeprecationReason(){return Reified.A.fromJson(this.properties["http://purl.obolibrary.org/obo/IAO_0000231"]).concat(Reified.A.fromJson(this.properties["http://www.ebi.ac.uk/efo/reason_for_obsolescence"]))}getDeprecationReplacement(){return this.properties["http://purl.obolibrary.org/obo/IAO_0100001"]}getRelatedFrom(){return Reified.A.fromJson(this.properties.relatedFrom)}getDescriptionAsArray(){return Reified.A.fromJson(this.properties.description)}hasDirectChildren(){return"true"===this.properties.hasDirectChildren}hasHierarchicalChildren(){return"true"===this.properties.hasHierarchicalChildren}hasChildren(){return this.properties.has_children}getAncestorIris(){return(0,util._j)(this.properties.ancestor)}getHierarchicalAncestorIris(){return(0,util._j)(this.properties.hierarchicalAncestor)}getSynonyms(){return Reified.A.fromJson(this.properties.synonyms)}getAppearsIn(){return this.properties.appearsIn||[]}getCrossReferences(){return this.properties.annotation.has_dbxref||[]}getDefinedBy(){return this.properties.definedBy||[]}getIsDefiningOntology(){return this.properties.is_defining_ontology||void 0}getShortForm(){return this.properties.obo_id||this.properties.short_form}getDepictedBy(){return Reified.A.fromJson([...(0,util._j)(this.properties["http://xmlns.com/foaf/0.1/depicted_by"]||[]),...(0,util._j)(this.properties["http://xmlns.com/foaf/0.1/depiction"]||[])])}isPredicateFromInformalVocabulary(predicate){return predicate.startsWith("http://www.w3.org/2004/02/skos/core#")||predicate.startsWith("http://purl.org/dc/terms/")||predicate.startsWith("http://purl.org/dc/elements/1.1/")||predicate.startsWith("http://schema.org/")}getAnnotationPredicates(){return(0,util._j)(Object.keys(this.properties.annotation))}getAnnotationTitleById(id){return(0,util.s0)(id)}getAnnotationById(id){return Reified.A.fromJson((0,util._j)(this.properties.annotation[id]))}getNumHierarchicalDescendants(){return this.properties.numHierarchicalDescendants?parseInt(this.properties.numHierarchicalDescendants):0}getNumDescendants(){return this.properties.numDescendants?parseInt(this.properties.numDescendants):0}getHierarchicalParentReificationAxioms(parentIri){const hierarchicalParents=Reified.A.fromJson(this.properties.hierarchicalParent);for(const p of hierarchicalParents)if(p.value===parentIri)return p.getMetadata()}}class OLS3Class extends OLS3Entity{getType(){return"class"}getTypePlural(){return"classes"}getParents(){return Reified.A.fromJson(this.properties.hierarchicalParent)}getSuperEntities(){return Reified.A.fromJson(this.properties["http://www.w3.org/2000/01/rdf-schema#subClassOf"])}getEquivalents(){return Reified.A.fromJson(this.properties["http://www.w3.org/2002/07/owl#equivalentClass"])}getDisjointWith(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#disjointWith"])}getHasKey(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#hasKey"])}getSubsets(){return(0,util._j)(this.properties.in_subset)||[]}}class OLS3Property extends OLS3Entity{getType(){return"property"}getParents(){return Reified.A.fromJson(this.properties["http://www.w3.org/2000/01/rdf-schema#subPropertyOf"])}getSuperEntities(){return Reified.A.fromJson(this.properties["http://www.w3.org/2000/01/rdf-schema#subPropertyOf"])}getEquivalents(){return Reified.A.fromJson(this.properties["http://www.w3.org/2002/07/owl#equivalentProperty"])}getDisjointWith(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#propertyDisjointWith"])}getInverseOf(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#inverseOf"])}getDomain(){return(0,util._j)(this.properties["http://www.w3.org/2000/01/rdf-schema#domain"])}getRange(){return(0,util._j)(this.properties["http://www.w3.org/2000/01/rdf-schema#range"])}getPropertyChains(){return Reified.A.fromJson(this.properties["http://www.w3.org/2002/07/owl#propertyChainAxiom"])}}class OLS3Individual extends OLS3Entity{getType(){return"individual"}getParents(){return Reified.A.fromJson(this.properties.directParent)}getEquivalents(){return[]}getSuperEntities(){return Reified.A.fromJson([])}getDifferentFrom(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#differentFrom"])}getSameAs(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#sameAs"])}getIndividualTypes(){const rdfTypes=this.getRdfTypes();return rdfTypes&&Array.isArray(rdfTypes)?rdfTypes.filter(t=>!("http://www.w3.org/2002/07/owl#NamedIndividual"===t||"string"==typeof t&&t.startsWith("http://www.w3.org/2000/01/rdf-schema#"))):[]}}class OLS3Ontology extends OLS3Thing{getType(){return"ontology"}getTypePlural(){return"ontologies"}getOntologyId(){return this.properties.ontologyId}getName(){const names=Reified.A.fromJson(this.properties.config.title||"");return names[0]&&names[0].value||this.getOntologyId()}getDescription(){const descriptions=Reified.A.fromJson(this.properties.config.description||"");return descriptions[0]&&descriptions[0].value||""}getCreators(){return(0,util._j)(this.properties.config.annotations.creator)}getSourceFileTimestamp(){return this.properties.updated}getNumEntities(){return parseInt(this.properties.numberOfEntities)}getNumClasses(){return parseInt(this.properties.numberOfTerms)}getNumProperties(){return parseInt(this.properties.numberOfProperties)}getNumIndividuals(){return parseInt(this.properties.numberOfIndividuals)}getLogoURL(){return this.properties.config.logo||void 0}getOntologyPurl(){return this.properties.config.fileLocation}getHomepage(){return this.properties.config.homepage}getMailingList(){return this.properties.config.mailingList}getTracker(){return this.properties.config.tracker}getVersionIri(){return this.properties.config.versionIri}getVersion(){return this.properties.config.version}getVersionFromIri(){const versionIri=this.getVersionIri();if(!versionIri)return"";const versionFromDate=versionIri.match(/\d{4}-\d{2}-\d{2}/);if(versionFromDate&&versionFromDate.length>0)return versionFromDate[0];{const versionFromNumber=versionIri.match(/\/v[d.].*\//);return versionFromNumber?versionFromNumber[0].replaceAll("/","").replace("v",""):""}}getLoaded(){return this.properties.loaded}getAnnotationPredicates(){return this.properties.config&&this.properties.config.annotations?(0,util._j)(Object.keys(this.properties.config.annotations)):[]}getAnnotationTitleById(id){return(0,util.Mv)(id)}getAnnotationById(id){return Reified.A.fromJson((0,util._j)(this.properties.config.annotations[id]).filter(elem=>"string"!=typeof elem||""!==elem))}getPreferredRoots(){return(0,util._j)(this.properties.hasPreferredRoot)}getPreferredPrefix(){return this.properties.config.preferredPrefix}getLanguages(){return(0,util._j)(this.properties.lang)}getImportsFrom(){return[]}getExportsTo(){return(0,util._j)(this.properties.exportsTo)}getAllowDownload(){return this.properties.config.allowDownload}getLicense(){return this.properties.config.annotations.license}}class OLS3Ontologies{constructor(properties){this.properties=properties}getTotalOntologies(){return this.properties.length}getNumEntities(){return this.properties.reduce((total,ontology)=>total+ontology.getNumEntities(),0)}getNumClasses(){return this.properties.reduce((total,ontology)=>total+ontology.getNumClasses(),0)}getNumProperties(){return this.properties.reduce((total,ontology)=>total+ontology.getNumProperties(),0)}getNumIndividuals(){return this.properties.reduce((total,ontology)=>total+ontology.getNumIndividuals(),0)}}},"./src/model/ols4-model/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{VJ:()=>OLS4Class,ES:()=>OLS4Individual,Y7:()=>OLS4Ontologies,am:()=>OLS4Ontology,g1:()=>OLS4Property});var LinkedEntities=__webpack_require__("./src/model/LinkedEntities.ts"),Reified=__webpack_require__("./src/model/Reified.ts"),util=__webpack_require__("./src/app/util.ts"),ModelTypeCheck=__webpack_require__("./src/model/ModelTypeCheck.ts");class OLS4Thing{constructor(properties){this.properties=properties}getLabel(){return Reified.A.fromJson(this.properties.label)[0].value}getId(){return this.properties.id}getIri(){return this.properties.iri}getType(){const types=this.properties.type;for(const type of types)if((0,ModelTypeCheck.sF)(type))return type;throw new Error("unknown type")}getTypePlural(){switch(this.getType()){case"ontology":return"ontologies";case"class":return"classes";case"property":case"annotationProperty":case"dataProperty":case"objectProperty":return"properties";case"individual":return"individuals";default:throw new Error("unknown type")}}getRdfTypes(){return(0,util._j)(this.properties["http://www.w3.org/1999/02/22-rdf-syntax-ns#type"])}getName(){return this.getNames()[0]}getNames(){const labels=Reified.A.fromJson(this.properties.label);return labels&&labels.length>0?labels.map(label=>label.value):[this.getIri()]}getDescription(){const definition=Reified.A.fromJson(this.properties.definition);return definition&&definition.length>0?definition.map(def=>def.value||"").join(" "):""}getOntologyId(){return this.properties.ontologyId}getLabelForIri(id){const linkedEntities=this.properties.linkedEntities;if(linkedEntities){const label=Reified.A.fromJson(linkedEntities[id]?.label);return label[0]?.value||id}return id}getAnnotationById(id){return Reified.A.fromJson((0,util._j)(this.properties[id]))}getAnnotationTitleById(id){return this.getLabelForIri(id)}getLinkedEntities(){return new LinkedEntities.A(this.properties.linkedEntities||{})}getDepictionUrl(){let depictionUri="http://xmlns.com/foaf/0.1/depiction";return this.properties[depictionUri]&&"string"==typeof this.properties[depictionUri]?[this.properties["http://xmlns.com/foaf/0.1/depiction"]]:this.properties[depictionUri]?this.properties["http://xmlns.com/foaf/0.1/depiction"]:[]}}class OLS4Entity extends OLS4Thing{isCanonical(){return this.properties.isDefiningOntology}isDeprecated(){return this.properties["http://www.w3.org/2002/07/owl#deprecated"]}getDeprecationVersion(){return this.properties["http://www.ebi.ac.uk/efo/obsoleted_in_version"]}getDeprecationReason(){return Reified.A.fromJson(this.properties["http://purl.obolibrary.org/obo/IAO_0000231"]).concat(Reified.A.fromJson(this.properties["http://www.ebi.ac.uk/efo/reason_for_obsolescence"]))}getDeprecationReplacement(){return this.properties["http://purl.obolibrary.org/obo/IAO_0100001"]}getRelatedFrom(){return Reified.A.fromJson(this.properties.relatedFrom)}getDescriptionAsArray(){return Reified.A.fromJson(this.properties.definition)}hasDirectChildren(){return this.properties.hasDirectChildren}hasHierarchicalChildren(){return this.properties.hasHierarchicalChildren}hasChildren(){return this.hasDirectChildren()||this.hasHierarchicalChildren()}getAncestorIris(){return(0,util._j)(this.properties.ancestor)}getHierarchicalAncestorIris(){return(0,util._j)(this.properties.hierarchicalAncestor)}getSynonyms(){return Reified.A.fromJson(this.properties.synonym)}getAppearsIn(){return this.properties.appearsIn||[]}getCrossReferences(){return this.properties["http://www.geneontology.org/formats/oboInOwl#hasDbXref"]||[]}getDefinedBy(){return this.properties.definedBy||[]}getIsDefiningOntology(){return this.properties.is_defining_ontology||void 0}getShortForm(){return this.properties.curie||this.properties.shortForm}getDepictedBy(){return Reified.A.fromJson([...(0,util._j)(this.properties["http://xmlns.com/foaf/0.1/depicted_by"]||[]),...(0,util._j)(this.properties["http://xmlns.com/foaf/0.1/depiction"]||[])])}isPredicateFromInformalVocabulary(predicate){return predicate.startsWith("http://www.w3.org/2004/02/skos/core#")||predicate.startsWith("http://purl.org/dc/terms/")||predicate.startsWith("http://purl.org/dc/elements/1.1/")||predicate.startsWith("http://schema.org/")}getAnnotationPredicates(){const definitionProperties=(0,util._j)(this.properties.definitionProperty),synonymProperties=(0,util._j)(this.properties.synonymProperty),hierarchicalProperties=(0,util._j)(this.properties.hierarchicalProperty),annotationPredicates=new Set;for(const predicate of Object.keys(this.properties))if(-1!==predicate.indexOf("://")&&!predicate.startsWith("negativePropertyAssertion+")&&"http://xmlns.com/foaf/0.1/depicted_by"!==predicate&&"http://xmlns.com/foaf/0.1/depiction"!==predicate){if(!this.isPredicateFromInformalVocabulary(predicate)){const linkedEntity=this.getLinkedEntities().get(predicate);if(null!=linkedEntity&&-1!==linkedEntity.type.indexOf("objectProperty"))continue;if(null!=linkedEntity&&-1!==linkedEntity.type.indexOf("dataProperty"))continue}-1===definitionProperties.indexOf(predicate)&&-1===synonymProperties.indexOf(predicate)&&-1===hierarchicalProperties.indexOf(predicate)&&((predicate.startsWith("http://www.w3.org/2000/01/rdf-schema#")||predicate.startsWith("http://www.w3.org/1999/02/22-rdf-syntax-ns#")||predicate.startsWith("http://www.w3.org/2002/07/owl#"))&&"http://www.w3.org/2000/01/rdf-schema#comment"!==predicate&&"http://www.w3.org/2000/01/rdf-schema#seeAlso"!==predicate&&"http://www.w3.org/2002/07/owl#disjointUnionOf"!==predicate||"http://www.geneontology.org/formats/oboInOwl#inSubset"!==predicate&&"http://www.geneontology.org/formats/oboInOwl#id"!==predicate&&annotationPredicates.add(predicate))}return Array.from(annotationPredicates)}getNumHierarchicalDescendants(){return this.properties.numHierarchicalDescendants?parseInt(this.properties.numHierarchicalDescendants):0}getNumDescendants(){return this.properties.numDirectDescendants?parseInt(this.properties.numDirectDescendants):0}getHierarchicalParentReificationAxioms(parentIri){const hierarchicalParents=Reified.A.fromJson(this.properties.hierarchicalParent);for(const p of hierarchicalParents)if(p.value===parentIri)return p.getMetadata()}}class OLS4Class extends OLS4Entity{getParents(){return Reified.A.fromJson(this.properties.hierarchicalParent)}getSuperEntities(){return Reified.A.fromJson(this.properties["http://www.w3.org/2000/01/rdf-schema#subClassOf"])}getEquivalents(){return Reified.A.fromJson(this.properties["http://www.w3.org/2002/07/owl#equivalentClass"])}getDisjointWith(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#disjointWith"])}getHasKey(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#hasKey"])}getSubsets(){return(0,util._j)(this.properties["http://www.geneontology.org/formats/oboInOwl#inSubset"])||[]}}class OLS4Property extends OLS4Entity{getParents(){return Reified.A.fromJson(this.properties["http://www.w3.org/2000/01/rdf-schema#subPropertyOf"])}getSuperEntities(){return Reified.A.fromJson(this.properties["http://www.w3.org/2000/01/rdf-schema#subPropertyOf"])}getEquivalents(){return Reified.A.fromJson(this.properties["http://www.w3.org/2002/07/owl#equivalentProperty"])}getDisjointWith(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#propertyDisjointWith"])}getInverseOf(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#inverseOf"])}getDomain(){return(0,util._j)(this.properties["http://www.w3.org/2000/01/rdf-schema#domain"])}getRange(){return(0,util._j)(this.properties["http://www.w3.org/2000/01/rdf-schema#range"])}getPropertyChains(){return Reified.A.fromJson(this.properties["http://www.w3.org/2002/07/owl#propertyChainAxiom"])}}class OLS4Individual extends OLS4Entity{getParents(){return Reified.A.fromJson(this.properties.directParent)}getEquivalents(){return[]}getSuperEntities(){return Reified.A.fromJson([])}getDifferentFrom(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#differentFrom"])}getSameAs(){return(0,util._j)(this.properties["http://www.w3.org/2002/07/owl#sameAs"])}getIndividualTypes(){const rdfTypes=this.getRdfTypes();return rdfTypes&&Array.isArray(rdfTypes)?rdfTypes.filter(t=>!("http://www.w3.org/2002/07/owl#NamedIndividual"===t||"string"==typeof t&&t.startsWith("http://www.w3.org/2000/01/rdf-schema#"))):[]}}class OLS4Ontology extends OLS4Thing{getOntologyId(){return this.properties.ontologyId}getName(){const names=Reified.A.fromJson(this.properties.label||this.properties.title||"");return names[0]&&names[0].value||this.getOntologyId()}getDescription(){const descriptions=Reified.A.fromJson(this.properties.description||this.properties.definition||"");return descriptions[0]&&descriptions[0].value||""}getCreators(){return(0,util._j)(this.properties["http://purl.org/dc/elements/1.1/creator"])}getSourceFileTimestamp(){return this.properties.sourceFileTimestamp}getNumEntities(){return parseInt(this.properties.numberOfEntities)}getNumClasses(){return parseInt(this.properties.numberOfClasses)}getNumProperties(){return parseInt(this.properties.numberOfProperties)}getNumIndividuals(){return parseInt(this.properties.numberOfIndividuals)}getLogoURL(){return this.properties.depicted_by}getOntologyPurl(){return this.properties.ontology_purl}getHomepage(){return this.properties.homepage}getMailingList(){return this.properties.mailing_list}getTracker(){return this.properties.tracker}getVersionIri(){return this.properties["http://www.w3.org/2002/07/owl#versionIRI"]}getVersion(){return this.properties["http://www.w3.org/2002/07/owl#versionInfo"]}getVersionFromIri(){const versionIri=this.getVersionIri();if(!versionIri)return"";const versionFromDate=versionIri.match(/\d{4}-\d{2}-\d{2}/);if(versionFromDate&&versionFromDate.length>0)return versionFromDate[0];{const versionFromNumber=versionIri.match(/\/v[d.].*\//);return versionFromNumber?versionFromNumber[0].replaceAll("/","").replace("v",""):""}}getLoaded(){return this.properties.loaded}getAnnotationPredicates(){const annotationPredicates=new Set;for(const predicate of Object.keys(this.properties))-1!==predicate.indexOf("://")&&"http://purl.obolibrary.org/obo/IAO_0000700"!==predicate&&(predicate.startsWith("http://www.w3.org/2000/01/rdf-schema#")||predicate.startsWith("http://www.w3.org/1999/02/22-rdf-syntax-ns#")||predicate.startsWith("http://www.w3.org/2002/07/owl#")||annotationPredicates.add(predicate));return Array.from(annotationPredicates)}getPreferredRoots(){return(0,util._j)(this.properties.hasPreferredRoot)}getPreferredPrefix(){return this.properties.preferredPrefix}getLanguages(){return(0,util._j)(this.properties.language)}getImportsFrom(){return(0,util._j)(this.properties.importsFrom)}getExportsTo(){return(0,util._j)(this.properties.exportsTo)}getLicense(){return this.properties.license}getAllowDownload(){return this.properties.allowDownload}}class OLS4Ontologies{constructor(properties){this.properties=properties}getTotalOntologies(){return this.properties.length}getNumEntities(){return this.properties.reduce((total,ontology)=>total+ontology.getNumEntities(),0)}getNumClasses(){return this.properties.reduce((total,ontology)=>total+ontology.getNumClasses(),0)}getNumProperties(){return this.properties.reduce((total,ontology)=>total+ontology.getNumProperties(),0)}getNumIndividuals(){return this.properties.reduce((total,ontology)=>total+ontology.getNumIndividuals(),0)}}},"./src/stories/storyArgs.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$M:()=>ontologyIdArgType,$d:()=>keepExpansionStatesArgType,AA:()=>urlPrefixArgType,AR:()=>allowCustomTermsArgType,Bg:()=>initialItemsPerPageArgType,Bw:()=>onNavigateToDisambiguateArgType,CP:()=>colorFirstArgType,Ce:()=>showSiblingsOnInitArgType,DD:()=>onNavigateToOntologyArgType,Ev:()=>apiUrlArgType,Ey:()=>entityArgType,Gs:()=>buttonSizeArgType,KV:()=>entityTypeArgType,LU:()=>selectionChangedEventArgType,Lp:()=>defaultValueArgType,N8:()=>preselectedArgType,NN:()=>singleSelectionArgType,Om:()=>showBadgesArgType,R3:()=>parameterArgTypeHierarchy,RY:()=>thingTypeArgType,T$:()=>backendTypeArgType,UG:()=>placeholderArgType,Uh:()=>colorSecondArgType,V1:()=>initialSortFieldArgType,Vf:()=>itemsPerPageOptionsArgType,Vo:()=>initialEntriesPerPageArgType,X$:()=>queryArgType,Xh:()=>hasTitleArgType,YE:()=>iriTextArgType,Z2:()=>singleSuggestionRowArgType,ZE:()=>externalIconArgType,_5:()=>iriArgTypeHierarchy,bH:()=>entityTypeArgTypeHierarchy,bg:()=>onNavigateToEntityArgType,bp:()=>onNavigateArgType,ch:()=>parameterArgType,dg:()=>apiArgType,dw:()=>hasShortSelectedLabelArgType,eU:()=>actionsArgType,ic:()=>targetLinkArgType,j0:()=>iriArgType,kW:()=>apiKeyArgType,lK:()=>useLegacyArgType,m7:()=>titleTextArgType,o1:()=>useLegacyArgTypeHierarchy,o6:()=>onNavigateToArgType,q4:()=>classNameArgType,q6:()=>copyButtonArgType,qM:()=>hrefArgType,qR:()=>ontologyIdArgTypeHierarchy,tM:()=>ts4nfdiGatewayArgType,ty:()=>preferredRootsArgType,u4:()=>ontologyIdReqArgType,vZ:()=>descTextArgType,vc:()=>showApiSourceArgType,wO:()=>buttonTextArgType,wT:()=>colorArgType,we:()=>initialSortDirArgType,z6:()=>apiQueryArgType,zZ:()=>pageSizeOptionsArgType,zl:()=>includeObsoleteEntitiesArgType});var _model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_api_ols_OlsHierarchyApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/ols/OlsHierarchyApi.ts");const apiArgType={api:{required:!0,control:{type:"radio"},options:["https://terminology.services.base4nfdi.de/api-gateway/","https://service.tib.eu/ts4tib/api/","https://api.terminology.tib.eu/api/","https://ols3-semanticlookup.zbmed.de/ols/api/","https://semanticlookup.zbmed.de/ols/api/","https://www.ebi.ac.uk/ols4/api/"],description:"The API instance for the API call.<br><br> **[TS4NFDI:](https://base4nfdi.de/projects/ts4nfdi)**<br> TS4NFDI API Gateway: [https://terminology.services.base4nfdi.de/api-gateway/](https://terminology.services.base4nfdi.de/api-gateway/)<br><br> **[TIB:](https://www.tib.eu/de/)**<br> TIB Terminology Service (OLS3): [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)<br> TIB Terminology Service (OLS4): [https://api.terminology.tib.eu/api/](https://api.terminology.tib.eu/api/)<br><br> **[ZB MED:](https://www.zbmed.de/)**<br> SemLookP API (OLS3): [https://ols3-semanticlookup.zbmed.de/ols/api/](https://ols3-semanticlookup.zbmed.de/ols/api/)<br> SemLookP API (OLS4): [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)<br><br> **Others:**<br> EMBL-EBI API (OLS4): [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)<br><br> ",type:{summary:"string"}}},useLegacyArgType={useLegacy:{required:!1,description:"Toggle between OLS3 (legacy) and OLS4 API versions.",defaultValue:{summary:!0},control:{type:"boolean"}}},useLegacyArgTypeHierarchy={useLegacy:{required:!1,description:"\n**Only affecting OLS hierarchies**\n<br>\nToggle between OLS3 (legacy) and OLS4 API versions.\n    ",defaultValue:{summary:_api_ols_OlsHierarchyApi__WEBPACK_IMPORTED_MODULE_1__.Q.USE_LEGACY},control:{type:"boolean"}}},iriArgType={iri:{required:!0,description:"Entity IRI whose information you want to fetch.",type:{summary:"string"}}},iriArgTypeHierarchy={iri:{required:!1,description:"\nIf provided, a hierarchy for the corresponding entity will be displayed, in which this entity is highlighted.\nOtherwise, the root entities for the specified ontology and entityType will be displayed.\n    ",type:{summary:"string"}}},ontologyIdArgType={ontologyId:{required:!1,description:"Select a specific ontology by ID.",table:{defaultValue:{summary:void 0}},type:{summary:"string"}}},ontologyIdReqArgType={ontologyId:{required:!0,description:"Select a specific ontology by ID.",table:{defaultValue:{summary:void 0}},type:{summary:"string"}}},ontologyIdArgTypeHierarchy={ontologyId:{...ontologyIdArgType.ontologyId,description:"\n**Mandatory:** OntoPortal, Skosmos <br>\n**Optional:** OLS (however, it is still strongly recommended to provide)\n    "}},entityTypeArgType={entityType:{required:!1,description:"Sets the type of the entity whose information you want to fetch.",control:{type:"radio"},table:{type:{summary:`${_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Op.join(" | ")}`}},options:["term","class","property","individual","INVALID STRING",""]}},entityTypeArgTypeHierarchy={entityType:{...entityTypeArgType.entityType,description:"\n**Mandatory:** OntoPortal <br>\n**Optional:** OLS <br>\n**Unused:** Skosmos <br>\n    "}},selectionChangedEventArgType={selectionChangedEvent:{required:!0,action:"selectionChangedEvent",description:"A method that is called once the set of selection changes.",type:{summary:"(selectedOptions: {        label: string;        iri?: string;        ontology_name?: string;        type?: string;    }[]) => void;"},control:"text"}},placeholderArgType={placeholder:{required:!1,description:"Placeholder to show if no user input nor selection is performed.",type:{summary:"string"}}},preselectedArgType={preselected:{required:!1,description:"Pass pre-selected values.",type:{summary:"{ label?: string; iri?: string }[]"}}},parameterArgType={parameter:{required:!1,type:{summary:"string"},defaultValue:{summary:void 0},description:'\n\nAdditional parameters to pass to the API.\n\nThese parameters can be used to filter the search results. Each parameter can be combined with the special character **&**. The values of a parameter key can be combined with a comma (**,**). The following keys can be used:\n\n| Parameter      | Description |\n|---------------|------------|\n| **ontology**  | Restrict a search to a set of ontologies, e.g., `ontology=uberon,mesh`. |\n| **type**      | Restrict a search to an entity type, one of `{class, property, individual, ontology}`. |\n| **slim**      | Restrict a search to a particular set of slims by name. |\n| **fieldList** | Specify the fields to return. Defaults are **iri, label, short_form, obo_id, ontology_name, ontology_prefix, description, type**. |\n| **obsoletes** | Set to `true` to include obsolete terms in the results. |\n| **local**     | Set to `true` to only return terms that are in a defining ontology, e.g., only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced. |\n| **childrenOf** | Restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only). Example: `childrenOf` the Snomed CT term *Myocardial infarction (disorder)* (→ heart attack) results in returning direct subclasses such as *ST elevation myocardial infarction (STEMI)* or sub-subclasses such as *STEMI of anterior wall*. The search term *Coronary artery occlusion* will return, among other things, *Acute myocardial infarction due to left coronary artery occlusion* because it\'s a child of *Acute myocardial infarction*, which is a child of *Myocardial infarction*. |\n| **allChildrenOf** | Similar to `childrenOf`, but includes hierarchical/transitive properties like *"part of"* or *"develops from"*. Example: `allChildrenOf` the Snomed CT term *Myocardial infarction (disorder)* (→ heart attack) results in returning direct subclasses, sub-subclasses, and all other descendant terms. The search term *Coronary artery occlusion* will return, among other things, *Coronary occlusion* because it is a causative agent of *Myocardial infarction*. |\n| **rows**      | Set results per page. |\n| **start**     | Set the results page number. |\n| **lang**      | Set the language for the response, e.g., **`en`**, **`de`**, **`fr`**. The default value is **`en`**. |\n| **collection** | Restrict a search to a terminology subset, e.g., `collection=nfdi4health`. |\n| **database**  | Restrict a search via the API Gateway to specific terminology software stacks. Choose from **`ols`**, **`ontoportal`**, or **`skosmos`**. |\n    '}},parameterArgTypeHierarchy={parameter:{required:!1,type:{summary:"string"},defaultValue:{summary:void 0},description:"\n**Only affecting OLS and Skosmos hierarchies** \n<br>\nAdditional parameters can be provided in URL format.\nThese are applied directly to the hierarchy queries.\n\n| Parameter      | Description |\n|---------------|------------|\n| **lang**      | Set the language for the response, e.g., **`en`**, **`de`**, **`fr`**. The default value is **`en`**. |\n    "}},hasShortSelectedLabelArgType={hasShortSelectedLabel:{required:!1,description:"If true, only the selected label of the entity is displayed. If false, the ontology and the entity short form is displayed behind the label. Default is true.",defaultValue:{summary:!1},type:{summary:"boolean"}}},allowCustomTermsArgType={allowCustomTerms:{required:!0,description:"If true, custom terms that are not found in any ontology can be added.",defaultValue:{summary:!1},type:{summary:"boolean"}}},singleSelectionArgType={singleSelection:{required:!0,description:"If true, only one concept can be selected at once.",defaultValue:{summary:!1},type:{summary:"boolean"}}},singleSuggestionRowArgType={singleSelection:{required:!1,description:"Display options in a compact format without descriptions - when this mode is activated, not all information is shown in order to save space.",type:{summary:"boolean"}}},ts4nfdiGatewayArgType={singleSelection:{required:!1,description:"Use the TS4NFDI Gateway API",defaultValue:{summary:!1},type:{summary:"boolean"}}},showApiSourceArgType={singleSelection:{required:!1,description:"Whether to show the api source in the result list or not. Default is true. Only when the API gateway is selected.",defaultValue:{summary:!0},type:{summary:"boolean"}}},hasTitleArgType={hasTitle:{required:!1,description:"Show title.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},showBadgesArgType={showBadges:{required:!1,description:"If true, badges linking to defining ontologies are shown.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},apiQueryArgType={apiQuery:{required:!0,description:"The API query whose response JSON should be displayed on click.",type:{summary:"string"}}},buttonTextArgType={buttonText:{required:!0,description:"The text displayed on the button.",type:{summary:"string"}}},buttonSizeArgType={buttonSize:{required:!1,description:"Size of the button.",defaultValue:{summary:"m"},table:{type:{summary:"s | m"}},control:{type:"radio"},options:["s","m"]}},initialEntriesPerPageArgType={initialEntriesPerPage:{required:!1,description:"Initial number of entries displayed per page.",type:{summary:"number"},defaultValue:{summary:10},control:"number"}},pageSizeOptionsArgType={pageSizeOptions:{required:!1,description:"Possible values for number of entries displayed per page.",type:{summary:"number[]"},defaultValue:{summary:[10,25,50,100]},control:"array"}},initialSortFieldArgType={initialSortField:{required:!1,description:"Column the table is sorted by initially.",type:{summary:"string"},defaultValue:{summary:"config.preferredPrefix"},control:{type:"radio"},options:["config.title","config.preferredPrefix","config.loaded"]}},initialSortDirArgType={initialSortDir:{required:!1,description:"Initial sorting direction.",type:{summary:"string"},defaultValue:{summary:"asc"},table:{type:{summary:"asc | desc"}},control:{type:"radio"},options:["ascending","descending"]}},targetLinkArgType={targetLink:{required:!1,description:"Possible hyperlink to a corresponding terminology in a Resource Name cell. Set this if you want a hyperlink to the terminology overview of your terminology service. Leave it blank if your application isn't a terminology service.",type:{summary:"string"},control:"text"}},actionsArgType={actions:{required:!1,description:"Pass actions to each item in the table.",type:{summary:"Array<Action<OlsResource>>"}}},queryArgType={query:{required:!0,description:"The search query.",type:{summary:"string"}}},initialItemsPerPageArgType={initialItemsPerPage:{required:!1,description:"Initial number of items displayed per page.",type:{summary:"number"},defaultValue:{summary:10},control:"number"}},itemsPerPageOptionsArgType={itemsPerPageOptions:{required:!1,description:"Possible values for number of items displayed per page.",type:{summary:"number[]"},defaultValue:{summary:[10,25,50,100]},control:"array"}},colorFirstArgType={colorFirst:{required:!1,description:"Color of the first badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["primary","accent","success","warning","danger","ghost","text","subdued","#00FFFF"]}},colorSecondArgType={colorSecond:{required:!1,description:"Color of the second badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["primary","accent","success","warning","danger","ghost","text","subdued","#00FFFF"]}},colorArgType={color:{required:!1,description:"Color of the text, names, hex or rgb",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["default","subdued","success","accent","danger","warning","ghost","#00FFFF","rgb(255,0,255)"]}},descTextArgType={descText:{required:!1,description:"Set your own text manually that overwrites the text fetched from the API.",type:{summary:"string"}}},thingTypeArgType={thingType:{description:"Sets the type of the object whose description you want to fetch. Accepts 'ontology', 'term', 'class', 'property', or 'individual'.",table:{type:{summary:`${_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Z6.join(" | ")}`}},control:{type:"radio"},options:["ontology","term","class","property","individual","","INVALID STRING"]}},iriTextArgType={iriText:{required:!1,description:"Set your own text manually, which will show as a clickable link instead of the IRI.",type:{summary:"string"}}},externalIconArgType={externalIcon:{required:!1,options:[!0,!1],defaultValue:!0,description:"Indicates that the target is external and needs an icon.",type:{summary:"boolean"}}},urlPrefixArgType={urlPrefix:{required:!1,type:{summary:"string"},description:"The iri should get appended to the urlPrefix or not. When provided, the iri gets encoded and appended to the urlPrefix."}},copyButtonArgType={copyButton:{required:!1,options:["left","right","none"],defaultValue:!1,control:{type:"radio"},description:"Position the copy button on the right or left side of the iri. Leave it none for hiding it."}},titleTextArgType={titleText:{required:!1,description:"Set your own text manually that overwrites the text fetched from the API.",type:{summary:"string"}}},defaultValueArgType={defaultValue:{required:!1,description:"Set the default text shown if the API fails to retrieve one.",control:"text",type:{summary:"string"}}},classNameArgType={className:{required:!1,description:"CSS class for styling. Set no value or an empty string for the TS4NFDI styling. Set 'none' for the basic Elastic UI styling (recommended for apps based on Elastic UI).",control:"text",type:{summary:"string"},table:{defaultValue:{summary:"ts4nfdi-title-style"}}}},onNavigateToEntityArgType={onNavigateToEntity:{required:!1,type:{summary:"string"},action:"onNavigateToEntityArgType",description:"This function is called every time an entity link is clicked.",control:{type:"radio"},options:["Console message","Navigate to EBI page"],mapping:{"Console message":(ontologyId,entityType,entity)=>{console.log("Triggered onNavigateToEntity()"+(entityType?` for ${entityType||"entity"}`:"")+(entity&&entity.label?` "${entity.label}"`:"")+(entity&&entity.iri?` (iri="${entity.iri}")`:"")+".")},"Navigate to EBI page":(ontologyId,entityType,entity)=>{entity&&entity.iri&&entityType?window.open("https://www.ebi.ac.uk/ols4/ontologies/"+ontologyId+"/"+new Map([["term","classes"],["class","classes"],["individual","individuals"],["property","properties"],["dataProperty","properties"],["objectProperty","properties"],["annotationProperty","properties"]]).get(entityType)+"/"+encodeURIComponent(encodeURIComponent(entity.iri)),"_top"):window.open("https://www.ebi.ac.uk/ols4/ontologies/"+ontologyId,"_top")}}}},onNavigateToOntologyArgType={onNavigateToOntology:{required:!1,type:{summary:"string"},action:"onNavigateToOntologyArgType",description:"This function is called every time a badge linking to an entity in its defining ontology is clicked.",control:{type:"radio"},options:["Console message","Navigate to EBI page"],mapping:{"Console message":(ontologyId,entityType,entity)=>{console.log("Triggered onNavigateToOntology()"+(entityType?` for ${entityType||"entity"}`:"")+(entity&&entity.label?` "${entity.label}"`:"")+(entity&&entity.iri?` (iri="${entity.iri}")`:"")+` for ontologyId "${ontologyId}".`)},"Navigate to EBI page":(ontologyId,entityType,entity)=>{entity&&entity.iri&&entityType?window.open("https://www.ebi.ac.uk/ols4/ontologies/"+ontologyId+"/"+new Map([["term","classes"],["class","classes"],["individual","individuals"],["property","properties"],["dataProperty","properties"],["objectProperty","properties"],["annotationProperty","properties"]]).get(entityType)+"/"+encodeURIComponent(encodeURIComponent(entity.iri)),"_top"):window.open("https://www.ebi.ac.uk/ols4/ontologies/"+ontologyId,"_top")}}}},onNavigateToDisambiguateArgType={onNavigateToDisambiguate:{required:!1,type:{summary:"string"},action:"onNavigateToDisambiguateArgType",description:"This function is called every time a disambiguation badge is clicked.",control:{type:"radio"},options:["Console message","Navigate to EBI page"],mapping:{"Console message":(entityType,entity)=>{console.log("Triggered onNavigateToDisambiguate()"+(entityType?` for ${entityType||"entity"}`:"")+(entity&&entity.label?` "${entity.label}"`:"")+(entity&&entity.iri?` (iri="${entity.iri}")`:"")+".")},"Navigate to EBI page":(entityType,entity)=>{window.open(`https://www.ebi.ac.uk/ols4/search?q=${entity&&entity.label?entity.label:""}&exactMatch=true&lang=en`,"_top")}}}},onNavigateArgType={onNavigate:{required:!1,type:{summary:"string"},action:"onNavigateArgType",description:"This function is called every time an ontology link is clicked.",control:{type:"radio"},options:["Console message","Navigate to EBI page"],mapping:{"Console message":ontologyId=>{console.log("Triggered onNavigate() with ontologyId = "+ontologyId)},"Navigate to EBI page":ontologyId=>{window.open("https://www.ebi.ac.uk/ols4/ontologies/"+ontologyId)}}}},onNavigateToArgType={onNavigateTo:{required:!1,description:"This function is called if the title is clicked. Cannot be combined with `href`. Either use this custom function `onNavigateTo` (e.g. for navigation to the source terminology service) OR directly provide a link with `href`",type:{summary:"void"},control:"text"}},hrefArgType={href:{required:!1,description:"Creates a hyperlink. Specify the URL of the page to which the link will go.",type:{summary:"string"},control:"text"}},apiKeyArgType={apiKey:{required:!1,description:"\nOnly required for OntoPortal hierarchies.\nAn API key is required to access the OntoPortal API. To obtain an API key for the BioPortal REST API, see its [wiki page](https://www.bioontology.org/wiki/BioPortal_Help#Getting_an_API_key).\n    ",type:{summary:"string"},control:"text"}},apiUrlArgType={apiUrl:{required:!0,description:"\nThe API URL for the API call.\n    ",type:{summary:"string"},control:"text"}},backendTypeArgType={backendType:{required:!1,description:"\nThe backend key from which to request `{ols, ontoportal, skosmos}`. Default is `ols`\n    ",control:{type:"radio"},options:["ols","skosmos","ontoportal"],table:{defaultValue:{summary:"ols"}}}},includeObsoleteEntitiesArgType={includeObsoleteEntities:{required:!1,description:"\n**Only affecting OLS hierarchies**\n<br>\nToggle whether to include entities marked as obsolete by the API.\n    ",table:{defaultValue:{summary:_api_ols_OlsHierarchyApi__WEBPACK_IMPORTED_MODULE_1__.Q.INCLUDE_OBSOLETE_ENTITIES}}}},preferredRootsArgType={preferredRoots:{required:!1,description:"\n**Only affecting OLS hierarchies**\n<br>\nWhen displaying an ontology's root hierarchy (i.e. no iri provided), all entities without parent entities are displayed by default.\nIf `preferredRoots==true`, only the entities specifically marked as preferred root entity by the API are shown.\n    ",table:{defaultValue:{summary:_api_ols_OlsHierarchyApi__WEBPACK_IMPORTED_MODULE_1__.Q.PREFERRED_ROOTS}}}},keepExpansionStatesArgType={keepExpansionStates:{required:!1,description:"\nIf true, the expanded subtree of a node which gets closed stays expanded on re-expansion of this node.\nOtherwise, if a node is closed, only the direct children will be shown on re-expansion.\n    ",table:{defaultValue:{summary:_api_ols_OlsHierarchyApi__WEBPACK_IMPORTED_MODULE_1__.Q.KEEP_EXPANSION_STATES}}}},showSiblingsOnInitArgType={showSiblingsOnInit:{required:!1,description:"\nIf false, only the entity with specified iri and its ancestors are displayed in a hierarchy.\nIf true, the siblings of every entity mentioned above is displayed as well (NOTE: this might, but does not have to, need more queries to the API).\n    ",table:{defaultValue:{summary:_api_ols_OlsHierarchyApi__WEBPACK_IMPORTED_MODULE_1__.Q.SHOW_SIBLINGS_ON_INIT}}}},entityArgType={entity:{required:!1,description:"Input data object."}}},"./src/utils/olsApiUtils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{DF:()=>buildOtherParams,Gc:()=>buildParamsForSelect,Iy:()=>buildParamsForSuggest,Yt:()=>isTop,cH:()=>buildParamsForGet,fS:()=>buildParamsForEntities,ol:()=>buildParamsForSearch,pX:()=>check_for_errors});const DEFAULT_SEARCH_RESULTS_PER_PAGE=10;function buildParamsForGet(paginationParams,sortingParams,contentParams,parameter){return sortingParams?{...paginationParams,sort:`${sortingParams.sortField},${sortingParams.sortDir}`,...contentParams,...buildOtherParams(parameter)}:{...paginationParams,...contentParams,...buildOtherParams(parameter)}}function buildPaginationParams(paginationParams){const params={rows:paginationParams?.size};return paginationParams?.page&&(paginationParams.size?params.start=(+paginationParams.page*+paginationParams.size).toString():params.start=(+paginationParams.page*DEFAULT_SEARCH_RESULTS_PER_PAGE).toString()),params}function buildParamsForSearch(queryParams,paginationParams,contentParams,parameter,ts4nfdiGateway){const params={exact:queryParams.exactMatch,obsoletes:queryParams.showObsoleteTerms};return ts4nfdiGateway?params.query=queryParams.query:params.q=queryParams.query,queryParams.groupByIri&&(params.groupField=queryParams.groupByIri),queryParams.types&&(params.type=queryParams.types),queryParams.ontology&&(params.ontology=queryParams.ontology),{...params,...buildPaginationParams(paginationParams),...contentParams,...buildOtherParams(parameter)}}function buildOtherParams(parameter){const result={};if(parameter){parameter.split("&").forEach(param=>{const key=param.split("=")[0],value=param.split("=")[1];result[key]=value})}return result}function buildParamsForEntities(parameter){const result={};if(parameter){parameter.split("&").forEach(param=>{const key=param.split("=")[0],value=param.split("=")[1],finalKey="ontology"===key?"ontologyId":key;"ontologyId"!==finalKey&&"type"!==finalKey||(result[finalKey]=value)})}return result}function buildParamsForSelect(queryParams,paginationParams,contentParams,parameters){return{...{q:queryParams.query},...buildPaginationParams(paginationParams),...contentParams,...buildOtherParams(parameters)}}function buildParamsForSuggest(queryParams,paginationParams,contentParams,parameters){return{...{q:queryParams.query},...buildPaginationParams(paginationParams),...contentParams,...buildOtherParams(parameters)}}function isTop(iri){return"http://www.w3.org/2002/07/owl#Thing"===iri||"http://www.w3.org/2002/07/owl#TopObjectProperty"===iri}function check_for_errors(response){if(response.error)throw Error(response.status+" "+response.error+" - "+response.message+" - "+response.exception+" at "+response.path);if(void 0!==response.page&&0===response.page.totalElements)throw Error("Response contains 0 elements");return response}}}]);