"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[37784],{"./src/components/widgets/OntologyInfoWidget/OntologyInfoWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>OntologyInfoWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=(__webpack_require__("./node_modules/@elastic/eui/es/components/spacer/spacer.js"),__webpack_require__("./node_modules/@elastic/eui/es/components/card/card.js")),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/util.ts"),_model_StructureRendering__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/model/StructureRendering.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const DEFAULT_HAS_TITLE=!0;function OntologyInfoWidget(props){const{ontologyId,api,parameter,hasTitle=DEFAULT_HAS_TITLE,useLegacy,showBadges,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),onNavigates={onNavigateToEntity:props.onNavigateToEntity,onNavigateToOntology:props.onNavigateToOntology,onNavigateToDisambiguate:props.onNavigateToDisambiguate},{data:ontology,isLoading:isLoadingOntology,isSuccess:isSuccessOntology,isError:isErrorOntology,error:errorOntology}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["ontologyInfo",props],(()=>olsApi.getOntologyObject(ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.Gm,{title:hasTitle?"Ontology Information":"",layout:"horizontal",style:props.width?{width:props.width}:{},children:[isLoadingOntology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.V,{size:"s"}),isSuccessOntology&&void 0!==ontology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.b,{...rest,children:[function getOntologyIriSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:(ontology.getIri()||ontology.getOntologyPurl())&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Ontology IRI:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("a",{id:"ontologyIri",href:ontology.getIri()||ontology.getOntologyPurl(),children:ontology.getIri()||ontology.getOntologyPurl()})})]})})}(ontology),function getVersionIriSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getVersionIri()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Version IRI:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("a",{id:"versionIri",href:ontology.getVersionIri(),children:ontology.getVersionIri()})})]})})}(ontology),function getLastLoadSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getSourceFileTimestamp()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Last loaded:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:new Date(ontology.getSourceFileTimestamp()).toString()})]})})}(ontology),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[function getOntologyIdSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getOntologyId()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Ontology ID:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:ontology.getOntologyId()})]})})}(ontology),function getVersionSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getVersion()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Version:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:ontology.getVersion()})]})})}(ontology),function getNumClassesSection(ontology){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:ontology.getNumClasses()&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("b",{children:"Number of classes:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:ontology.getNumClasses().toLocaleString()})]})})}(ontology)]}),function getAnnotationSection(thing){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:thing.getAnnotationPredicates().map((annoKey=>{const annos=thing.getAnnotationById(annoKey);return 0==annos.length?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.a,{grow:!1,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("b",{children:[(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.ZH)((0,_app_util__WEBPACK_IMPORTED_MODULE_3__.s0)((0,_app_util__WEBPACK_IMPORTED_MODULE_3__.Mv)(thing.getAnnotationTitleById(annoKey)))),":"]}),annos.length>1?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("ul",{children:annos.map((annotation=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("li",{id:annotation.value,children:(0,_model_StructureRendering__WEBPACK_IMPORTED_MODULE_4__.ij)(thing,annotation,showBadges,onNavigates)},(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.DU)())))}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("p",{children:(0,_model_StructureRendering__WEBPACK_IMPORTED_MODULE_4__.ij)(thing,annos[0],showBadges,onNavigates)},(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.DU)())]},annoKey)}))})}(ontology)]}),isErrorOntology&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.lr)(errorOntology,"information")})]})})}function WrappedOntologyInfoWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_12__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(OntologyInfoWidget,{ontologyId:props.ontologyId,api:props.api,parameter:props.parameter,useLegacy:props.useLegacy,showBadges:props.showBadges,hasTitle:props.hasTitle,onNavigateToEntity:props.onNavigateToEntity,onNavigateToOntology:props.onNavigateToOntology,onNavigateToDisambiguate:props.onNavigateToDisambiguate})})})}WrappedOntologyInfoWidget.displayName="WrappedOntologyInfoWidget",OntologyInfoWidget.__docgenInfo={description:"",methods:[],displayName:"OntologyInfoWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)\n- **TS4NFDI Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)"},ontologyId:{required:!0,tsType:{name:"string"},description:"Select a specific ontology by id"},hasTitle:{required:!1,tsType:{name:"boolean"},description:"Show title, default is true"},showBadges:{required:!1,tsType:{name:"boolean"},description:"If true (default), entity badges linking to their defining ontologies are shown."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are <b>{iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</b></td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>lang</td><td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b>.</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td></tr>\n <tr><td>database</td><td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},width:{required:!1,tsType:{name:"number"},description:"The container width for a target widget render function. Example: EuiCard for OntologyInfoWidget"},onNavigateToEntity:{required:!1,tsType:{name:"signature",type:"function",raw:"(ontologyId: string, entityType?: string, entity?: EntityData) => void",signature:{arguments:[{type:{name:"string"},name:"ontologyId"},{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time an entity link is clicked\n@param ontologyId obtains the ontologyId of the current ontology\n@param entityType obtains the entityType of the clicked entity\n@param entity.iri obtains the iri of the clicked entity\n@param entity.label obtains the label of the clicked entity\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"},onNavigateToOntology:{required:!1,tsType:{name:"signature",type:"function",raw:"(ontologyId: string, entityType?: string, entity?: EntityData) => void",signature:{arguments:[{type:{name:"string"},name:"ontologyId"},{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time an entity link is clicked\n@param ontologyId obtains the ontologyId of the clicked badge\n@param entityType obtains the entityType of the clicked badge\n@param entity.iri obtains the iri of the clicked badge (can be empty)\n@param entity.label obtains the label of the clicked badge\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"},onNavigateToDisambiguate:{required:!1,tsType:{name:"signature",type:"function",raw:"(entityType: string, entity?: EntityData) => void",signature:{arguments:[{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time a disambiguation badge is clicked\n@param entityType obtains the entityType of the clicked badge\n@param entity.iri obtains the iri of the clicked badge (can be empty)\n@param entity.label obtains the label of the clicked badge\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"}}}}}]);