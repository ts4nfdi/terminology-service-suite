"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[35763],{"./node_modules/@elastic/eui/es/components/loading/loading_spinner.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{V:()=>EuiLoadingSpinner});__webpack_require__("./node_modules/react/index.js");var _templateObject,prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),hooks=__webpack_require__("./node_modules/@elastic/eui/es/services/theme/hooks.js"),i18n=__webpack_require__("./node_modules/@elastic/eui/es/components/i18n/i18n.js"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),animations=__webpack_require__("./node_modules/@elastic/eui/es/global_styling/variables/animations.js");var _loadingSpinner=(0,emotion_react_browser_esm.i7)(_templateObject||(_templateObject=function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(359deg);\n  }\n"]))),spinnerSizes_s="m",spinnerSizes_m="base",spinnerSizes_l="l",spinnerSizes_xl="xl",spinnerSizes_xxl="xxl",spinnerColorsCSS=function spinnerColorsCSS(border,highlight){return"\n    border-color: ".concat(highlight," ").concat(border," ").concat(border," ").concat(border,";\n  ")},_excluded=["size","className","aria-label","color"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var EuiLoadingSpinner=function EuiLoadingSpinner(_ref){var _ref$size=_ref.size,size=void 0===_ref$size?"m":_ref$size,className=_ref.className,ariaLabel=_ref["aria-label"],color=_ref.color,rest=_objectWithoutProperties(_ref,_excluded),styles=function euiLoadingSpinnerStyles(_ref,color){var euiTheme=_ref.euiTheme;return{euiLoadingSpinner:(0,emotion_react_browser_esm.AH)("flex-shrink:0;display:inline-block;border-radius:50%;border:",euiTheme.border.thick,";",spinnerColorsCSS((null==color?void 0:color.border)||euiTheme.colors.lightShade,(null==color?void 0:color.highlight)||euiTheme.colors.primary),";",animations.VT,"{animation:",_loadingSpinner," 0.6s infinite linear;};label:euiLoadingSpinner;"),s:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_s],";height:",euiTheme.size[spinnerSizes_s],";border-width:calc(",euiTheme.border.width.thin," * 1.5);;label:s;"),m:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_m],";height:",euiTheme.size[spinnerSizes_m],";border-width:calc(",euiTheme.border.width.thin," * 1.5);;label:m;"),l:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_l],";height:",euiTheme.size[spinnerSizes_l],";;label:l;"),xl:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_xl],";height:",euiTheme.size[spinnerSizes_xl],";;label:xl;"),xxl:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_xxl],";height:",euiTheme.size[spinnerSizes_xxl],";;label:xxl;")}}((0,hooks.g)(),color),cssStyles=[styles.euiLoadingSpinner,styles[size]],classes=classnames_default()("euiLoadingSpinner",className),defaultLabel=function useLoadingAriaLabel(){return(0,i18n.j)("euiLoadingStrings.ariaLabel","Loading")}();return(0,emotion_react_browser_esm.Y)("span",_extends({className:classes,css:cssStyles,role:"progressbar","aria-label":ariaLabel||defaultLabel},rest))};EuiLoadingSpinner.propTypes={className:prop_types_default().string,"aria-label":prop_types_default().string,"data-test-subj":prop_types_default().string,size:prop_types_default().any,color:prop_types_default().shape({border:prop_types_default().any,highlight:prop_types_default().any})}},"./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefiningOntologyUnavailable:()=>DefiningOntologyUnavailable,SelectingDefiningOntology:()=>SelectingDefiningOntology,TitleWidget1:()=>TitleWidget1,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TitleWidget_stories});var TitleWidget=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx");const TitleWidgetStoryArgTypes={api:{control:{type:"radio"},options:["https://www.ebi.ac.uk/ols4/api/","https://semanticlookup.zbmed.de/ols/api/","https://semanticlookup.zbmed.de/api/","https://service.tib.eu/ts4tib/api/"]},ontologyId:{description:"Ontology ID from where the object title/label should be taken."},thingType:{description:"Sets the type of the object whose title/label you want to fetch. Accepts 'ontology', 'term', 'class', 'property', or 'individual'.",table:{type:{summary:`${__webpack_require__("./src/model/ModelTypeCheck.ts").Z6.join(" | ")}`}},control:{type:"radio"},options:["ontology","term","class","property","individual","","INVALID STRING"]},iri:{description:"Object IRI whose label you want to fetch. For ontologies this is ignored, since the 'ontologyId' arg is sufficient."},titleText:{},default_value:{control:"text"},parameter:{type:{required:!1}}},TitleWidget1={args:{iri:"http://purl.obolibrary.org/obo/NCIT_C2985",api:"https://semanticlookup.zbmed.de/api/",ontologyId:"ncit",thingType:"term"}},SelectingDefiningOntology={args:{api:"https://www.ebi.ac.uk/ols4/api/",iri:"http://purl.obolibrary.org/obo/IAO_0000631",thingType:"term",parameter:""}},DefiningOntologyUnavailable={args:{api:"https://www.ebi.ac.uk/ols4/api/",iri:"http://identifiers.org/uniprot/Q9VAM9",thingType:"term",parameter:""}},TitleWidget_stories={title:"TitleWidget",component:TitleWidget.N,parameters:{layout:"centered"},argTypes:TitleWidgetStoryArgTypes,args:{parameter:"collection=nfdi4health",useLegacy:!0,ontologyId:"",thingType:"",titleText:""}},__namedExportsOrder=["TitleWidget1","SelectingDefiningOntology","DefiningOntologyUnavailable"]},"./src/components/widgets/MetadataWidget/TitleWidget/TitlePresentation.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>TitlePresentation});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function TitlePresentation(props){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_2__.b,{children:props.titleText||props.title})}TitlePresentation.displayName="TitlePresentation",TitlePresentation.__docgenInfo={description:"",methods:[],displayName:"TitlePresentation",props:{titleText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},title:{required:!1,tsType:{name:"string"},description:""}}}},"./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>TitleWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_TitlePresentation__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitlePresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const NO_TITLE="No title available.";function TitleWidget(props){const{iri,ontologyId,api,titleText,thingType,parameter,useLegacy,default_value}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["metadata",api,parameter,thingType,iri,ontologyId,useLegacy],(async()=>olsApi.getThingObject(iri,thingType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{size:"s"}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_TitlePresentation__WEBPACK_IMPORTED_MODULE_5__.B,{title:titleText||((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__.io)(data)?data.getName():data.getLabel())||default_value||NO_TITLE}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.lr)(error,"title")})]})}function WrappedTitleWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TitleWidget,{api:props.api,thingType:props.thingType,iri:props.iri,ontologyId:props.ontologyId,titleText:props.titleText,parameter:props.parameter,useLegacy:props.useLegacy,default_value:props.default_value})})})}WrappedTitleWidget.displayName="WrappedTitleWidget",TitleWidget.__docgenInfo={description:"",methods:[],displayName:"TitleWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},thingType:{required:!1,tsType:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]"},description:"Sets the type of the thing whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!1,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},titleText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},default_value:{required:!1,tsType:{name:"string"},description:"Set the default text shown if the API fails to retrieve one."}}}}}]);