"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[19031],{"./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/HierarchyWidgetOLS.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{HierarchyWidgetOLS1:()=>HierarchyWidgetOLS1,__namedExportsOrder:()=>__namedExportsOrder,default:()=>HierarchyWidgetOLS_stories});var HierarchyWidgetOLS=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/HierarchyWidgetOLS.tsx"),globals=__webpack_require__("./src/app/globals.ts"),storyArgs=__webpack_require__("./src/stories/storyArgs.ts"),dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");const HierarchyWidgetOLSStoryArgTypes={...storyArgs.dg,...storyArgs.$M,...storyArgs.j0,...storyArgs.KV,...storyArgs.DD,...storyArgs.bg},HierarchyWidgetOLSStoryArgs={api:"",iri:"",ontologyId:"",entityType:"",onNavigateToEntity:(0,dist.XI)("onNavigateToEntity"),onNavigateToOntology:(0,dist.XI)("onNavigateToOntology")},HierarchyWidgetOLS1={args:{iri:"http://www.ebi.ac.uk/efo/EFO_0000400",api:globals.wS,ontologyId:"efo",entityType:"class"}},HierarchyWidgetOLS_stories={title:"HierarchyWidgetOLS",component:HierarchyWidgetOLS.c,parameters:{layout:"centered",docs:{description:{component:"The HierarchyWidgetOLSOLS is a component designed to visualize and interact with hierarchical data structures of ontology hierarchies, specifically tailored for the OLS4 API to retrieve and display hierarchical relationships between terms within a given ontology."}}},argTypes:HierarchyWidgetOLSStoryArgTypes,args:HierarchyWidgetOLSStoryArgs},__namedExportsOrder=["HierarchyWidgetOLS1"]},"./src/app/globals.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$R:()=>TIB_API_ENDPOINT,Fv:()=>ZBMED_OLS_API_ENDPOINT,Kb:()=>GATEWAY_API_ENDPOINT,gA:()=>ZBMED_API_ENDPOINT,o6:()=>FINTO_V1_API_ENDPOINT,wS:()=>EBI_API_ENDPOINT});const EBI_API_ENDPOINT="https://www.ebi.ac.uk/ols4/api/",ZBMED_OLS_API_ENDPOINT="https://semanticlookup.zbmed.de/ols/api/",ZBMED_API_ENDPOINT="https://semanticlookup.zbmed.de/api/",TIB_API_ENDPOINT="https://service.tib.eu/ts4tib/api/",GATEWAY_API_ENDPOINT="https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/",FINTO_V1_API_ENDPOINT="https://api.finto.fi/rest/v1"},"./src/app/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{DU:()=>randomString,DW:()=>pluralizeType,FQ:()=>getFrontEndApi,LB:()=>getUseLegacy,Mv:()=>deCamelCase,ZH:()=>capitalize,_j:()=>asArray,fd:()=>isHexColor,lr:()=>getErrorMessageToDisplay,nY:()=>isRgbColor,ng:()=>getEntityTypeName,s0:()=>deUnderscore,vq:()=>getEntityInOntologySuffix,zv:()=>isEuiLinkColor});var _model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/ModelTypeCheck.ts");function asArray(obj){return Array.isArray(obj)?obj:obj?[obj]:[]}const DEFAULT_USE_LEGACY=!0;function getUseLegacy(useLegacy){return void 0!==useLegacy?useLegacy:DEFAULT_USE_LEGACY}function getEntityTypeName(type){return"term"===type?"class":type}function capitalize(str){return str.charAt(0).toUpperCase()+str.slice(1)}function deCamelCase(str){return capitalize(str).split(/(?=[A-Z][a-z])/).join(" ")}function deUnderscore(str){return capitalize(str).replace("_"," ")}function getFrontEndApi(api){return api.replace(/\/api\/?$/,"/")}function getEntityInOntologySuffix(ontologyId,entityTypeArray,iri,useLegacy){return`ontologies/${ontologyId}/${pluralizeType(asArray(entityTypeArray),useLegacy)}`+(null!=iri?`/${encodeURIComponent(encodeURIComponent(iri))}`:"")}function pluralizeType(typeArray,useLegacy){for(const type of asArray(typeArray))if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.sF)(type)){if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.yU)(type))return getUseLegacy(useLegacy)?"terms":"classes";if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.V$)(type))return"properties";if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Td)(type))return"individuals";if((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Ps)(type))return"ontologies"}throw new Error("No thingType found to pluralize in provided typeArray.")}function randomString(){return(Math.random()*Math.pow(2,54)).toString(36)}function isHexColor(str){return/^#[0-9A-F]{6}$/i.test(str)}function isRgbColor(str){return/^(rgb|hsl)(a?)[(]\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*(?:,\s*([\d.]+)\s*)?[)]$/i.test(str)}function isEuiLinkColor(str){return["primary","subdued","success","accent","danger","warning","text","ghost"].includes(str)}function getErrorMessageToDisplay(error){let messagePlaceholder=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"information";return"Response contains 0 elements"===error.message?"No elements found":`No ${messagePlaceholder} available`}},"./src/model/ModelTypeCheck.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D4:()=>isClass,Op:()=>entityTypeNames,Ps:()=>isOntologyTypeName,Qg:()=>isEntity,Td:()=>isIndividualTypeName,UP:()=>ontologyTypeNames,V$:()=>isPropertyTypeName,Z6:()=>thingTypeNames,h0:()=>classTypeNames,iV:()=>isIndividual,io:()=>isOntology,p2:()=>isEntityTypeName,sF:()=>isThingTypeName,uM:()=>isProperty,yU:()=>isClassTypeName});const classTypeNames=["class","term"],propertyTypeNames=["property"],individualTypeNames=["individual"],ontologyTypeNames=["ontology"],entityTypeNames=[...classTypeNames,...individualTypeNames,...propertyTypeNames],thingTypeNames=[...entityTypeNames,...ontologyTypeNames];function isClassTypeName(type){return classTypeNames.includes(type)}function isPropertyTypeName(type){return propertyTypeNames.includes(type)}function isIndividualTypeName(type){return individualTypeNames.includes(type)}function isOntologyTypeName(type){return ontologyTypeNames.includes(type)}function isEntityTypeName(type){return entityTypeNames.includes(type)}function isThingTypeName(type){return thingTypeNames.includes(type)}function isClass(thing){return isClassTypeName(thing.getType())}function isProperty(thing){return isPropertyTypeName(thing.getType())}function isIndividual(thing){return isIndividualTypeName(thing.getType())}function isEntity(thing){return isEntityTypeName(thing.getType())}function isOntology(thing){return isOntologyTypeName(thing.getType())}},"./src/stories/storyArgs.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$M:()=>ontologyIdArgType,AA:()=>urlPrefixArgType,AR:()=>allowCustomTermsArgType,Bg:()=>initialItemsPerPageArgType,CP:()=>colorFirstArgType,DD:()=>onNavigateToOntologyArgType,Gs:()=>buttonSizeArgType,KV:()=>entityTypeArgType,LU:()=>selectionChangedEventArgType,Lp:()=>defaultValueArgType,N8:()=>preselectedArgType,NN:()=>singleSelectionArgType,Om:()=>showBadgesArgType,RY:()=>thingTypeArgType,UG:()=>placeholderArgType,Uh:()=>colorSecondArgType,V1:()=>initialSortFieldArgType,Vf:()=>itemsPerPageOptionsArgType,Vo:()=>initialEntriesPerPageArgType,X$:()=>queryArgType,Xh:()=>hasTitleArgType,YE:()=>iriTextArgType,ZE:()=>externalIconArgType,bH:()=>ontologyIdReqArgType,bg:()=>onNavigateToEntityArgType,ch:()=>parameterArgType,dg:()=>apiArgType,dw:()=>hasShortSelectedLabelArgType,eU:()=>actionsArgType,fG:()=>ts4nfdiGateway,hn:()=>singleSuggestionRow,ic:()=>targetLinkArgType,j0:()=>iriArgType,lK:()=>useLegacyArgType,m7:()=>titleTextArgType,q4:()=>classNameArgType,q6:()=>copyButtonArgType,vZ:()=>descTextArgType,wO:()=>buttonTextArgType,wT:()=>colorArgType,we:()=>initialSortDirArgType,z6:()=>apiQueryArgType,zZ:()=>pageSizeOptionsArgType});var _model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/ModelTypeCheck.ts");const apiArgType={api:{required:!0,control:{type:"radio"},options:["https://www.ebi.ac.uk/ols4/api/","https://semanticlookup.zbmed.de/ols/api/","https://semanticlookup.zbmed.de/api/","https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/","https://service.tib.eu/ts4tib/api/","https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/"],description:"The API instance for the API call.<br> **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)<br> **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)<br> **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)<br> **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)<br> **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)<br> **TS4NFDI API Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)<br> ",type:{summary:"string"}}},useLegacyArgType={useLegacy:{required:!1,description:"Toggle between OLS3 (legacy) and OLS4 API versions.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},iriArgType={iri:{required:!0,description:"Entity IRI whose information you want to fetch.",type:{summary:"string"}}},ontologyIdArgType={ontologyId:{required:!1,description:"Select a specific ontology by ID.",table:{defaultValue:{summary:void 0}},type:{summary:"string"}}},ontologyIdReqArgType={ontologyId:{required:!0,description:"Select a specific ontology by ID.",table:{defaultValue:{summary:void 0}},type:{summary:"string"}}},entityTypeArgType={entityType:{required:!1,description:"Sets the type of the entity whose information you want to fetch.",control:{type:"radio"},table:{type:{summary:`${_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Op.join(" | ")}`}},options:["term","class","property","individual","INVALID STRING",""]}},selectionChangedEventArgType={selectionChangedEvent:{required:!0,action:"selectionChangedEvent",description:"A method that is called once the set of selection changes.",type:{summary:"(selectedOptions: {        label: string;        iri?: string;        ontology_name?: string;        type?: string;    }[]) => void;"},control:"text"}},placeholderArgType={placeholder:{required:!1,description:"Placeholder to show if no user input nor selection is performed.",type:{summary:"string"}}},preselectedArgType={preselected:{required:!1,description:"Pass pre-selected values.",type:{summary:"{ label?: string; iri?: string }[]"}}},parameterArgType={parameter:{required:!1,type:{summary:"string"},defaultValue:{summary:void 0},description:"Additional parameters to pass to the API.<br><br>\n      This parameters can be used to filter the search results. Each parameter can be combined via the special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign <i><b>,</b></i>. The following keys could be used:<br><br>\n      <table>\n        <thead>\n          <tr>\n            <th>Parameter</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>ontology</td>\n            <td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td>\n          </tr>\n          <tr>\n            <td>type</td>\n            <td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td>\n          </tr>\n          <tr>\n            <td>slim</td>\n            <td>Restrict a search to a particular set of slims by name</td>\n          </tr>\n          <tr>\n            <td>fieldList</td>\n            <td>Specify the fields to return. Defaults are <b>iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type</b></td>\n          </tr>\n          <tr>\n            <td>obsoletes</td>\n            <td>Set to true to include obsolete terms in the results</td>\n          </tr>\n          <tr>\n            <td>local</td>\n            <td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td>\n          </tr>\n          <tr>\n            <td>childrenOf</td>\n            <td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td>\n          </tr>\n          <tr>\n            <td>allChildrenOf</td>\n            <td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td>\n          </tr>\n          <tr>\n            <td>rows</td>\n            <td>Set results per page</td>\n          </tr>\n          <tr>\n            <td>start</td>\n            <td>Set the results page number</td>\n          </tr>\n          <tr>\n            <td>lang</td>\n            <td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b></td>\n          </tr>\n          <tr>\n            <td>collection</td>\n            <td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td>\n          </tr>\n          <tr>\n            <td>database</td>\n            <td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td>\n          </tr>\n        </tbody>\n      </table>"}},hasShortSelectedLabelArgType={hasShortSelectedLabel:{required:!1,description:"If true, only the selected label of the entity is displayed. If false, the ontology and the entity short form is displayed behind the label. Default is true.",defaultValue:{summary:!1},type:{summary:"boolean"}}},allowCustomTermsArgType={allowCustomTerms:{required:!0,description:"If true, custom terms that are not found in any ontology can be added.",defaultValue:{summary:!1},type:{summary:"boolean"}}},singleSelectionArgType={singleSelection:{required:!0,description:"If true, only one concept can be selected at once.",defaultValue:{summary:!1},type:{summary:"boolean"}}},singleSuggestionRow={singleSelection:{required:!1,description:"Display options in a compact format without descriptions - when this mode is activated, not all information is shown in order to save space.",type:{summary:"boolean"}}},ts4nfdiGateway={singleSelection:{required:!1,description:"Use the TS4NFDI Gateway API",defaultValue:{summary:!1},type:{summary:"boolean"}}},hasTitleArgType={hasTitle:{required:!1,description:"Show title.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},showBadgesArgType={showBadges:{required:!1,description:"If true, badges linking to defining ontologies are shown.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},apiQueryArgType={apiQuery:{required:!0,description:"The API query whose response JSON should be displayed on click.",type:{summary:"string"}}},buttonTextArgType={buttonText:{required:!0,description:"The text displayed on the button.",type:{summary:"string"}}},buttonSizeArgType={buttonSize:{required:!1,description:"Size of the button.",defaultValue:{summary:"m"},table:{type:{summary:"s | m"}},control:{type:"radio"},options:["s","m"]}},initialEntriesPerPageArgType={initialEntriesPerPage:{required:!1,description:"Initial number of entries displayed per page.",type:{summary:"number"},defaultValue:{summary:10},control:"number"}},pageSizeOptionsArgType={pageSizeOptions:{required:!1,description:"Possible values for number of entries displayed per page.",type:{summary:"number[]"},defaultValue:{summary:[10,25,50,100]},control:"array"}},initialSortFieldArgType={initialSortField:{required:!1,description:"Column the table is sorted by initially.",type:{summary:"string"},defaultValue:{summary:"config.preferredPrefix"},control:{type:"radio"},options:["config.title","config.preferredPrefix","config.loaded"]}},initialSortDirArgType={initialSortDir:{required:!1,description:"Initial sorting direction.",type:{summary:"string"},defaultValue:{summary:"asc"},table:{type:{summary:"asc | desc"}},control:{type:"radio"},options:["ascending","descending"]}},targetLinkArgType={targetLink:{required:!1,description:"Possible hyperlink to a corresponding terminology in a Resource Name cell. Set this if you want a hyperlink to the terminology overview of your terminology service. Leave it blank if your application isn't a terminology service.",type:{summary:"string"},control:"text"}},actionsArgType={actions:{required:!1,description:"Pass actions to each item in the table.",type:{summary:"Array<Action<OlsResource>>"}}},queryArgType={query:{required:!0,description:"The search query.",type:{summary:"string"}}},initialItemsPerPageArgType={initialItemsPerPage:{required:!1,description:"Initial number of items displayed per page.",type:{summary:"number"},defaultValue:{summary:10},control:"number"}},itemsPerPageOptionsArgType={itemsPerPageOptions:{required:!1,description:"Possible values for number of items displayed per page.",type:{summary:"number[]"},defaultValue:{summary:[10,25,50,100]},control:"array"}},colorFirstArgType={colorFirst:{required:!1,description:"Color of the first badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["primary","accent","success","warning","danger","ghost","text","subdued","#00FFFF"]}},colorSecondArgType={colorSecond:{required:!1,description:"Color of the second badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["primary","accent","success","warning","danger","ghost","text","subdued","#00FFFF"]}},colorArgType={color:{required:!1,description:"Color of the text, names, hex or rgb",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["default","subdued","success","accent","danger","warning","ghost","#00FFFF","rgb(255,0,255)"]}},descTextArgType={descText:{required:!1,description:"Set your own text manually that overwrites the text fetched from the API.",type:{summary:"string"}}},thingTypeArgType={thingType:{description:"Sets the type of the object whose description you want to fetch. Accepts 'ontology', 'term', 'class', 'property', or 'individual'.",table:{type:{summary:`${_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Z6.join(" | ")}`}},control:{type:"radio"},options:["ontology","term","class","property","individual","","INVALID STRING"]}},iriTextArgType={iriText:{required:!1,description:"Set your own text manually, which will show as a clickable link instead of the IRI.",type:{summary:"string"}}},externalIconArgType={externalIcon:{required:!1,options:[!0,!1],defaultValue:!0,description:"Indicates that the target is external and needs an icon.",type:{summary:"boolean"}}},urlPrefixArgType={urlPrefix:{required:!1,type:{summary:"string"},description:"The iri should get appended to the urlPrefix or not. When provided, the iri gets encoded and appended to the urlPrefix."}},copyButtonArgType={copyButton:{required:!1,options:[!0,!1],defaultValue:!1,type:{summary:"boolean"},description:"If true, a copy button is shown next to the link."}},titleTextArgType={titleText:{required:!1,description:"Set your own text manually that overwrites the text fetched from the API.",type:{summary:"string"}}},defaultValueArgType={defaultValue:{required:!1,description:"Set the default text shown if the API fails to retrieve one.",control:"text",type:{summary:"string"}}},classNameArgType={defaultValue:{required:!1,description:"CSS class for styling.",control:"text",type:{summary:"string"}}},onNavigateToEntityArgType={onNavigateToEntity:{required:!1,type:{summary:"(ontologyId: string, entityType: string, iri: string) => void"},action:"onNavigateToEntityArgType",description:"This function is called every time an entity link is clicked.",control:"text"}},onNavigateToOntologyArgType={onNavigateToOntology:{required:!1,type:{summary:"(ontologyId: string, entityType: string, iri: string) => void"},action:"onNavigateToOntologyArgType",description:"This function is called every time a badge linking to an entity in its defining ontology is clicked.",control:"text"}}}}]);