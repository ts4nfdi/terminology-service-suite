"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[35763],{"./node_modules/@elastic/eui/es/components/loading/loading_spinner.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{V:()=>EuiLoadingSpinner});__webpack_require__("./node_modules/react/index.js");var _templateObject,prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),hooks=__webpack_require__("./node_modules/@elastic/eui/es/services/theme/hooks.js"),i18n=__webpack_require__("./node_modules/@elastic/eui/es/components/i18n/i18n.js"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),animations=__webpack_require__("./node_modules/@elastic/eui/es/global_styling/variables/animations.js");var _loadingSpinner=(0,emotion_react_browser_esm.i7)(_templateObject||(_templateObject=function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(359deg);\n  }\n"]))),spinnerSizes_s="m",spinnerSizes_m="base",spinnerSizes_l="l",spinnerSizes_xl="xl",spinnerSizes_xxl="xxl",spinnerColorsCSS=function spinnerColorsCSS(border,highlight){return"\n    border-color: ".concat(highlight," ").concat(border," ").concat(border," ").concat(border,";\n  ")},_excluded=["size","className","aria-label","color"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var EuiLoadingSpinner=function EuiLoadingSpinner(_ref){var _ref$size=_ref.size,size=void 0===_ref$size?"m":_ref$size,className=_ref.className,ariaLabel=_ref["aria-label"],color=_ref.color,rest=_objectWithoutProperties(_ref,_excluded),styles=function euiLoadingSpinnerStyles(_ref,color){var euiTheme=_ref.euiTheme;return{euiLoadingSpinner:(0,emotion_react_browser_esm.AH)("flex-shrink:0;display:inline-block;border-radius:50%;border:",euiTheme.border.thick,";",spinnerColorsCSS((null==color?void 0:color.border)||euiTheme.colors.lightShade,(null==color?void 0:color.highlight)||euiTheme.colors.primary),";",animations.VT,"{animation:",_loadingSpinner," 0.6s infinite linear;};label:euiLoadingSpinner;"),s:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_s],";height:",euiTheme.size[spinnerSizes_s],";border-width:calc(",euiTheme.border.width.thin," * 1.5);;label:s;"),m:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_m],";height:",euiTheme.size[spinnerSizes_m],";border-width:calc(",euiTheme.border.width.thin," * 1.5);;label:m;"),l:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_l],";height:",euiTheme.size[spinnerSizes_l],";;label:l;"),xl:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_xl],";height:",euiTheme.size[spinnerSizes_xl],";;label:xl;"),xxl:(0,emotion_react_browser_esm.AH)("width:",euiTheme.size[spinnerSizes_xxl],";height:",euiTheme.size[spinnerSizes_xxl],";;label:xxl;")}}((0,hooks.g)(),color),cssStyles=[styles.euiLoadingSpinner,styles[size]],classes=classnames_default()("euiLoadingSpinner",className),defaultLabel=function useLoadingAriaLabel(){return(0,i18n.j)("euiLoadingStrings.ariaLabel","Loading")}();return(0,emotion_react_browser_esm.Y)("span",_extends({className:classes,css:cssStyles,role:"progressbar","aria-label":ariaLabel||defaultLabel},rest))};EuiLoadingSpinner.propTypes={className:prop_types_default().string,"aria-label":prop_types_default().string,"data-test-subj":prop_types_default().string,size:prop_types_default().any,color:prop_types_default().shape({border:prop_types_default().any,highlight:prop_types_default().any})}},"./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefiningOntologyUnavailable:()=>DefiningOntologyUnavailable,SelectingDefiningOntology:()=>SelectingDefiningOntology,TitleWidgetDefault:()=>TitleWidgetDefault,TitleWidgetWithStyles:()=>TitleWidgetWithStyles,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TitleWidget_stories});var TitleWidget=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx"),globals=__webpack_require__("./src/app/globals.ts"),storyArgs=__webpack_require__("./src/stories/storyArgs.ts"),injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),titleStyles=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./src/style/titleStyles.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(titleStyles.A,options);titleStyles.A&&titleStyles.A.locals&&titleStyles.A.locals;const TitleWidgetStoryArgTypes={...storyArgs.dg,...storyArgs.$M,...storyArgs.RY,...storyArgs.j0,...storyArgs.ch,...storyArgs.m7,...storyArgs.Lp,...storyArgs.lK,...storyArgs.q4},TitleWidgetDefault={args:{iri:"http://purl.obolibrary.org/obo/NCIT_C2985",api:globals.gA,ontologyId:"ncit",thingType:"term"}},SelectingDefiningOntology={args:{api:globals.wS,iri:"http://purl.obolibrary.org/obo/IAO_0000631",thingType:"term",parameter:""}},DefiningOntologyUnavailable={args:{api:globals.wS,iri:"http://identifiers.org/uniprot/Q9VAM9",thingType:"term",parameter:""}},TitleWidgetWithStyles={args:{iri:"http://purl.obolibrary.org/obo/NCIT_C2985",api:globals.gA,ontologyId:"ncit",thingType:"term",className:"title-styles"}},TitleWidget_stories={title:"TitleWidget",component:TitleWidget.N,parameters:{layout:"centered"},argTypes:TitleWidgetStoryArgTypes,args:{api:"",useLegacy:!0,iri:"",ontologyId:"",thingType:"",titleText:"",defaultValue:"",className:"",parameter:"collection=nfdi4health"}},__namedExportsOrder=["TitleWidgetDefault","SelectingDefiningOntology","DefiningOntologyUnavailable","TitleWidgetWithStyles"]},"./src/components/widgets/MetadataWidget/TitleWidget/TitlePresentation.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>TitlePresentation});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function TitlePresentation(props){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_2__.b,{className:props.className,children:props.titleText||props.title})}TitlePresentation.displayName="TitlePresentation",TitlePresentation.__docgenInfo={description:"",methods:[],displayName:"TitlePresentation",props:{titleText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},title:{required:!1,tsType:{name:"string"},description:""},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"}}}},"./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>TitleWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_TitlePresentation__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitlePresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const NO_TITLE="No title available.";function TitleWidget(props){const{iri,ontologyId,api,titleText,thingType,parameter,useLegacy,defaultValue,className}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),finalClassName=className||"default-class",{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["metadata",api,parameter,thingType,iri,ontologyId,useLegacy],(async()=>olsApi.getThingObject(iri,thingType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{size:"s"}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_TitlePresentation__WEBPACK_IMPORTED_MODULE_5__.B,{className:finalClassName,title:titleText||((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__.io)(data)?data.getName():data.getLabel())||defaultValue||NO_TITLE}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.lr)(error,"title")})]})}function WrappedTitleWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TitleWidget,{api:props.api,thingType:props.thingType,iri:props.iri,ontologyId:props.ontologyId,titleText:props.titleText,parameter:props.parameter,useLegacy:props.useLegacy,defaultValue:props.defaultValue,className:props.className})})})}WrappedTitleWidget.displayName="WrappedTitleWidget",TitleWidget.__docgenInfo={description:"",methods:[],displayName:"TitleWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)\n- **TS4NFDI Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)"},thingType:{required:!1,tsType:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]"},description:"Sets the type of the thing whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!1,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are <b>{iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</b></td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>lang</td><td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b>.</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td></tr>\n <tr><td>database</td><td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},titleText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},defaultValue:{required:!1,tsType:{name:"string"},description:"Set the default text shown if the API fails to retrieve one."},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"}}}},"./src/stories/storyArgs.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$M:()=>ontologyIdArgType,AA:()=>urlPrefixArgType,AR:()=>allowCustomTermsArgType,Bg:()=>initialItemsPerPageArgType,CP:()=>colorFirstArgType,DD:()=>onNavigateToOntologyArgType,Gs:()=>buttonSizeArgType,KV:()=>entityTypeArgType,LU:()=>selectionChangedEventArgType,Lp:()=>defaultValueArgType,N8:()=>preselectedArgType,NN:()=>singleSelectionArgType,Om:()=>showBadgesArgType,RY:()=>thingTypeArgType,UG:()=>placeholderArgType,Uh:()=>colorSecondArgType,V1:()=>initialSortFieldArgType,Vf:()=>itemsPerPageOptionsArgType,Vo:()=>initialEntriesPerPageArgType,X$:()=>queryArgType,Xh:()=>hasTitleArgType,YE:()=>iriTextArgType,ZE:()=>externalIconArgType,bH:()=>ontologyIdReqArgType,bg:()=>onNavigateToEntityArgType,ch:()=>parameterArgType,dg:()=>apiArgType,dw:()=>hasShortSelectedLabelArgType,eU:()=>actionsArgType,fG:()=>ts4nfdiGateway,hn:()=>singleSuggestionRow,ic:()=>targetLinkArgType,j0:()=>iriArgType,lK:()=>useLegacyArgType,m7:()=>titleTextArgType,q4:()=>classNameArgType,q6:()=>copyButtonArgType,vZ:()=>descTextArgType,wO:()=>buttonTextArgType,wT:()=>colorArgType,we:()=>initialSortDirArgType,z6:()=>apiQueryArgType,zZ:()=>pageSizeOptionsArgType});var _model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/model/ModelTypeCheck.ts");const apiArgType={api:{required:!0,control:{type:"radio"},options:["https://www.ebi.ac.uk/ols4/api/","https://semanticlookup.zbmed.de/ols/api/","https://semanticlookup.zbmed.de/api/","https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/","https://service.tib.eu/ts4tib/api/","https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/"],description:"The API instance for the API call.<br> **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)<br> **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)<br> **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)<br> **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)<br> **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)<br> **TS4NFDI API Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)<br> ",type:{summary:"string"}}},useLegacyArgType={useLegacy:{required:!1,description:"Toggle between OLS3 (legacy) and OLS4 API versions.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},iriArgType={iri:{required:!0,description:"Entity IRI whose information you want to fetch.",type:{summary:"string"}}},ontologyIdArgType={ontologyId:{required:!1,description:"Select a specific ontology by ID.",table:{defaultValue:{summary:void 0}},type:{summary:"string"}}},ontologyIdReqArgType={ontologyId:{required:!0,description:"Select a specific ontology by ID.",table:{defaultValue:{summary:void 0}},type:{summary:"string"}}},entityTypeArgType={entityType:{required:!1,description:"Sets the type of the entity whose information you want to fetch.",control:{type:"radio"},table:{type:{summary:`${_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Op.join(" | ")}`}},options:["term","class","property","individual","INVALID STRING",""]}},selectionChangedEventArgType={selectionChangedEvent:{required:!0,action:"selectionChangedEvent",description:"A method that is called once the set of selection changes.",type:{summary:"(selectedOptions: {        label: string;        iri?: string;        ontology_name?: string;        type?: string;    }[]) => void;"},control:"text"}},placeholderArgType={placeholder:{required:!1,description:"Placeholder to show if no user input nor selection is performed.",type:{summary:"string"}}},preselectedArgType={preselected:{required:!1,description:"Pass pre-selected values.",type:{summary:"{ label?: string; iri?: string }[]"}}},parameterArgType={parameter:{required:!1,type:{summary:"string"},defaultValue:{summary:void 0},description:"Additional parameters to pass to the API.<br><br>\n      This parameters can be used to filter the search results. Each parameter can be combined via the special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign <i><b>,</b></i>. The following keys could be used:<br><br>\n      <table>\n        <thead>\n          <tr>\n            <th>Parameter</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>ontology</td>\n            <td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td>\n          </tr>\n          <tr>\n            <td>type</td>\n            <td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td>\n          </tr>\n          <tr>\n            <td>slim</td>\n            <td>Restrict a search to a particular set of slims by name</td>\n          </tr>\n          <tr>\n            <td>fieldList</td>\n            <td>Specify the fields to return. Defaults are <b>iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type</b></td>\n          </tr>\n          <tr>\n            <td>obsoletes</td>\n            <td>Set to true to include obsolete terms in the results</td>\n          </tr>\n          <tr>\n            <td>local</td>\n            <td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td>\n          </tr>\n          <tr>\n            <td>childrenOf</td>\n            <td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td>\n          </tr>\n          <tr>\n            <td>allChildrenOf</td>\n            <td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td>\n          </tr>\n          <tr>\n            <td>rows</td>\n            <td>Set results per page</td>\n          </tr>\n          <tr>\n            <td>start</td>\n            <td>Set the results page number</td>\n          </tr>\n          <tr>\n            <td>lang</td>\n            <td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b></td>\n          </tr>\n          <tr>\n            <td>collection</td>\n            <td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td>\n          </tr>\n          <tr>\n            <td>database</td>\n            <td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td>\n          </tr>\n        </tbody>\n      </table>"}},hasShortSelectedLabelArgType={hasShortSelectedLabel:{required:!1,description:"If true, only the selected label of the entity is displayed. If false, the ontology and the entity short form is displayed behind the label. Default is true.",defaultValue:{summary:!1},type:{summary:"boolean"}}},allowCustomTermsArgType={allowCustomTerms:{required:!0,description:"If true, custom terms that are not found in any ontology can be added.",defaultValue:{summary:!1},type:{summary:"boolean"}}},singleSelectionArgType={singleSelection:{required:!0,description:"If true, only one concept can be selected at once.",defaultValue:{summary:!1},type:{summary:"boolean"}}},singleSuggestionRow={singleSelection:{required:!1,description:"Display options in a compact format without descriptions - when this mode is activated, not all information is shown in order to save space.",type:{summary:"boolean"}}},ts4nfdiGateway={singleSelection:{required:!1,description:"Use the TS4NFDI Gateway API",defaultValue:{summary:!1},type:{summary:"boolean"}}},hasTitleArgType={hasTitle:{required:!1,description:"Show title.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},showBadgesArgType={showBadges:{required:!1,description:"If true, badges linking to defining ontologies are shown.",table:{defaultValue:{summary:!0}},type:{summary:"boolean"}}},apiQueryArgType={apiQuery:{required:!0,description:"The API query whose response JSON should be displayed on click.",type:{summary:"string"}}},buttonTextArgType={buttonText:{required:!0,description:"The text displayed on the button.",type:{summary:"string"}}},buttonSizeArgType={buttonSize:{required:!1,description:"Size of the button.",defaultValue:{summary:"m"},table:{type:{summary:"s | m"}},control:{type:"radio"},options:["s","m"]}},initialEntriesPerPageArgType={initialEntriesPerPage:{required:!1,description:"Initial number of entries displayed per page.",type:{summary:"number"},defaultValue:{summary:10},control:"number"}},pageSizeOptionsArgType={pageSizeOptions:{required:!1,description:"Possible values for number of entries displayed per page.",type:{summary:"number[]"},defaultValue:{summary:[10,25,50,100]},control:"array"}},initialSortFieldArgType={initialSortField:{required:!1,description:"Column the table is sorted by initially.",type:{summary:"string"},defaultValue:{summary:"config.preferredPrefix"},control:{type:"radio"},options:["config.title","config.preferredPrefix","config.loaded"]}},initialSortDirArgType={initialSortDir:{required:!1,description:"Initial sorting direction.",type:{summary:"string"},defaultValue:{summary:"asc"},table:{type:{summary:"asc | desc"}},control:{type:"radio"},options:["ascending","descending"]}},targetLinkArgType={targetLink:{required:!1,description:"Possible hyperlink to a corresponding terminology in a Resource Name cell. Set this if you want a hyperlink to the terminology overview of your terminology service. Leave it blank if your application isn't a terminology service.",type:{summary:"string"},control:"text"}},actionsArgType={actions:{required:!1,description:"Pass actions to each item in the table.",type:{summary:"Array<Action<OlsResource>>"}}},queryArgType={query:{required:!0,description:"The search query.",type:{summary:"string"}}},initialItemsPerPageArgType={initialItemsPerPage:{required:!1,description:"Initial number of items displayed per page.",type:{summary:"number"},defaultValue:{summary:10},control:"number"}},itemsPerPageOptionsArgType={itemsPerPageOptions:{required:!1,description:"Possible values for number of items displayed per page.",type:{summary:"number[]"},defaultValue:{summary:[10,25,50,100]},control:"array"}},colorFirstArgType={colorFirst:{required:!1,description:"Color of the first badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["primary","accent","success","warning","danger","ghost","text","subdued","#00FFFF"]}},colorSecondArgType={colorSecond:{required:!1,description:"Color of the second badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["primary","accent","success","warning","danger","ghost","text","subdued","#00FFFF"]}},colorArgType={color:{required:!1,description:"Color of the text, names, hex or rgb",table:{type:{summary:"EuiLinkColor | string"}},control:{type:"radio"},options:["default","subdued","success","accent","danger","warning","ghost","#00FFFF","rgb(255,0,255)"]}},descTextArgType={descText:{required:!1,description:"Set your own text manually that overwrites the text fetched from the API.",type:{summary:"string"}}},thingTypeArgType={thingType:{description:"Sets the type of the object whose description you want to fetch. Accepts 'ontology', 'term', 'class', 'property', or 'individual'.",table:{type:{summary:`${_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_0__.Z6.join(" | ")}`}},control:{type:"radio"},options:["ontology","term","class","property","individual","","INVALID STRING"]}},iriTextArgType={iriText:{required:!1,description:"Set your own text manually, which will show as a clickable link instead of the IRI.",type:{summary:"string"}}},externalIconArgType={externalIcon:{required:!1,options:[!0,!1],defaultValue:!0,description:"Indicates that the target is external and needs an icon.",type:{summary:"boolean"}}},urlPrefixArgType={urlPrefix:{required:!1,type:{summary:"string"},description:"The iri should get appended to the urlPrefix or not. When provided, the iri gets encoded and appended to the urlPrefix."}},copyButtonArgType={copyButton:{required:!1,options:[!0,!1],defaultValue:!1,type:{summary:"boolean"},description:"If true, a copy button is shown next to the link."}},titleTextArgType={titleText:{required:!1,description:"Set your own text manually that overwrites the text fetched from the API.",type:{summary:"string"}}},defaultValueArgType={defaultValue:{required:!1,description:"Set the default text shown if the API fails to retrieve one.",control:"text",type:{summary:"string"}}},classNameArgType={defaultValue:{required:!1,description:"CSS class for styling.",control:"text",type:{summary:"string"}}},onNavigateToEntityArgType={onNavigateToEntity:{required:!1,type:{summary:"(ontologyId: string, entityType: string, iri: string) => void"},action:"onNavigateToEntityArgType",description:"This function is called every time an entity link is clicked.",control:"text"}},onNavigateToOntologyArgType={onNavigateToOntology:{required:!1,type:{summary:"(ontologyId: string, entityType: string, iri: string) => void"},action:"onNavigateToOntologyArgType",description:"This function is called every time a badge linking to an entity in its defining ontology is clicked.",control:"text"}}},"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./src/style/titleStyles.css":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,".title-styles {\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/style/titleStyles.css"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB",sourcesContent:[".title-styles {\n  font-weight: bold;\n}"],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___}}]);