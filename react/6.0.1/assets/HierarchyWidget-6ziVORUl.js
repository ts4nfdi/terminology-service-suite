"use client";var G=Object.defineProperty;var J=(r,e,n)=>e in r?G(r,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):r[e]=n;var k=(r,e,n)=>J(r,typeof e!="symbol"?e+"":e,n);import{r as N,b as o}from"./iframe-wk1mlfou.js";import{aY as W,aZ as D,aX as v,a_ as j,a$ as F,aM as O,a8 as S,b0 as H,b1 as X,r as Y}from"./widgetDescriptions-BxPwfV77.js";import{u as z}from"./useQuery-wZqAoEXu.js";/* empty css                  */import{E as Q}from"./panel-ChRfI_wq.js";import{E as V}from"./text-KgSp1nfd.js";import{E as $}from"./loading_spinner-CozkQlPq.js";import{E as q}from"./icon-CHdTk0Cq.js";class L{static fromTopConcept(e){return{iri:e.uri,label:e.label,hasChildren:e.hasChildren,parents:[]}}static fromHierarchyResult(e){return{iri:e.uri,label:e.prefLabel,hasChildren:e.narrower!=null&&e.narrower.length>0,parents:v.fromJson(e.broader)}}static fromPrefAndUriAndChildren(e,n){return{iri:e.uri,label:e.prefLabel,hasChildren:e.hasChildren,parents:v.fromJson(n)}}static fromLabelAndUriAndChildren(e,n){return{iri:e.uri,label:e.label,hasChildren:e.hasChildren,parents:v.fromJson(n)}}}class R{constructor(e){k(this,"axiosInstance");this.axiosInstance=W.create({baseURL:e,headers:{Accept:"application/json"}})}async makeCall(e,n){return(await this.axiosInstance.get(e,n)).data}async buildHierarchyWithIri(e){var C,s;const{iri:n,ontologyId:d,showSiblingsOnInit:p,parameter:b}=e;if(!d)throw Error("ontologyId has to be specified for SKOS API.");const y=[],m=new Map,f=new Map,w=new Set,g=new Set;if(n){const t=await this.makeCall(`/${d}/hierarchy`,{params:{uri:n,lang:"en",format:"application/json",...D(b)}}).then(a=>Object.keys(a.broaderTransitive).map(l=>a.broaderTransitive[l]));for(const a of t){const l=L.fromHierarchyResult(a);f.set(l.iri,l),a.top&&y.push(l.iri),p||g.add(l.iri)}for(const a of t)if(a.narrower!=null){const l=[];for(const c of a.narrower){let i=f.get(c.uri);i==null?(i=L.fromLabelAndUriAndChildren(c,[a.uri]),f.set(i.iri,i)):(C=i==null?void 0:i.parents)!=null&&C.map(T=>T.value).includes(a.uri)||i!=null&&i.parents&&((s=i==null?void 0:i.parents)==null||s.push(...v.fromJson(a.uri))),l.push(i)}l.sort((c,i)=>(c.label||c.iri).localeCompare(i.label||i.iri)),m.set(a.uri,l.map(c=>({childIri:c.iri}))),w.add(a.uri)}}else{const t=await this.makeCall(`/${d}/topConcepts`,{params:{lang:"en",format:"application/json",...D(b)}}).then(a=>a.topconcepts);for(const a of t)y.push(a.uri)}function I(t,a){a.add(t.iri);const l=new F(t),c=m.get(t.iri)||[];if(p)for(const i of c){if(a.has(i.childIri)){console.error(`Cyclic tree at entity "${i.childIri}".`);continue}const T=f.get(i.childIri);T!=null&&l.addChild(I(T,a))}else for(const i of c){if(a.has(i.childIri)){console.error(`Cyclic tree at entity "${i.childIri}".`);continue}const T=f.get(i.childIri);T!=null&&g.has(i.childIri)&&l.addChild(I(T,a))}return l.loadedChildren.length>0&&(l.expanded=!0),a.delete(t.iri),l}const x=new Set,E=y.map(t=>I(f.get(t),x)).sort((t,a)=>(t.entityData.label||t.entityData.iri).localeCompare(a.entityData.label||a.entityData.iri));return new j({parentChildRelations:m,entitiesData:f,allChildrenPresent:w,roots:E,api:new R(this.axiosInstance.getUri()),ontologyId:d,mainEntityIri:n,keepExpansionStates:e.keepExpansionStates,parameter:b})}async loadHierarchyChildren(e){const{nodeToExpand:n,ontologyId:d,parameter:p}=e;return(await this.makeCall(`/${d}/children`,{params:{uri:n.entityData.iri,lang:"en",format:"application/json",...D(p)}})).narrower.map(y=>L.fromPrefAndUriAndChildren(y,[n.entityData.iri]))}}function _(r){return{iri:r["@id"],label:r.prefLabel,hasChildren:r.hasChildren,parents:[]}}class A{constructor(e,n){k(this,"axiosInstance");k(this,"apiKey");this.axiosInstance=W.create({baseURL:e,headers:{Accept:"application/json"}}),this.apiKey=n,this.axiosInstance.interceptors.request.use(d=>(d.params=d.params||{},d.params.apikey=this.apiKey,d.params.format="json",d))}async makeCall(e,n){return(await this.axiosInstance.get(e,n)).data}async buildHierarchyWithIri(e){const{iri:n,ontologyId:d,entityType:p,showSiblingsOnInit:b}=e;if(!d)throw Error("ontologyId has to be specified for OntoPortal API.");if(!p)throw Error("entityType has to be specified for OntoPortal API.");const y=[],m=new Map,f=new Map,w=new Set,g=new Set;function I(s){if(m.set(s["@id"],_(s)),s.hasChildren&&s.children.length>0){f.set(s["@id"],s.children.map(t=>({childIri:t["@id"]}))),w.add(s["@id"]),g.add(s["@id"]);for(const t of s.children)I(t)}}if(n){const s=await this.makeCall(`/ontologies/${d.toUpperCase()}/${O(p,!1)}/${encodeURIComponent(n)}/tree`,{params:{include:"@id,prefLabel,hasChildren,children",language:"EN"}});for(const t of s)y.push(t["@id"]),g.add(t["@id"]),I(t);g.add(n)}else{const s=await this.makeCall(`/ontologies/${d.toUpperCase()}/${O(p,!1)}/roots`,{params:{include:"@id,prefLabel,hasChildren",language:"EN"}});for(const t of s)y.push(t["@id"]),g.add(t["@id"])}function x(s,t){t.add(s.iri);const a=new F(s),l=f.get(s.iri)||[];if(b)for(const c of l){if(t.has(c.childIri)){console.error(`Cyclic tree at entity "${c.childIri}".`);continue}a.addChild(x(m.get(c.childIri),t))}else for(const c of l){if(t.has(c.childIri)){console.error(`Cyclic tree at entity "${c.childIri}".`);continue}g.has(c.childIri)&&a.addChild(x(m.get(c.childIri),t))}return a.loadedChildren.length>0&&(a.expanded=!0),t.delete(s.iri),a}const E=new Set,C=y.map(s=>x(m.get(s),E)).sort((s,t)=>(s.entityData.label||s.entityData.iri).localeCompare(t.entityData.label||t.entityData.iri));return new j({parentChildRelations:f,entitiesData:m,allChildrenPresent:w,roots:C,api:new A(this.axiosInstance.getUri(),this.apiKey),ontologyId:d,mainEntityIri:n,keepExpansionStates:e.keepExpansionStates,entityType:p})}async loadHierarchyChildren(e){const{nodeToExpand:n,ontologyId:d,entityType:p}=e;if(p==null)throw Error("entityType has to be provided to load children in an OntoPortal hierarchy.");return(await this.makeCall(`/ontologies/${d.toUpperCase()}/${O(p,!1)}/${encodeURIComponent(n.entityData.iri)}/children`,{params:{include:"@id,prefLabel,hasChildren",language:"EN"}})).collection.map(y=>_(y))}}function Z(r){let e=r.entityData.definedBy||[];return e.includes(r.ontologyId)&&(e=[]),o.jsxs("span",{style:{position:"relative",left:"16px",lineHeight:"20px"},children:[o.jsxs("span",{className:r.highlight?"highlight":void 0,children:[r.childRelationToParent=="http://purl.obolibrary.org/obo/BFO_0000050"&&o.jsxs(o.Fragment,{children:[o.jsx("span",{className:"surroundCircle",children:" P "})," "]}),r.childRelationToParent=="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"&&o.jsxs(o.Fragment,{children:[o.jsx("span",{className:"surroundCircle",children:"I"})," "]}),o.jsx("a",{onClick:()=>{r.onNavigateToEntity&&r.onNavigateToEntity(r.ontologyId,r.entityType||"",r.entityData)},style:{textAlign:"left",color:"unset",cursor:"pointer"},children:o.jsx("span",{children:r.entityData.label||r.entityData.iri})})]}),o.jsxs("span",{children:[e.length>0&&o.jsx(o.Fragment,{children:e.map(n=>o.jsxs("span",{children:[" ",o.jsx("button",{onClick:()=>{r.onNavigateToOntology&&r.onNavigateToOntology(n,r.entityType||"",r.entityData)},children:o.jsx("span",{className:"ontology-badge",children:n.toUpperCase()})},`${r.entityData.iri}:${n}`)]}))}),r.entityData.numDescendants!=null&&r.entityData.numDescendants>0&&o.jsxs("span",{style:{color:"gray"},children:[" ","(",r.entityData.numDescendants.toLocaleString(),")"]})]})]})}function ee(r){const{apiUrl:e,backendType:n,apiKey:d,onNavigateToEntity:p,onNavigateToOntology:b,iri:y,ontologyId:m,entityType:f,includeObsoleteEntities:w=S.INCLUDE_OBSOLETE_ENTITIES,preferredRoots:g=S.PREFERRED_ROOTS,keepExpansionStates:I=S.KEEP_EXPANSION_STATES,showSiblingsOnInit:x=S.SHOW_SIBLINGS_ON_INIT,useLegacy:E=S.USE_LEGACY,hierarchyWrap:C=S.WRAP,className:s,parameter:t}=r,a=s||"ts4nfdi-hierarchy-style",[,l]=N.useReducer(h=>h+1%Number.MAX_SAFE_INTEGER,0),c=N.useMemo(()=>{switch(n){case"ols":return new H(e);case"skosmos":return new R(e);case"ontoportal":return new A(e,d||"");default:return new H(e)}},[e,n,d]),{data:i,isSuccess:T}=z(["hierarchySemLookP",y,f,m,g,w,I,x,E,t],async function(){return await c.buildHierarchyWithIri({ontologyId:m,iri:y,entityType:f,preferredRoots:g,includeObsoleteEntities:w,keepExpansionStates:I,showSiblingsOnInit:x,useLegacy:E,parameter:t})},{refetchOnWindowFocus:!1}),B=N.useCallback(h=>{if(!(i instanceof j))throw Error("Hierarchy object was undefined while trying to expand a tree node. This should never happen.");i.entityType&&X(i.entityType)||(h.expanded=!h.expanded,h.expanded?(h.loading=!0,l(),i.fetchInformationForExpansion(h).then(()=>{h.loading=!1,l()})):(l(),i.closeNode(h)))},[i]);function P(h,u,U){return o.jsxs("div",{children:[o.jsxs("div",{style:{position:"relative"},children:[o.jsx("div",{style:{position:"absolute"},children:u.entityData.hasChildren?o.jsxs("button",{style:{},onClick:()=>{B(u)},children:[o.jsx(q,{type:u.expanded?"arrowDown":"arrowRight",size:"s"})," "]}):o.jsx(q,{type:"empty"})}),o.jsx("div",{className:"lineNodeInlet"}),o.jsx("div",{className:U?"lineAfterNodeInlet":""}),o.jsx(Z,{entityData:u.entityData,childRelationToParent:u.childRelationToParent,ontologyId:h.ontologyId,entityType:h.entityType,onNavigateToEntity:typeof p=="function"?p:()=>{},onNavigateToOntology:typeof b=="function"?b:()=>{},highlight:u.entityData.iri==(h==null?void 0:h.mainEntityIri)})]}),u.expanded&&o.jsx("ul",{style:{marginBlockEnd:"0",marginInlineStart:"5px"},children:u.loading?o.jsx($,{style:{position:"relative",left:"13px",top:"5px"}}):u.loadedChildren.map((K,M)=>o.jsx("div",{className:U?"outerLine":"",style:{paddingLeft:"1rem"},children:P(h,K,M<u.loadedChildren.length-1)},Y()))})]})}return o.jsx("div",{className:a,children:o.jsx(Q,{"data-testid":"hierarchy",style:{overflowX:"auto",overflowY:"hidden"},children:T&&i!=null?o.jsx(V,{style:{whiteSpace:C?"wrap":"nowrap"},children:i.roots.map((h,u)=>P(i,h,u<i.roots.length-1))}):o.jsx($,{})})})}ee.__docgenInfo={description:"",methods:[],displayName:"HierarchyWidget",props:{className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"},apiUrl:{required:!0,tsType:{name:"string"},description:""},apiKey:{required:!1,tsType:{name:"string"},description:""},backendType:{required:!1,tsType:{name:"string"},description:""},hierarchyWrap:{required:!1,tsType:{name:"boolean"},description:""},entityType:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof entityTypeNames)[number]"},description:""},ontologyId:{required:!1,tsType:{name:"string"},description:""},includeObsoleteEntities:{required:!1,tsType:{name:"boolean"},description:""},useLegacy:{required:!1,tsType:{name:"boolean"},description:""},parameter:{required:!1,tsType:{name:"string"},description:""},preferredRoots:{required:!1,tsType:{name:"boolean"},description:""},keepExpansionStates:{required:!1,tsType:{name:"boolean"},description:""},showSiblingsOnInit:{required:!1,tsType:{name:"boolean"},description:""},iri:{required:!1,tsType:{name:"string"},description:""},onNavigateToEntity:{required:!1,tsType:{name:"union",raw:`| ((ontologyId: string, entityType?: string, entity?: EntityData) => void)
| string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time an entity link is clicked
@param ontologyId obtains the ontologyId of the current ontology
@param entityType obtains the entityType of the clicked entity
@param entity.iri obtains the iri of the clicked entity
@param entity.label obtains the label of the clicked entity
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`},onNavigateToOntology:{required:!1,tsType:{name:"union",raw:`| ((ontologyId: string, entityType?: string, entity?: EntityData) => void)
| string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time an entity link is clicked
@param ontologyId obtains the ontologyId of the clicked badge
@param entityType obtains the entityType of the clicked badge
@param entity.iri obtains the iri of the clicked badge (can be empty)
@param entity.label obtains the label of the clicked badge
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`}}};export{ee as H};
