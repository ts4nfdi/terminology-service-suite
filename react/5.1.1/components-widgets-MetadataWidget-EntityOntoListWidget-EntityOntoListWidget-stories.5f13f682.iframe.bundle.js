"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[20355],{"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./src/style/ts4nfdiStyles/ts4nfdiEntityOntoListStyle.css":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.ts4nfdi-entity-onto-list-style * {\n  font-family: "Inter", BlinkMacSystemFont, Helvetica, Arial, sans-serif;\n}\n\n.ts4nfdi-entity-onto-list-style button {\n  border: none;\n  background: none;\n  font-family: "Inter", BlinkMacSystemFont, Helvetica, Arial, sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/style/ts4nfdiStyles/ts4nfdiEntityOntoListStyle.css"],names:[],mappings:"AAAA;EACE,sEAAsE;AACxE;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,sEAAsE;AACxE",sourcesContent:['.ts4nfdi-entity-onto-list-style * {\n  font-family: "Inter", BlinkMacSystemFont, Helvetica, Arial, sans-serif;\n}\n\n.ts4nfdi-entity-onto-list-style button {\n  border: none;\n  background: none;\n  font-family: "Inter", BlinkMacSystemFont, Helvetica, Arial, sans-serif;\n}\n'],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./src/app/globals.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$R:()=>TIB_API_ENDPOINT,Kb:()=>GATEWAY_API_ENDPOINT,RC:()=>ZBMED_OLS4_API,gB:()=>ZBMED_OLS3_API,o6:()=>FINTO_V1_API_ENDPOINT,wS:()=>EBI_API_ENDPOINT});const TIB_API_ENDPOINT="https://api.terminology.tib.eu/api/",GATEWAY_API_ENDPOINT="https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/",ZBMED_OLS4_API="https://semanticlookup.zbmed.de/ols/api/",ZBMED_OLS3_API="https://ols3-semanticlookup.zbmed.de/ols/api/",EBI_API_ENDPOINT="https://www.ebi.ac.uk/ols4/api/",FINTO_V1_API_ENDPOINT="https://api.finto.fi/rest/v1"},"./src/components/widgets/MetadataWidget/EntityOntoListWidget/EntityOntoListPresentation.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>EntityOntoListPresentation});var react=__webpack_require__("./node_modules/react/index.js"),text_text=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),util=__webpack_require__("./src/app/util.ts"),injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),ts4nfdiEntityOntoListStyle=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./src/style/ts4nfdiStyles/ts4nfdiEntityOntoListStyle.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(ts4nfdiEntityOntoListStyle.A,options);ts4nfdiEntityOntoListStyle.A&&ts4nfdiEntityOntoListStyle.A.locals&&ts4nfdiEntityOntoListStyle.A.locals;var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const MAX_ONTOLOGIES_ON_DISPLAY=5;function EntityOntoListPresentation(props){const[appearsInExpanded,setAppearsInExpanded]=(0,react.useState)(!1),finalClassName=props.className||"ts4nfdi-entity-onto-list-style";function renderOntoBadge(ontology){return(0,jsx_runtime.jsx)("button",{onClick:()=>{props.onNavigateToOntology&&props.onNavigateToOntology(ontology,props.entityType||"",{iri:props.iri,label:props.label})},children:(0,jsx_runtime.jsx)("span",{className:"ontology-badge",children:ontology.toUpperCase()})},(0,util.DU)())}return(0,jsx_runtime.jsx)("div",{className:finalClassName,children:props.ontolist&&props.ontolist.length>0&&(0,jsx_runtime.jsxs)(text_text.b,{style:{fontWeight:"normal"},children:["Also appears in ",function renderOntoBadges(){return props.ontolist.length>MAX_ONTOLOGIES_ON_DISPLAY&&!appearsInExpanded?(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[props.ontolist.slice(0,MAX_ONTOLOGIES_ON_DISPLAY).map((ontology=>(0,jsx_runtime.jsxs)("span",{children:[renderOntoBadge(ontology)," "]},(0,util.DU)()))),(0,jsx_runtime.jsxs)("button",{className:"expand-onto-list",onClick:()=>setAppearsInExpanded(!0),children:["+ ",props.ontolist.length-MAX_ONTOLOGIES_ON_DISPLAY]})]}):props.ontolist.map((ontology=>(0,jsx_runtime.jsxs)("span",{children:[renderOntoBadge(ontology)," "]},(0,util.DU)())))}()]})})}EntityOntoListPresentation.displayName="EntityOntoListPresentation",EntityOntoListPresentation.__docgenInfo={description:"",methods:[],displayName:"EntityOntoListPresentation",props:{entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},onNavigateToOntology:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n  ontologyId: string,\n  entityType?: string,\n  entity?: EntityData,\n) => void",signature:{arguments:[{type:{name:"string"},name:"ontologyId"},{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time an entity link is clicked\n@param ontologyId obtains the ontologyId of the clicked badge\n@param entityType obtains the entityType of the clicked badge\n@param entity.iri obtains the iri of the clicked badge (can be empty)\n@param entity.label obtains the label of the clicked badge\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"},ontolist:{required:!0,tsType:{name:"Array",elements:[{name:"any"}],raw:"any[]"},description:""},label:{required:!0,tsType:{name:"string"},description:""}}}},"./src/components/widgets/MetadataWidget/EntityOntoListWidget/EntityOntoListWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>EntityOntoListWidget_stories,exceedsMaxDisplay:()=>exceedsMaxDisplay,legacyApi:()=>legacyApi,v2ApiEFO:()=>v2ApiEFO,v2ApiONS:()=>v2ApiONS});var EntityOntoListWidget=__webpack_require__("./src/components/widgets/MetadataWidget/EntityOntoListWidget/EntityOntoListWidget.tsx"),globals=__webpack_require__("./src/app/globals.ts"),storyArgs=__webpack_require__("./src/stories/storyArgs.ts");const EntityOntoListWidgetStoryArgTypes={...storyArgs.dg,...storyArgs.j0,...storyArgs.$M,...storyArgs.KV,...storyArgs.ch,...storyArgs.lK,...storyArgs.DD},v2ApiEFO={args:{iri:"http://www.ebi.ac.uk/efo/EFO_0000400",api:globals.wS,entityType:"term",ontologyId:"efo"}},v2ApiONS={args:{iri:"http://www.ebi.ac.uk/efo/EFO_0000400",api:globals.wS,ontologyId:"ons"}},legacyApi={args:{iri:"http://www.ebi.ac.uk/efo/EFO_0000400",api:globals.wS,entityType:"term",ontologyId:"efo",useLegacy:!0}},exceedsMaxDisplay={args:{iri:"http://purl.obolibrary.org/obo/HP_0000819",api:globals.wS,ontologyId:"hp"}};var util=__webpack_require__("./src/app/util.ts"),widgetDescriptions=__webpack_require__("./src/app/widgetDescriptions.ts");const EntityOntoListWidget_stories={title:"Additional Entity Metadata/EntityOntoListWidget",component:EntityOntoListWidget.M,parameters:{layout:"centered",docs:{source:{transform:util.vG},description:{component:widgetDescriptions.CK}}},argTypes:EntityOntoListWidgetStoryArgTypes,args:{api:"",useLegacy:!1,iri:"",ontologyId:"",entityType:"",parameter:"",onNavigateToOntology:"Console message"}},__namedExportsOrder=["v2ApiEFO","v2ApiONS","legacyApi","exceedsMaxDisplay"]},"./src/components/widgets/MetadataWidget/EntityOntoListWidget/EntityOntoListWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M:()=>EntityOntoListWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-query/es/index.js"),_app_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/util.ts"),_EntityOntoListPresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/EntityOntoListWidget/EntityOntoListPresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./src/style/tssStyles.css"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function EntityOntoListWidget(props){const{iri,api,parameter,entityType,ontologyId,useLegacy,className}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)(["entityOntoList",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>{let ontolist,realEntityType,label;if(useLegacy){const embedded=(await olsApi.getEntityResponse(iri,entityType,void 0,parameter,useLegacy))._embedded,definedBy=embedded[Object.keys(embedded)[0]].filter((entityInOntology=>entityInOntology.is_defining_ontology)).map((entityInOntology=>entityInOntology.ontology_name));ontolist=embedded[Object.keys(embedded)[0]].map((entityInOntology=>entityInOntology.ontology_name)).filter((elem=>!definedBy.includes(elem))),realEntityType=entityType||(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.o8)(Object.keys(embedded)[0]),label=embedded[Object.keys(embedded)[0]][0].label}else{const entity=await olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy);ontolist=entity.getAppearsIn().filter((elem=>!entity.getDefinedBy().includes(elem))),realEntityType=entityType||entity.getType(),label=entity.getLabel()||""}return ontolist=ontolist.filter((onto=>onto!=ontologyId)).sort(),{ontoList:ontolist,entityType:realEntityType,label}}));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment,{children:[isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_EntityOntoListPresentation__WEBPACK_IMPORTED_MODULE_4__.a,{ontolist:data.ontoList,entityType:data.entityType,label:data.label,iri,onNavigateToOntology:props.onNavigateToOntology,className}),isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.lr)(error,"ontology list")})]})}function WrappedEntityOntoListWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",globalStyles:!1,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(EntityOntoListWidget,{iri:props.iri,api:props.api,ontologyId:props.ontologyId,entityType:props.entityType,parameter:props.parameter,useLegacy:props.useLegacy,onNavigateToOntology:props.onNavigateToOntology})})})}WrappedEntityOntoListWidget.displayName="WrappedEntityOntoListWidget",EntityOntoListWidget.__docgenInfo={description:"",methods:[],displayName:"EntityOntoListWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call."},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!0,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nEach parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>lang</td><td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b>.</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td></tr>\n <tr><td>database</td><td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"},onNavigateToOntology:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n  ontologyId: string,\n  entityType?: string,\n  entity?: EntityData,\n) => void",signature:{arguments:[{type:{name:"string"},name:"ontologyId"},{type:{name:"string"},name:"entityType"},{type:{name:"signature",type:"object",raw:"{\n  iri: string;\n  label?: string;\n  definedBy?: string[];\n  /**\n   * should be present for use with hierarchy\n   */\n  hasChildren?: boolean;\n  numDescendants?: number;\n  /**\n   * should be present for use with hierarchy\n   */\n  parents?: Reified<string>[];\n}",signature:{properties:[{key:"iri",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!1}},{key:"definedBy",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!1}},{key:"hasChildren",value:{name:"boolean",required:!1},description:"should be present for use with hierarchy"},{key:"numDescendants",value:{name:"number",required:!1}},{key:"parents",value:{name:"Array",elements:[{name:"Reified",elements:[{name:"string"}],raw:"Reified<string>"}],raw:"Reified<string>[]",required:!1},description:"should be present for use with hierarchy"}]}},name:"entity"}],return:{name:"void"}}},description:"This function is called every time an entity link is clicked\n@param ontologyId obtains the ontologyId of the clicked badge\n@param entityType obtains the entityType of the clicked badge\n@param entity.iri obtains the iri of the clicked badge (can be empty)\n@param entity.label obtains the label of the clicked badge\n@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)\n@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities\n@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)\n@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)"}}}}}]);