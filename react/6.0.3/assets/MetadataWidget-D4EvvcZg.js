"use client";import{b as e}from"./iframe-wk1mlfou.js";import{I as P}from"./IriWidget-BqFEZk4w.js";import{u as F}from"./useQuery-wZqAoEXu.js";import{B as A}from"./BreadcrumbPresentation-CdJ78zr7.js";import{T as R}from"./TabPresentation-CDxm6mt8.js";import{D as W}from"./DescriptionPresentation-DdGpmRq9.js";import{T as I}from"./TitlePresentation-CMu5RjBV.js";import{O as B,o as _,aT as $,aN as C,aO as M}from"./widgetDescriptions-BxPwfV77.js";import{E as G}from"./EntityOntoListPresentation-DIv-Cvu0.js";import{E as K}from"./EntityDefinedByPresentation-B63UXLAN.js";/* empty css                  */import{E as V}from"./loading_spinner-CozkQlPq.js";import{E as H}from"./text-KgSp1nfd.js";import{E as u}from"./flex_group-CxFDGnTe.js";import{E as o}from"./flex_item-CycZ9ILc.js";import{E as J}from"./link-DHE_PzEt.js";function Q(i){const{iri:l,api:p,ontologyId:b,entityType:d,parameter:g,useLegacy:s,onNavigateToOntology:T,hierarchyTab:O,crossRefTab:j,terminologyInfoTab:E,graphViewTab:S,termDepictionTab:N,altNamesTab:v,termLink:k,className:w}=i,x=new B(p),a=w||"ts4nfdi-metadata-style",{data:f,isLoading:y,isSuccess:L,isError:q,error:c}=F(["metadata",p,g,d,l,b,s],async()=>{let t,h,r;if(s){const n=(await x.getEntityResponse(l,d,void 0,g,s))._embedded;t=C({_embedded:{[Object.keys(n)[0]]:M(n[Object.keys(n)[0]],s,b)}}),h=n[Object.keys(n)[0]].map(m=>m.ontology_name),r=n[Object.keys(n)[0]].filter(m=>m.is_defining_ontology).map(m=>m.ontology_name)}else t=await x.getEntityObject(l,d,b,g,s),h=t.getAppearsIn(),r=t.getDefinedBy();return r=r.filter(n=>n!=t.getOntologyId()).sort(),h=h.filter(n=>n!=t.getOntologyId()&&!r.includes(n)).sort(),{entity:t,ontoList:h,definedBy:r}});function D(t){return e.jsx("div",{className:a,"data-testid":"metadata",children:e.jsxs(u,{direction:"column",children:[e.jsx(o,{grow:!1,style:{maxWidth:600},children:k?e.jsx(J,{href:k,target:"_blank",external:!1,children:e.jsx(I,{title:t.entity.getLabel(),className:`${a}-title`,isLoading:y,error:c})}):e.jsx(I,{title:t.entity.getLabel(),className:`${a}-title`,isLoading:y,error:c})}),e.jsx(o,{grow:!1,children:e.jsx("span",{children:e.jsx(A,{onNavigateToOntology:i.onNavigateToOntology,ontologyId:b||t.entity.getOntologyId(),shortForm:t.entity.getShortForm(),className:`${a}-breadcrumb`})})}),e.jsx(o,{children:e.jsx(u,{direction:"column",children:e.jsx(o,{children:e.jsx(u,{children:e.jsx(o,{grow:!1,style:{maxWidth:600},children:e.jsx(P,{iri:l,className:`${a}-iri`})})})})})}),e.jsx(o,{style:{maxWidth:600},children:e.jsx(W,{description:t.entity.getDescription(),className:`${a}-description`,isLoading:y,error:c})}),e.jsxs("div",{style:{margin:"0 12px 0",maxWidth:600},children:[e.jsx(G,{iri:i.iri,label:t.entity.getLabel()||"",ontolist:t.ontoList,entityType:d||t.entity.getType(),onNavigateToOntology:T,className:`${a}-entity-onto-list`}),e.jsx(K,{iri:i.iri,ontolist:t.definedBy,label:t.entity.getLabel()||"",entityType:d||t.entity.getType(),onNavigateToOntology:T,className:`${a}-entity-defined-by`})]}),e.jsx(o,{children:e.jsx(R,{data:t.entity,isLoading:y,error:c,iri:l,entityType:i.entityType,api:p,ontologyId:i.ontologyId?i.ontologyId:t.entity.getOntologyId(),useLegacy:s,hierarchyTab:O,crossRefTab:j,terminologyInfoTab:E,termDepictionTab:N,graphViewTab:S,altNamesTab:v,hierarchyPreferredRoots:i.hierarchyPreferredRoots,hierarchyShowSiblingsOnInit:i.hierarchyShowSiblingsOnInit,hierarchyKeepExpansionStates:i.hierarchyKeepExpansionStates,onNavigateToEntity:i.onNavigateToEntity,onNavigateToOntology:i.onNavigateToOntology,onNavigateToDisambiguate:i.onNavigateToDisambiguate,className:w,hierarchyWrap:i.hierarchyWrap})})]})})}return e.jsxs(e.Fragment,{children:[y&&e.jsx(V,{}),q&&e.jsx(H,{children:_(c,"metadata")}),L&&f&&e.jsx(e.Fragment,{children:$(f.entity)?D(f):null})]})}Q.__docgenInfo={description:"",methods:[],displayName:"MetadataWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call."},entityType:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof entityTypeNames)[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:`Additional parameters to pass to the API.

Each parameter can be combined via
the special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign
<i><b>,</b></i>. The following keys could be used:<br/> <br/>
 <table>
 <thead><tr><th>Parameter</th><th>Description</th></tr></thead>
 <tr><td>lang</td><td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b>.</td></tr>
 <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td></tr>
 <tr><td>database</td><td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td></tr>
</table>`},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},className:{required:!1,tsType:{name:"string"},description:"CSS class for styling"},altNamesTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the Alternative Names tab. **True** shows the tab. **False** hides the tab."},hierarchyTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the Hierarchy tab. **True** shows the tab. **False** hides the tab."},crossRefTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the Cross-references tab. **True** shows the tab. **False** hides the tab."},terminologyInfoTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the About Terminology Info tab. **True** shows the tab. **False** hides the tab."},graphViewTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the Graph view tab. **True** shows the tab. **False** hides the tab."},termDepictionTab:{required:!1,tsType:{name:"boolean"},description:"It is possible to show and hide the TermDepiction tab. **True** shows the tab. **False** hides the tab."},onNavigateToEntity:{required:!1,tsType:{name:"union",raw:`| ((ontologyId: string, entityType?: string, entity?: EntityData) => void)
| string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time an entity link is clicked
@param ontologyId obtains the ontologyId of the current ontology
@param entityType obtains the entityType of the clicked entity
@param entity.iri obtains the iri of the clicked entity
@param entity.label obtains the label of the clicked entity
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`},onNavigateToOntology:{required:!1,tsType:{name:"union",raw:`| ((ontologyId: string, entityType?: string, entity?: EntityData) => void)
| string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time an entity link is clicked
@param ontologyId obtains the ontologyId of the clicked badge
@param entityType obtains the entityType of the clicked badge
@param entity.iri obtains the iri of the clicked badge (can be empty)
@param entity.label obtains the label of the clicked badge
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`},onNavigateToDisambiguate:{required:!1,tsType:{name:"union",raw:`| ((entityType: string, entity?: EntityData) => void)
| string`,elements:[{name:"unknown"},{name:"string"}]},description:`This function is called every time a disambiguation badge is clicked
@param entityType obtains the entityType of the clicked badge
@param entity.iri obtains the iri of the clicked badge (can be empty)
@param entity.label obtains the label of the clicked badge
@param entity.definedBy obtains the list of ontologies the clicked entity is defined in (only OLS)
@param entity.hasChildren obtains a boolean indicating whether the clicked entity has child entities
@param entity.numDescendants obtains the number of hierarchical descendants of the clicked entity (only OLS)
@param entity.parents obtains the list of parent entities of the clicked entity (only OLS, Skosmos)`},hierarchyPreferredRoots:{required:!1,tsType:{name:"boolean"},description:""},hierarchyKeepExpansionStates:{required:!1,tsType:{name:"boolean"},description:""},hierarchyShowSiblingsOnInit:{required:!1,tsType:{name:"boolean"},description:""},hierarchyWrap:{required:!1,tsType:{name:"boolean"},description:""},termLink:{required:!1,tsType:{name:"string"},description:"The term backlink. User can use this to make the term's label a link. For example, a link to the term page on a terminology service."}}};export{Q as M};
