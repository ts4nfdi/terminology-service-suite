"use strict";(self.webpackChunk_nfdi4health_semlookp_widgets=self.webpackChunk_nfdi4health_semlookp_widgets||[]).push([[29758],{"./src/components/widgets/AutocompleteWidget/AutocompleteWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>AutocompleteWidget});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./src/api/OlsApi.ts")),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/services/color/eui_palettes.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/health/health.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/highlight/highlight.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/combo_box/combo_box.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react_query__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react-query/es/index.js"),_MetadataWidget__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");function AutocompleteWidget(props){const{api,parameter,hasShortSelectedLabel,allowCustomTerms,selectionChangedEvent,preselected,placeholder,singleSelection,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),visColors=(0,_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.zE)(),visColorsBehindText=(0,_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.uu)(),[searchValue,setSearchValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),[options,setOptions]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),[selectedOptions,setSelectedOptions]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),{isLoading:isLoadingOnMount}=(0,react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)(["onMount",preselected],(async()=>{let preselectedValues=[],uniqueValues=[...new Set(preselected)].filter((option=>allowCustomTerms&&option.label||option.iri));if(uniqueValues.length>0){singleSelection&&(uniqueValues=[uniqueValues[0]]);for(const option of uniqueValues)option&&option.iri&&option.iri.startsWith("http")?await olsApi.select({query:option.iri},void 0,void 0,parameter).then((response=>{response.response&&response.response.docs&&(response.response.docs.map((selection=>{option.iri===selection.iri&&preselectedValues.push({label:hasShortSelectedLabel?selection.label:generateDisplayLabel(selection),key:selection.iri,value:{iri:selection.iri,label:selection.label,ontology_name:selection.ontology_name,type:selection.type,short_form:selection.short_form,description:selection.description?.join()}})})),singleSelection&&preselectedValues.length>1&&(preselectedValues=[preselectedValues[0]]))})):option&&option.label&&allowCustomTerms&&preselectedValues.push({label:option.label,key:option.label,value:{iri:"",label:"",ontology_name:"",type:"",short_form:"",description:""}});setOptions(preselectedValues),setSelectedOptions(preselectedValues)}})),{isLoading:isLoadingTerms}=(0,react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)(["onSearchChange",searchValue],(async()=>{if(searchValue.length>0)return olsApi.select({query:searchValue},void 0,void 0,parameter).then((response=>{response.response&&response.response.docs&&setOptions(response.response.docs.map((selection=>({label:hasShortSelectedLabel?selection.label:generateDisplayLabel(selection),key:selection.iri,value:{iri:selection.iri,label:selection.label,ontology_name:selection.ontology_name,type:selection.type,short_form:selection.short_form,description:selection.description?.join()}}))))}))}));function generateDisplayLabel(item){return item.label+" ("+item.ontology_name.toUpperCase()+" "+item.short_form+")"}return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{selectionChangedEvent(selectedOptions.map((x=>allowCustomTerms&&""==x.value.iri?{iri:"",label:x.label,ontology_name:"",type:"",short_form:x.value.short_form,description:x.value.description}:""==x.value.iri?{iri:"",label:"",ontology_name:"",type:"",short_form:"",description:""}:{iri:x.value.iri,label:x.value.label,ontology_name:x.value.ontology_name,type:x.value.type,short_form:x.value.short_form,description:x.value.description})))}),[selectedOptions]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{setSelectedOptions([])}),[api,parameter,hasShortSelectedLabel,allowCustomTerms,singleSelection,preselected]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.X,{isClearable:!0,"aria-label":"searchBar",fullWidth:!0,...rest,async:!0,isLoading:isLoadingTerms||isLoadingOnMount,singleSelection:!!singleSelection&&{asPlainText:!0},placeholder:placeholder||"Search for a Concept",options,selectedOptions,onSearchChange:setSearchValue,onChange:function onChangeHandler(options){setSelectedOptions(options)},renderOption:(option,searchValue)=>{const{label,value}=option;if(allowCustomTerms&&""==value.iri)return label;{let color="";"class"===value.type?color=visColorsBehindText[5]:"individual"===value.type?color=visColorsBehindText[3]:"property"===value.type&&(color=visColorsBehindText[1]);const dotColor=visColors[visColorsBehindText.indexOf(color)];return null!=value.description?"ontology"===value.type?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.e,{title:"type: "+value.type+"\n\nlabel: "+value.label+"\n\nprefix: "+value.ontology_name+"\n\ndescription: "+value.description,color:dotColor,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.c,{search:searchValue,children:value.label}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("br",{}),value.description]})}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("span",{style:{height:"200px"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.e,{title:"type: "+value.type+"\n\nlabel: "+value.label+"\n\nprefix > short_form: "+value.ontology_name+" > "+value.short_form+"\n\ndescription: "+value.description,color:dotColor,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.c,{search:searchValue,children:value.label}),"     ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_MetadataWidget__WEBPACK_IMPORTED_MODULE_4__.qi,{api,entityType:value.type,ontologyId:value.ontology_name,iri:value.iri,colorFirst:"primary",colorSecond:"success",parameter:value.parameter}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("br",{}),value.description.substring(0,40)+"..."]})})}):"ontology"===value.type?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.e,{title:"type: "+value.type+"\n\nlabel: "+value.label+"\n\nprefix: "+value.ontology_name,color:dotColor,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("span",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.c,{search:searchValue,children:value.label})})}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.e,{title:"type: "+value.type+"\n\nlabel: "+value.label+"\n\nprefix > short_form: "+value.ontology_name+" > "+value.short_form,color:dotColor,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.c,{search:searchValue,children:value.label}),"     ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_MetadataWidget__WEBPACK_IMPORTED_MODULE_4__.qi,{api,entityType:value.type,ontologyId:value.ontology_name,iri:value.iri,colorFirst:"primary",colorSecond:"success",parameter:value.parameter})]})})}},onCreateOption:allowCustomTerms?function onCreateOptionHandler(searchValue){const newOption={label:searchValue,value:{iri:"",label:"",ontology_name:"",type:"",short_form:"",description:""}};setOptions([...options,newOption]),setSelectedOptions(singleSelection?[newOption]:[...selectedOptions,newOption])}:void 0,rowHeight:50})}function WrappedAutocompleteWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_3__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_3__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AutocompleteWidget,{api:props.api,parameter:props.parameter,selectionChangedEvent:props.selectionChangedEvent,preselected:props.preselected,singleSelection:props.singleSelection,placeholder:props.placeholder,hasShortSelectedLabel:props.hasShortSelectedLabel,allowCustomTerms:props.allowCustomTerms})})})}AutocompleteWidget.displayName="AutocompleteWidget",WrappedAutocompleteWidget.displayName="WrappedAutocompleteWidget",AutocompleteWidget.__docgenInfo={description:"A React component to provide Autosuggestion based on SemLookP.",methods:[],displayName:"AutocompleteWidget",props:{parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},selectionChangedEvent:{required:!0,tsType:{name:"signature",type:"function",raw:"(selectedOptions: {\n    label: string;\n    iri?: string;\n    ontology_name?: string;\n    type?: string;\n}[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    label: string;\n    iri?: string;\n    ontology_name?: string;\n    type?: string;\n}",signature:{properties:[{key:"label",value:{name:"string",required:!0}},{key:"iri",value:{name:"string",required:!1}},{key:"ontology_name",value:{name:"string",required:!1}},{key:"type",value:{name:"string",required:!1}}]}}],raw:"{\n    label: string;\n    iri?: string;\n    ontology_name?: string;\n    type?: string;\n}[]"},name:"selectedOptions"}],return:{name:"void"}}},description:"A method that is called once the set of selection changes\n@param selectedOptions  The selected items"},preselected:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{ label?: string; iri?: string }",signature:{properties:[{key:"label",value:{name:"string",required:!1}},{key:"iri",value:{name:"string",required:!1}}]}}],raw:"{ label?: string; iri?: string }[]"},description:"Pass pre-selected values. If `singleSelection == true`, only the first one is displayed."},placeholder:{required:!1,tsType:{name:"string"},description:"Placeholder to show if no user input nor selection is performed."},hasShortSelectedLabel:{required:!1,tsType:{name:"boolean"},description:"If true, only the selected label of the entity is displayed. If false, the ontology and the entity short form is displayed behind the label. Default is true."},allowCustomTerms:{required:!0,tsType:{name:"boolean"},description:"If true, custom terms that are not found in any ontology can be added."},singleSelection:{required:!0,tsType:{name:"boolean"},description:"If true, only one concept can be selected at once."}}}},"./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q:()=>BreadcrumbWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/badge/badge.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_BreadcrumbPresentation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbPresentation.tsx"),react_query__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react-query/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function BreadcrumbWidget(props){const{api,ontologyId,iri,entityType,colorFirst,colorSecond,parameter,useLegacy}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)(["metadata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorFirst||(props.ontologyId?"primary":"warning"),children:props.ontologyId?.toUpperCase()||(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{size:"s"})})," > ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorSecond||"warning",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{size:"s"})})]}),isSuccess&&data&&(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_2__.Qg)(data)&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_BreadcrumbPresentation__WEBPACK_IMPORTED_MODULE_3__.O,{isDefiningOntology:data.getIsDefiningOntology(),ontologyName:data.getOntologyId(),shortForm:data.getShortForm(),ontologyId}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorFirst||(props.ontologyId||data&&data.getOntologyId()?"primary":"danger"),children:props.ontologyId?.toUpperCase()||data&&data.getOntologyId().toUpperCase()||(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"ontology")})," > ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorSecond||(data&&data.getShortForm()?"success":"danger"),children:data&&data.getShortForm()?data.getShortForm().toUpperCase():(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"short form")})]})]})}function WrappedBreadcrumbWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_4__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_4__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(BreadcrumbWidget,{api:props.api,entityType:props.entityType,iri:props.iri,ontologyId:props.ontologyId,colorFirst:props.colorFirst,colorSecond:props.colorSecond,parameter:props.parameter,useLegacy:props.useLegacy})})})}WrappedBreadcrumbWidget.displayName="WrappedBreadcrumbWidget",BreadcrumbWidget.__docgenInfo={description:"",methods:[],displayName:"BreadcrumbWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},colorFirst:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the first badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"},colorSecond:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the second badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"}}}},"./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>DescriptionWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/app/util.ts"),_DescriptionPresentation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionPresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const NO_DESCRIPTION="No description available.";function DescriptionWidget(props){const{api,ontologyId,iri,descText,thingType,parameter,useLegacy,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["metadata",api,parameter,thingType,iri,ontologyId,useLegacy],(async()=>olsApi.getThingObject(iri,thingType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.V,{size:"s"}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_DescriptionPresentation__WEBPACK_IMPORTED_MODULE_3__.D,{description:data.getDescription()||NO_DESCRIPTION,descText,...rest}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_8__.lr)(error,"description")})]})}function WrappedDescriptionWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(DescriptionWidget,{api:props.api,ontologyId:props.ontologyId,iri:props.iri,descText:props.descText,thingType:props.thingType,parameter:props.parameter,color:props.color,useLegacy:props.useLegacy})})})}WrappedDescriptionWidget.displayName="WrappedDescriptionWidget",DescriptionWidget.__docgenInfo={description:"",methods:[],displayName:"DescriptionWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},thingType:{required:!1,tsType:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]"},description:"Sets the type of the thing whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!1,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},descText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},color:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the text, names, hex or rgb"}}}},"./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>AlternativeNameTabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-query/es/index.js"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_AlternativeNameTabPresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabPresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function AlternativeNameTabWidget(props){const{iri,api,parameter,entityType,ontologyId,useLegacy}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)(["metadata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isSuccess&&data&&(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__.Qg)(data)&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_AlternativeNameTabPresentation__WEBPACK_IMPORTED_MODULE_4__.O,{synonyms:data.getSynonyms().map((synonym=>synonym.value))}),isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.V,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"alternative names")})]})}function WrappedAlternativeNameTabWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(AlternativeNameTabWidget,{iri:props.iri,api:props.api,ontologyId:props.ontologyId,entityType:props.entityType,parameter:props.parameter})})})}WrappedAlternativeNameTabWidget.displayName="WrappedAlternativeNameTabWidget",AlternativeNameTabWidget.__docgenInfo={description:"",methods:[],displayName:"AlternativeNameTabWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."}}}},"./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>CrossRefTabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-query/es/index.js"),_app_util__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_CrossRefTabPresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabPresentation.tsx"),_model_Reified__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/model/Reified.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function CrossRefTabWidget(props){const{iri,api,parameter,entityType,ontologyId,useLegacy}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)(["metadata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isSuccess&&data&&(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__.Qg)(data)&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_CrossRefTabPresentation__WEBPACK_IMPORTED_MODULE_4__.t,{crossrefs:_model_Reified__WEBPACK_IMPORTED_MODULE_7__.A.fromJson(data.getCrossReferences()).map((value=>value.value))}),isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_10__.lr)(error,"cross references")})]})}function WrappedCrossRefTabWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(CrossRefTabWidget,{iri:props.iri,api:props.api,ontologyId:props.ontologyId,entityType:props.entityType,parameter:props.parameter,useLegacy:props.useLegacy})})})}WrappedCrossRefTabWidget.displayName="WrappedCrossRefTabWidget",CrossRefTabWidget.__docgenInfo={description:"",methods:[],displayName:"CrossRefTabWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."}}}},"./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{g:()=>TabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_TabPresentation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/TabPresentation.tsx"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/model/ModelTypeCheck.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function TabWidget(props){const{iri,api,ontologyId,entityType,parameter,useLegacy,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["tabdata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.V,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"description")}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__.Qg)(data)?function render(data){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_TabPresentation__WEBPACK_IMPORTED_MODULE_3__._,{...rest,data,iri,api,useLegacy,entityType:data.getType()})}(data):null})]})}function WrappedTabWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(TabWidget,{iri:props.iri,api:props.api,ontologyId:props.ontologyId,entityType:props.entityType,parameter:props.parameter,useLegacy:props.useLegacy})})})}WrappedTabWidget.displayName="WrappedTabWidget",TabWidget.__docgenInfo={description:"",methods:[],displayName:"TabWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."}}}},"./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>TitleWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_TitlePresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitlePresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const NO_TITLE="No title available.";function TitleWidget(props){const{iri,ontologyId,api,titleText,thingType,parameter,useLegacy,default_value}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["metadata",api,parameter,thingType,iri,ontologyId,useLegacy],(async()=>olsApi.getThingObject(iri,thingType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.V,{size:"s"}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_TitlePresentation__WEBPACK_IMPORTED_MODULE_4__.B,{title:titleText||((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__.io)(data)?data.getName():data.getLabel())||default_value||NO_TITLE}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"title")})]})}function WrappedTitleWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(TitleWidget,{api:props.api,thingType:props.thingType,iri:props.iri,ontologyId:props.ontologyId,titleText:props.titleText,parameter:props.parameter,useLegacy:props.useLegacy,default_value:props.default_value})})})}WrappedTitleWidget.displayName="WrappedTitleWidget",TitleWidget.__docgenInfo={description:"",methods:[],displayName:"TitleWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)"},thingType:{required:!1,tsType:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]"},description:"Sets the type of the thing whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!1,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},titleText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},default_value:{required:!1,tsType:{name:"string"},description:"Set the default text shown if the API fails to retrieve one."}}}},"./src/components/widgets/MetadataWidget/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{qi:()=>BreadcrumbWidget.q,l0:()=>DescriptionWidget.l,ZK:()=>IriWidget.Z});var DescriptionWidget=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx"),IriWidget=__webpack_require__("./src/components/widgets/MetadataWidget/IriWidget/index.ts"),BreadcrumbWidget=__webpack_require__("./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbWidget.tsx");__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/MetadataWidget.tsx")}}]);