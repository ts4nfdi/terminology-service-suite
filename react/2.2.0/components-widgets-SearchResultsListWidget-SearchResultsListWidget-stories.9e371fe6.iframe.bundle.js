"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[72663],{"./src/components/widgets/SearchResultsListWidget/SearchResultsListWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ErrorSearchResultsList:()=>ErrorSearchResultsList,SearchResultsListNFDI4Health:()=>SearchResultsListNFDI4Health,SearchResultsListOls4:()=>SearchResultsListOls4,SearchResultsListSafety:()=>SearchResultsListSafety,TibDataPlant:()=>TibDataPlant,TibNFDI4CHEM:()=>TibNFDI4CHEM,__namedExportsOrder:()=>__namedExportsOrder,default:()=>SearchResultsListWidget_stories});var spacer=__webpack_require__("./node_modules/@elastic/eui/es/components/spacer/spacer.js"),flex_group=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_group.js"),flex_item=__webpack_require__("./node_modules/@elastic/eui/es/components/flex/flex_item.js"),panel=__webpack_require__("./node_modules/@elastic/eui/es/components/panel/panel.js"),form_row=__webpack_require__("./node_modules/@elastic/eui/es/components/form/form_row/form_row.js"),selectable=__webpack_require__("./node_modules/@elastic/eui/es/components/selectable/selectable.js"),loading_spinner=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),button_empty=__webpack_require__("./node_modules/@elastic/eui/es/components/button/button_empty/button_empty.js"),switch_switch=__webpack_require__("./node_modules/@elastic/eui/es/components/form/switch/switch.js"),text_text=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),horizontal_rule=__webpack_require__("./node_modules/@elastic/eui/es/components/horizontal_rule/horizontal_rule.js"),table_pagination=__webpack_require__("./node_modules/@elastic/eui/es/components/table/table_pagination/table_pagination.js"),provider=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react=__webpack_require__("./node_modules/react/index.js"),es=__webpack_require__("./node_modules/react-query/es/index.js"),OlsApi=__webpack_require__("./src/api/OlsApi.ts"),card=__webpack_require__("./node_modules/@elastic/eui/es/components/card/card.js"),title=__webpack_require__("./node_modules/@elastic/eui/es/components/title/title.js"),DescriptionWidget=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx"),IriWidget=__webpack_require__("./src/components/widgets/MetadataWidget/IriWidget/index.ts"),BreadcrumbWidget=__webpack_require__("./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbWidget.tsx"),util=(__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/index.ts"),__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx"),__webpack_require__("./src/components/widgets/MetadataWidget/MetadataWidget.tsx"),__webpack_require__("./src/app/util.ts")),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function MetadataCompact(props){const{api,result,targetLink,...rest}=props;return(0,jsx_runtime.jsxs)(card.Gm,{textAlign:"left",...rest,href:targetLink?"ontology"!=result.type?targetLink+"ontologies/"+result.ontology_name+"/"+(0,util.DW)(result.type,!0)+"?iri="+encodeURIComponent(result.iri):targetLink+"ontologies/"+result.ontology_name:void 0,title:(0,jsx_runtime.jsxs)(flex_group.cZ,{children:[(0,jsx_runtime.jsx)(flex_item.a,{grow:!1,children:(0,jsx_runtime.jsx)(title.q6,{children:(0,jsx_runtime.jsx)("h2",{children:result.label})})}),(0,jsx_runtime.jsx)(flex_item.a,{children:"ontology"!=result.type&&(0,jsx_runtime.jsx)(BreadcrumbWidget.q,{api,iri:result.iri,entityType:result.type,ontologyId:result.ontology_name})})]}),children:["ontology"!=result.type?(0,jsx_runtime.jsx)(IriWidget.Z,{iri:result.iri}):void 0,(0,jsx_runtime.jsx)(spacer.A,{size:"s"}),(0,jsx_runtime.jsx)(DescriptionWidget.l,{api,ontologyId:result.ontology_name,iri:result.iri,thingType:result.type})]})}MetadataCompact.displayName="MetadataCompact",MetadataCompact.__docgenInfo={description:"",methods:[],displayName:"MetadataCompact",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},targetLink:{required:!1,tsType:{name:"string"},description:"Possible hyperlink to a corresponding terminology in a Resource Name cell. Set this if you want\na hyperlink to the terminology overview of your terminology service. Leave it blank if your application\nisn't a terminology service."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},result:{required:!0,tsType:{name:"signature",type:"object",raw:"{\n    description: string[];\n    id: string;\n    iri: string;\n    is_defining_ontology: boolean;\n    label: string;\n    ontology_name: string;\n    ontology_prefix: string;\n    short_form: string;\n    type: ThingTypeName;\n}",signature:{properties:[{key:"description",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"id",value:{name:"string",required:!0}},{key:"iri",value:{name:"string",required:!0}},{key:"is_defining_ontology",value:{name:"boolean",required:!0}},{key:"label",value:{name:"string",required:!0}},{key:"ontology_name",value:{name:"string",required:!0}},{key:"ontology_prefix",value:{name:"string",required:!0}},{key:"short_form",value:{name:"string",required:!0}},{key:"type",value:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]",required:!0}}]}},description:""}}};__webpack_require__("./node_modules/react-dom/index.js");var SearchBarWidget=__webpack_require__("./src/components/widgets/SearchBarWidget/SearchBarWidget.tsx");const DEFAULT_INITIAL_ITEMS_PER_PAGE=10,DEFAULT_PAGE_SIZE_OPTIONS=[10,25,50,100];function SearchResultsListWidget(props){const{api,query,parameter,initialItemsPerPage=DEFAULT_INITIAL_ITEMS_PER_PAGE,itemsPerPageOptions=DEFAULT_PAGE_SIZE_OPTIONS,targetLink,preselected,useLegacy=!0,...rest}=props,olsApi=new OlsApi.l(api),[searchValue,setSearchValue]=(0,react.useState)(query),[activePage,setActivePage]=(0,react.useState)(0),[pageCount,setPageCount]=(0,react.useState)(0),[itemsPerPage,setItemsPerPage]=(0,react.useState)(initialItemsPerPage),[totalItems,setTotalItems]=(0,react.useState)(0),[exactMatch,setExactMatch]=(0,react.useState)(!1),[showObsoleteTerms,setShowObsoleteTerms]=(0,react.useState)(!1),[filterByTypeOptions,setFilterByTypeOptions]=(0,react.useState)([]),[filterByOntologyOptions,setFilterByOntologyOptions]=(0,react.useState)([]);function updateFilterOptions(currentOptions,optionCounts,setOptions,render){if(0==currentOptions.length)setOptions(optionCounts.reduce(((accumulator,currentValue,currentIndex,array)=>(currentIndex%2==0&&accumulator.push({label:render?render(currentValue):currentValue,key:currentValue,append:"("+array[currentIndex+1]+")",disabled:0==array[currentIndex+1],data:{totalCount:array[currentIndex+1]}}),accumulator)),[]));else{const newOptions=[];for(let i=0;i<currentOptions.length;i++)newOptions.push(Object.assign({},currentOptions[i]));optionCounts.forEach(((currentValue,currentIndex,array)=>{if(currentIndex%2==0){const option=newOptions.find((option=>option.key==currentValue));option&&(option.append="("+array[currentIndex+1],option.data&&array[currentIndex+1]<option.data.totalCount&&(option.append+="/"+option.data.totalCount),option.append+=")")}})),setOptions(newOptions)}}(0,react.useEffect)((()=>{setSearchValue(query)}),[query]);const filterSelectedOptions=option=>"on"===option.checked,{data:searchResults,isLoading,isSuccess,isError,error}=(0,es.useQuery)(["searchResults",api,searchValue,exactMatch,showObsoleteTerms,activePage,itemsPerPage,filterByTypeOptions.filter(filterSelectedOptions).map((option=>option.key)),filterByOntologyOptions.filter(filterSelectedOptions).map((option=>option.key)),parameter],(async _ref=>{let{signal}=_ref;return olsApi.search({query:searchValue,exactMatch,showObsoleteTerms,types:filterByTypeOptions.filter(filterSelectedOptions).map((option=>option.key)).join(","),ontology:filterByOntologyOptions.filter(filterSelectedOptions).map((option=>option.key)).join(","),groupByIri:!0},{page:activePage.toString(),size:itemsPerPage.toString()},void 0,props.parameter,signal).then((response=>{if(response.response&&null!=response.response.docs&&null!=response.response.numFound){response.facet_counts&&response.facet_counts.facet_fields&&(response.facet_counts.facet_fields.type&&updateFilterOptions(filterByTypeOptions,response.facet_counts.facet_fields.type,setFilterByTypeOptions,(currentValue=>`${currentValue[0].toUpperCase()}${currentValue.slice(1)}`)),useLegacy?response.facet_counts.facet_fields.ontology_name&&updateFilterOptions(filterByOntologyOptions,response.facet_counts.facet_fields.ontology_name,setFilterByOntologyOptions,(currentValue=>currentValue.toUpperCase())):response.facet_counts.facet_fields.ontologyId&&updateFilterOptions(filterByOntologyOptions,response.facet_counts.facet_fields.ontologyId,setFilterByOntologyOptions,(currentValue=>currentValue.toUpperCase()))),setTotalItems(response.response.numFound);const newPageCount=Math.ceil(response.response.numFound/itemsPerPage);return setPageCount(newPageCount),activePage>=newPageCount&&setActivePage(0),response.response.docs}throw new Error("Unexpected API response")}))}),{keepPreviousData:!0});function clearFilter(currentOptions,setOptions){setOptions([...currentOptions].map((option=>({...option,checked:void 0}))))}return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(SearchBarWidget.k,{api,query:"",selectionChangedEvent:selectedOption=>{!function transform_to_searchValue(selectedOption){setSearchValue(selectedOption[0]?selectedOption[0].label:"")}(selectedOption)}}),(0,jsx_runtime.jsx)(spacer.A,{size:"s"}),(0,jsx_runtime.jsxs)(flex_group.cZ,{children:[(0,jsx_runtime.jsx)(flex_item.a,{grow:3,style:{minWidth:250},children:(0,jsx_runtime.jsxs)(panel.K6,{children:[isSuccess&&(0,jsx_runtime.jsx)(form_row.G,{label:"Filter by type",children:(0,jsx_runtime.jsx)(selectable.W,{options:filterByTypeOptions,onChange:setFilterByTypeOptions,listProps:{bordered:!0},children:list=>list})}),isLoading&&(0,jsx_runtime.jsx)(form_row.G,{label:"Filter by type",children:(0,jsx_runtime.jsx)(loading_spinner.V,{size:"s"})}),isError&&(0,jsx_runtime.jsx)(form_row.G,{label:"Filter by type",children:(0,jsx_runtime.jsx)(selectable.W,{options:[],onChange:setFilterByTypeOptions,listProps:{bordered:!0},children:list=>list})}),isSuccess&&(0,jsx_runtime.jsx)(form_row.G,{label:"Filter by ontology",children:(0,jsx_runtime.jsx)(selectable.W,{options:filterByOntologyOptions,onChange:setFilterByOntologyOptions,listProps:{bordered:!0},searchable:!0,children:(list,search)=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[search,list]})})}),isLoading&&(0,jsx_runtime.jsx)(form_row.G,{label:"Filter by ontology",children:(0,jsx_runtime.jsx)(loading_spinner.V,{size:"s"})}),isError&&(0,jsx_runtime.jsx)(form_row.G,{label:"Filter by ontology",children:(0,jsx_runtime.jsx)(selectable.W,{options:[],onChange:setFilterByOntologyOptions,listProps:{bordered:!0},searchable:!0,children:(list,search)=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[search,list]})})}),(0,jsx_runtime.jsx)(button_empty.XA,{onClick:function clearAllFilters(){clearFilter(filterByTypeOptions,setFilterByTypeOptions),clearFilter(filterByOntologyOptions,setFilterByOntologyOptions)},children:"Clear all filters"})]})}),(0,jsx_runtime.jsx)(flex_item.a,{grow:7,children:(0,jsx_runtime.jsxs)(panel.K6,{color:"transparent",grow:!1,children:[(0,jsx_runtime.jsxs)(flex_group.cZ,{children:[(0,jsx_runtime.jsx)(flex_item.a,{grow:!1,children:(0,jsx_runtime.jsx)(switch_switch.q,{label:"Exact match",checked:exactMatch,onChange:function toggleExactMatch(){setExactMatch(!exactMatch)}})}),(0,jsx_runtime.jsx)(flex_item.a,{children:(0,jsx_runtime.jsx)(switch_switch.q,{label:"Show only obsolete terms",checked:showObsoleteTerms,onChange:function toggleShowObsoleteTerms(){setShowObsoleteTerms(!showObsoleteTerms)}})})]}),(0,jsx_runtime.jsx)(spacer.A,{size:"m"}),(0,jsx_runtime.jsxs)(text_text.b,{size:"xs",style:{padding:"0 8px"},children:["Showing ",Math.min(activePage*itemsPerPage+1,totalItems)," to ",Math.min((activePage+1)*itemsPerPage,totalItems)," of ",totalItems," results"]}),(0,jsx_runtime.jsx)(spacer.A,{size:"s"}),(0,jsx_runtime.jsx)(horizontal_rule.wl,{margin:"none",style:{height:2}}),(0,jsx_runtime.jsx)(spacer.A,{size:"s"}),(0,jsx_runtime.jsx)(table_pagination.E,{"aria-label":"Search result pagination",pageCount,activePage,onChangePage:setActivePage,itemsPerPage,onChangeItemsPerPage:function onChangeItemsPerPage(newItemsPerPage){setActivePage(Math.floor((activePage*itemsPerPage+1)/newItemsPerPage)),setItemsPerPage(newItemsPerPage)},itemsPerPageOptions}),(0,jsx_runtime.jsx)(spacer.A,{size:"s"}),searchResults&&searchResults.map((result=>(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(MetadataCompact,{api,result,targetLink}),(0,jsx_runtime.jsx)(spacer.A,{})]},result.id)))]})})]})]})}function WrappedSearchResultsListWidget(props){const queryClient=new es.QueryClient;return(0,jsx_runtime.jsx)(provider.l,{colorMode:"light",children:(0,jsx_runtime.jsx)(es.QueryClientProvider,{client:queryClient,children:(0,jsx_runtime.jsx)(SearchResultsListWidget,{api:props.api,query:props.query,parameter:props.parameter,initialItemsPerPage:props.initialItemsPerPage,itemsPerPageOptions:props.itemsPerPageOptions,targetLink:props.targetLink})})})}WrappedSearchResultsListWidget.displayName="WrappedSearchResultsListWidget",SearchResultsListWidget.__docgenInfo={description:"",methods:[],displayName:"SearchResultsListWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},targetLink:{required:!1,tsType:{name:"string"},description:"Possible hyperlink to a corresponding terminology in a Resource Name cell. Set this if you want\na hyperlink to the terminology overview of your terminology service. Leave it blank if your application\nisn't a terminology service."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},query:{required:!0,tsType:{name:"string"},description:"The terms to search. By default, the search is performed over term labels, synonyms, descriptions, identifiers and annotation properties."},initialItemsPerPage:{required:!1,tsType:{name:"number"},description:"Initial number of items displayed per page."},itemsPerPageOptions:{required:!1,tsType:{name:"Array",elements:[{name:"number"}],raw:"number[]"},description:"Possible values for number of items displayed per page."},preselected:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{ label?: string; iri?: string }",signature:{properties:[{key:"label",value:{name:"string",required:!1}},{key:"iri",value:{name:"string",required:!1}}]}}],raw:"{ label?: string; iri?: string }[]"},description:"Pass pre-selected values. If `singleSelection == true`, only the first one is displayed."}}};const SearchResultsListSafety={args:{api:"https://semanticlookup.zbmed.de/api/",query:"d*",targetLink:"",parameter:"collection=safety&fieldList=description,label,iri,ontology_name,type,short_form"}},SearchResultsListNFDI4Health={args:{api:"https://semanticlookup.zbmed.de/api/",query:"d*",targetLink:"",parameter:"collection=nfdi4health&fieldList=description,label,iri,ontology_name,type,short_form",preselected:[{label:"diabetes"}],useLegacy:!0}},ErrorSearchResultsList={args:{api:"ht3ps://semanticlookup.zbmed.de/api/",query:"d*",targetLink:"",parameter:"collection=nfdi4health"}},TibNFDI4CHEM={args:{api:"https://service.tib.eu/ts4tib/api/",parameter:"classification=NFDI4CHEM&schema=collection&fieldList=description,label,iri,ontology_name,type,short_form",query:"assay",targetLink:""}},TibDataPlant={args:{api:"https://service.tib.eu/ts4tib/api/",parameter:"classification=DataPLANT&schema=collection&fieldList=description,label,iri,ontology_name,type,short_form",query:"agriculture",targetLink:""}},SearchResultsListOls4={args:{api:"https://www.ebi.ac.uk/ols4/api/",query:"*",targetLink:"/",parameter:"",useLegacy:!1}},SearchResultsListWidget_stories={title:"SearchResultsListWidget",component:SearchResultsListWidget,argTypes:{api:{control:{type:"radio"},options:["https://www.ebi.ac.uk/ols4/api/","https://semanticlookup.zbmed.de/ols/api/","https://semanticlookup.zbmed.de/api/","https://service.tib.eu/ts4tib/api/"]},query:{},initialItemsPerPage:{control:"number"},itemsPerPageOptions:{control:"array"},targetLink:{},parameter:{type:{required:!1}},useLegacy:{type:{required:!1}}},args:{parameter:"collection=nfdi4health",initialItemsPerPage:10,itemsPerPageOptions:[10,25,50,100]}},__namedExportsOrder=["SearchResultsListSafety","SearchResultsListNFDI4Health","ErrorSearchResultsList","TibNFDI4CHEM","TibDataPlant","SearchResultsListOls4"]},"./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q:()=>BreadcrumbWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/badge/badge.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_BreadcrumbPresentation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbPresentation.tsx"),react_query__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react-query/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function BreadcrumbWidget(props){const{api,ontologyId,iri,entityType,colorFirst,colorSecond,parameter,useLegacy}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)(["metadata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorFirst||(props.ontologyId?"primary":"warning"),children:props.ontologyId?.toUpperCase()||(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{size:"s"})})," > ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorSecond||"warning",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{size:"s"})})]}),isSuccess&&data&&(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_2__.Qg)(data)&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_BreadcrumbPresentation__WEBPACK_IMPORTED_MODULE_3__.O,{isDefiningOntology:data.getIsDefiningOntology(),ontologyName:data.getOntologyId(),shortForm:data.getShortForm(),ontologyId}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("span",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorFirst||(props.ontologyId||data&&data.getOntologyId()?"primary":"danger"),children:props.ontologyId?.toUpperCase()||data&&data.getOntologyId().toUpperCase()||(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"ontology")})," > ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b$,{color:colorSecond||(data&&data.getShortForm()?"success":"danger"),children:data&&data.getShortForm()?data.getShortForm().toUpperCase():(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"short form")})]})]})}function WrappedBreadcrumbWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_4__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_4__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(BreadcrumbWidget,{api:props.api,entityType:props.entityType,iri:props.iri,ontologyId:props.ontologyId,colorFirst:props.colorFirst,colorSecond:props.colorSecond,parameter:props.parameter,useLegacy:props.useLegacy})})})}WrappedBreadcrumbWidget.displayName="WrappedBreadcrumbWidget",BreadcrumbWidget.__docgenInfo={description:"",methods:[],displayName:"BreadcrumbWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},colorFirst:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the first badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"},colorSecond:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the second badge, can be primary, accent, success, warning, danger, ghost, text, subdued or a hex / rgb value"}}}},"./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>DescriptionWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/app/util.ts"),_DescriptionPresentation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionPresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const NO_DESCRIPTION="No description available.";function DescriptionWidget(props){const{api,ontologyId,iri,descText,thingType,parameter,useLegacy,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["metadata",api,parameter,thingType,iri,ontologyId,useLegacy],(async()=>olsApi.getThingObject(iri,thingType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.V,{size:"s"}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_DescriptionPresentation__WEBPACK_IMPORTED_MODULE_3__.D,{description:data.getDescription()||NO_DESCRIPTION,descText,...rest}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_8__.lr)(error,"description")})]})}function WrappedDescriptionWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(DescriptionWidget,{api:props.api,ontologyId:props.ontologyId,iri:props.iri,descText:props.descText,thingType:props.thingType,parameter:props.parameter,color:props.color,useLegacy:props.useLegacy})})})}WrappedDescriptionWidget.displayName="WrappedDescriptionWidget",DescriptionWidget.__docgenInfo={description:"",methods:[],displayName:"DescriptionWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},thingType:{required:!1,tsType:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]"},description:"Sets the type of the thing whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!1,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},descText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},color:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the text, names, hex or rgb"}}}},"./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>AlternativeNameTabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-query/es/index.js"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_AlternativeNameTabPresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabPresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function AlternativeNameTabWidget(props){const{iri,api,parameter,entityType,ontologyId,useLegacy}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)(["metadata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isSuccess&&data&&(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__.Qg)(data)&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_AlternativeNameTabPresentation__WEBPACK_IMPORTED_MODULE_4__.O,{synonyms:data.getSynonyms().map((synonym=>synonym.value))}),isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.V,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"alternative names")})]})}function WrappedAlternativeNameTabWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(AlternativeNameTabWidget,{iri:props.iri,api:props.api,ontologyId:props.ontologyId,entityType:props.entityType,parameter:props.parameter})})})}WrappedAlternativeNameTabWidget.displayName="WrappedAlternativeNameTabWidget",AlternativeNameTabWidget.__docgenInfo={description:"",methods:[],displayName:"AlternativeNameTabWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."}}}},"./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>CrossRefTabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-query/es/index.js"),_app_util__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_CrossRefTabPresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabPresentation.tsx"),_model_Reified__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/model/Reified.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function CrossRefTabWidget(props){const{iri,api,parameter,entityType,ontologyId,useLegacy}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)(["metadata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isSuccess&&data&&(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__.Qg)(data)&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_CrossRefTabPresentation__WEBPACK_IMPORTED_MODULE_4__.t,{crossrefs:_model_Reified__WEBPACK_IMPORTED_MODULE_7__.A.fromJson(data.getCrossReferences()).map((value=>value.value))}),isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.V,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_10__.lr)(error,"cross references")})]})}function WrappedCrossRefTabWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_11__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(CrossRefTabWidget,{iri:props.iri,api:props.api,ontologyId:props.ontologyId,entityType:props.entityType,parameter:props.parameter,useLegacy:props.useLegacy})})})}WrappedCrossRefTabWidget.displayName="WrappedCrossRefTabWidget",CrossRefTabWidget.__docgenInfo={description:"",methods:[],displayName:"CrossRefTabWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."}}}},"./src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{g:()=>TabWidget});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_TabPresentation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/widgets/MetadataWidget/TabWidget/TabPresentation.tsx"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/model/ModelTypeCheck.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function TabWidget(props){const{iri,api,ontologyId,entityType,parameter,useLegacy,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["tabdata",api,parameter,entityType,iri,ontologyId,useLegacy],(async()=>olsApi.getEntityObject(iri,entityType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.V,{}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"description")}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:(0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_4__.Qg)(data)?function render(data){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_TabPresentation__WEBPACK_IMPORTED_MODULE_3__._,{...rest,data,iri,api,useLegacy,entityType:data.getType()})}(data):null})]})}function WrappedTabWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(TabWidget,{iri:props.iri,api:props.api,ontologyId:props.ontologyId,entityType:props.entityType,parameter:props.parameter,useLegacy:props.useLegacy})})})}WrappedTabWidget.displayName="WrappedTabWidget",TabWidget.__docgenInfo={description:"",methods:[],displayName:"TabWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},entityType:{required:!1,tsType:{name:"entityTypeNames[number]",raw:"typeof entityTypeNames[number]"},description:"Sets the type of the entity whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!0,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."}}}},"./src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>TitleWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/app/util.ts"),_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/model/ModelTypeCheck.ts"),_TitlePresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/TitleWidget/TitlePresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const NO_TITLE="No title available.";function TitleWidget(props){const{iri,ontologyId,api,titleText,thingType,parameter,useLegacy,default_value}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["metadata",api,parameter,thingType,iri,ontologyId,useLegacy],(async()=>olsApi.getThingObject(iri,thingType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.V,{size:"s"}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_TitlePresentation__WEBPACK_IMPORTED_MODULE_4__.B,{title:titleText||((0,_model_ModelTypeCheck__WEBPACK_IMPORTED_MODULE_3__.io)(data)?data.getName():data.getLabel())||default_value||NO_TITLE}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_9__.lr)(error,"title")})]})}function WrappedTitleWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_10__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(TitleWidget,{api:props.api,thingType:props.thingType,iri:props.iri,ontologyId:props.ontologyId,titleText:props.titleText,parameter:props.parameter,useLegacy:props.useLegacy,default_value:props.default_value})})})}WrappedTitleWidget.displayName="WrappedTitleWidget",TitleWidget.__docgenInfo={description:"",methods:[],displayName:"TitleWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},thingType:{required:!1,tsType:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]"},description:"Sets the type of the thing whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!1,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},titleText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},default_value:{required:!1,tsType:{name:"string"},description:"Set the default text shown if the API fails to retrieve one."}}}},"./src/components/widgets/SearchBarWidget/SearchBarWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{k:()=>SearchBarWidget});var _elastic_eui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@elastic/eui/es/components/combo_box/combo_box.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/api/OlsApi.ts"),react_query__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-query/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));function SearchBarWidget(props){const{api,query,selectionChangedEvent,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_1__.l(api),[options,setOptions]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),[selectedOptions,setSelected]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),[searchValue,setSearchValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(query),{isLoading}=(0,react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)(["suggestions",searchValue],(async()=>{if(searchValue.trim())return olsApi.suggest({query:searchValue},void 0,void 0,props.parameter).then((response=>{response.response&&response.response.docs&&setOptions(response.response.docs.map((suggestion=>({label:suggestion.autosuggest,type:{color:"tint1",iconType:""}}))))}))}));return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{selectionChangedEvent(selectedOptions.map((selectedOption=>({label:selectedOption.label}))))}),[selectedOptions]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_5__.X,{id:"suggest",isClearable:!0,"aria-label":"searchBar",fullWidth:!0,async:!0,placeholder:"Search",autoFocus:!0,singleSelection:!0,isLoading,options,selectedOptions,onChange:selectedOption=>{setSelected(selectedOption)},onCreateOption:searchValue=>{if(!searchValue.trim().toLowerCase())return;setSelected([{label:searchValue}])},onSearchChange:item=>{setSearchValue(item)}})})}function WrappedSearchBarWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_6__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SearchBarWidget,{api:props.api,query:props.query,selectionChangedEvent:props.selectionChangedEvent,parameter:props.parameter})})})}WrappedSearchBarWidget.displayName="WrappedSearchBarWidget",SearchBarWidget.__docgenInfo={description:"",methods:[],displayName:"SearchBarWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)"},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. collection=nfdi4health</td></tr>\n</table>"},query:{required:!0,tsType:{name:"string"},description:"The search term to receive suggestions for."},selectionChangedEvent:{required:!0,tsType:{name:"signature",type:"function",raw:"(selectedOptions: {\n    label: string;\n    iri?: string;\n    ontology_name?: string;\n    type?: string;\n}[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    label: string;\n    iri?: string;\n    ontology_name?: string;\n    type?: string;\n}",signature:{properties:[{key:"label",value:{name:"string",required:!0}},{key:"iri",value:{name:"string",required:!1}},{key:"ontology_name",value:{name:"string",required:!1}},{key:"type",value:{name:"string",required:!1}}]}}],raw:"{\n    label: string;\n    iri?: string;\n    ontology_name?: string;\n    type?: string;\n}[]"},name:"selectedOptions"}],return:{name:"void"}}},description:"A method that is called once the set of selection changes\n@param selectedOptions  The selected items"}}}}}]);