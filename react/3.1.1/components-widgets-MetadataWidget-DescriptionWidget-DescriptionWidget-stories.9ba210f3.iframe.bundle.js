"use strict";(self.webpackChunk_ts4nfdi_terminology_service_suite=self.webpackChunk_ts4nfdi_terminology_service_suite||[]).push([[19551],{"./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefiningOntologyUnavailable:()=>DefiningOntologyUnavailable,DescriptionWidget1:()=>DescriptionWidget1,SelectingDefiningOntology:()=>SelectingDefiningOntology,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DescriptionWidget_stories});var DescriptionWidget=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx"),storyArgs=__webpack_require__("./src/stories/storyArgs.ts"),globals=__webpack_require__("./src/app/globals.ts");const DescriptionWidgetStoryArgTypes={...storyArgs.dg,...storyArgs.wT,...storyArgs.vZ,...storyArgs.$M,...storyArgs.j0,...storyArgs.lK,...storyArgs.ch,...storyArgs.RY},DescriptionWidget1={args:{iri:"http://purl.obolibrary.org/obo/NCIT_C2985",api:globals.gA,ontologyId:"ncit",thingType:"term",parameter:"collection=nfdi4health"}},SelectingDefiningOntology={args:{api:globals.wS,iri:"http://purl.obolibrary.org/obo/IAO_0000631",thingType:"",parameter:""}},DefiningOntologyUnavailable={args:{api:globals.wS,iri:"http://identifiers.org/uniprot/Q9VAM9",thingType:"term",parameter:""}};var widgetDescriptions=__webpack_require__("./src/app/widgetDescriptions.ts");const DescriptionWidget_stories={title:"Metadata/Entity Information/DescriptionWidget",component:DescriptionWidget.l,parameters:{layout:"centered",docs:{description:{component:widgetDescriptions.Fe}}},argTypes:DescriptionWidgetStoryArgTypes,args:{api:"",iri:"",useLegacy:!0,ontologyId:"",thingType:"term",descText:"",color:"",parameter:"collection=nfdi4health"}},__namedExportsOrder=["DescriptionWidget1","SelectingDefiningOntology","DefiningOntologyUnavailable"]},"./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionPresentation.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D:()=>DescriptionPresentation});__webpack_require__("./node_modules/react/index.js");var _elastic_eui__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function DescriptionPresentation(props){const{descText,description,...rest}=props;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_2__.b,{...rest,children:descText||description})})}DescriptionPresentation.__docgenInfo={description:"",methods:[],displayName:"DescriptionPresentation",props:{descText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},description:{required:!0,tsType:{name:"string"},description:""}}}},"./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>DescriptionWidget});__webpack_require__("./node_modules/react/index.js");var react_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-query/es/index.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@elastic/eui/es/components/loading/loading_spinner.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@elastic/eui/es/components/text/text.js"),_elastic_eui__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@elastic/eui/es/components/provider/provider.js"),_api_OlsApi__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/api/OlsApi.ts"),_app_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/util.ts"),_DescriptionPresentation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionPresentation.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__("./node_modules/react-dom/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const NO_DESCRIPTION="No description available.";function DescriptionWidget(props){const{api,ontologyId,iri,descText,thingType,parameter,useLegacy,...rest}=props,olsApi=new _api_OlsApi__WEBPACK_IMPORTED_MODULE_2__.l(api),{data,isLoading,isSuccess,isError,error}=(0,react_query__WEBPACK_IMPORTED_MODULE_1__.useQuery)(["description",api,parameter,thingType,iri,ontologyId,useLegacy],(async()=>olsApi.getThingObject(iri,thingType,ontologyId,parameter,useLegacy)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[isLoading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_7__.V,{size:"s"}),isSuccess&&data&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_DescriptionPresentation__WEBPACK_IMPORTED_MODULE_4__.D,{description:data.getDescription()||NO_DESCRIPTION,descText,...rest}),isError&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_8__.b,{children:(0,_app_util__WEBPACK_IMPORTED_MODULE_3__.lr)(error,"description")})]})}function WrappedDescriptionWidget(props){const queryClient=new react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClient;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_elastic_eui__WEBPACK_IMPORTED_MODULE_9__.l,{colorMode:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_query__WEBPACK_IMPORTED_MODULE_1__.QueryClientProvider,{client:queryClient,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(DescriptionWidget,{api:props.api,ontologyId:props.ontologyId,iri:props.iri,descText:props.descText,thingType:props.thingType,parameter:props.parameter,color:props.color,useLegacy:props.useLegacy})})})}WrappedDescriptionWidget.displayName="WrappedDescriptionWidget",DescriptionWidget.__docgenInfo={description:"",methods:[],displayName:"DescriptionWidget",props:{api:{required:!0,tsType:{name:"string"},description:"The API instance for the API call.\n- **Official OLS4 API of EMBL-EBI**: [https://www.ebi.ac.uk/ols4/api/](https://www.ebi.ac.uk/ols4/api/)\n- **Official SemLookP API (based on OLS3)**: [https://semanticlookup.zbmed.de/ols/api/](https://semanticlookup.zbmed.de/ols/api/)\n- **Improved SemLookP API (beta version)**: [https://semanticlookup.zbmed.de/api/](https://semanticlookup.zbmed.de/api/)\n- **OLS4 API NFDI4Health collection**: [https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/](https://ols4-nfdi4health.prod.km.k8s.zbmed.de/ols4/api/)\n- **TIB Terminology Service**: [https://service.tib.eu/ts4tib/api/](https://service.tib.eu/ts4tib/api/)\n- **TS4NFDI Gateway**: [https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/](https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway/)"},thingType:{required:!1,tsType:{name:"thingTypeNames[number]",raw:"typeof thingTypeNames[number]"},description:"Sets the type of the thing whose information you want to fetch."},ontologyId:{required:!1,tsType:{name:"string"},description:"Select a specific ontology by id"},iri:{required:!1,tsType:{name:"string"},description:"Entity IRI whose information you want to fetch."},parameter:{required:!1,tsType:{name:"string"},description:"Additional parameters to pass to the API.\n\nThis parameters can be used to filter the search results. Each parameter can be combined via\nthe special character <i><b>&</b></i>. The values of a parameter key can be combined with a comma sign\n<i><b>,</b></i>. The following keys could be used:<br/> <br/>\n <table>\n <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n <tr><td>fieldList</td><td>Specify the fields to return. Defaults are <b>{iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</b></td></tr>\n <tr><td>obsoletes</td><td>Set to true to include obsolete terms in the results</td></tr>\n <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology, e.g. only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n <tr><td>rows</td><td>Set results per page</td></tr>\n <tr><td>start</td><td>Set the results page number</td></tr>\n <tr><td>lang</td><td>Set the language for the response e.g. <b><i>en</i></b>, <b><i>de</i></b>, <b><i>fr</i></b>. The default value is <b><i>en</i></b>.</td></tr>\n <tr><td>collection</td><td>Restrict a search to a terminology subset e.g. <b><i>collection=nfdi4health</i></b></td></tr>\n <tr><td>database</td><td>Restrict a search via the API Gateway to specific terminology software stacks, choose from <b><i>ols</i></b>, <b><i>ontoportal</i></b>, or <b><i>skosmos</i></b></td></tr>\n</table>"},useLegacy:{required:!1,tsType:{name:"boolean"},description:"Toggle between OLS3 (legacy) and OLS4 API versions."},descText:{required:!1,tsType:{name:"string"},description:"Set your own text manually that overwrites the text fetched from the API"},color:{required:!1,tsType:{name:"union",raw:"EuiLinkColor | string",elements:[{name:"EuiLinkColor"},{name:"string"}]},description:"Color of the text, names, hex or rgb"}}}}}]);